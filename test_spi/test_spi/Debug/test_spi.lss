
test_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007194  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  00007194  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000128  200000a8  0000723c  000100a8  2**2
                  ALLOC
  3 .stack        00002000  200001d0  00007364  000100a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000280df  00000000  00000000  0001012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003489  00000000  00000000  0003820a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007c4b  00000000  00000000  0003b693  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000568  00000000  00000000  000432de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009d8  00000000  00000000  00043846  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001902c  00000000  00000000  0004421e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e0a7  00000000  00000000  0005d24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00083beb  00000000  00000000  0006b2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001aa4  00000000  00000000  000eeedc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021d0 	.word	0x200021d0
       4:	00001d9d 	.word	0x00001d9d
       8:	00001d99 	.word	0x00001d99
       c:	00001d99 	.word	0x00001d99
	...
      2c:	00001d99 	.word	0x00001d99
	...
      38:	00001d99 	.word	0x00001d99
      3c:	00001d99 	.word	0x00001d99
      40:	00001d99 	.word	0x00001d99
      44:	00001d99 	.word	0x00001d99
      48:	00001d99 	.word	0x00001d99
      4c:	00001d99 	.word	0x00001d99
      50:	00001d99 	.word	0x00001d99
      54:	00001d99 	.word	0x00001d99
      58:	00001d99 	.word	0x00001d99
      5c:	00001d99 	.word	0x00001d99
      60:	00001d99 	.word	0x00001d99
      64:	00001235 	.word	0x00001235
      68:	00001245 	.word	0x00001245
      6c:	00001255 	.word	0x00001255
      70:	00001265 	.word	0x00001265
	...
      7c:	00001d99 	.word	0x00001d99
      80:	00001d99 	.word	0x00001d99
      84:	00001d99 	.word	0x00001d99
      88:	00001d99 	.word	0x00001d99
      8c:	00001d99 	.word	0x00001d99
      90:	00001d99 	.word	0x00001d99
	...
      9c:	000005f9 	.word	0x000005f9
      a0:	00001d99 	.word	0x00001d99
      a4:	00001d99 	.word	0x00001d99
      a8:	00001d99 	.word	0x00001d99
      ac:	00001d99 	.word	0x00001d99

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200000a8 	.word	0x200000a8
      d0:	00000000 	.word	0x00000000
      d4:	00007194 	.word	0x00007194

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00007194 	.word	0x00007194
     104:	200000ac 	.word	0x200000ac
     108:	00007194 	.word	0x00007194
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00001b49 	.word	0x00001b49
     13c:	00004b79 	.word	0x00004b79
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_ms+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_ms+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     178:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     17a:	2200      	movs	r2, #0
     17c:	2300      	movs	r3, #0
     17e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     180:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     182:	2100      	movs	r1, #0
     184:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     186:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     188:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     18a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     18c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     18e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     190:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     192:	24c0      	movs	r4, #192	; 0xc0
     194:	0164      	lsls	r4, r4, #5
     196:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     198:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     19a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     19c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     19e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1a0:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1a2:	242a      	movs	r4, #42	; 0x2a
     1a4:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1a6:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1a8:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1aa:	2424      	movs	r4, #36	; 0x24
     1ac:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1ae:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1b0:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1b2:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1b4:	232b      	movs	r3, #43	; 0x2b
     1b6:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1b8:	232c      	movs	r3, #44	; 0x2c
     1ba:	54c1      	strb	r1, [r0, r3]
}
     1bc:	bd10      	pop	{r4, pc}
     1be:	46c0      	nop			; (mov r8, r8)

000001c0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c2:	465f      	mov	r7, fp
     1c4:	4656      	mov	r6, sl
     1c6:	464d      	mov	r5, r9
     1c8:	4644      	mov	r4, r8
     1ca:	b4f0      	push	{r4, r5, r6, r7}
     1cc:	b099      	sub	sp, #100	; 0x64
     1ce:	1c06      	adds	r6, r0, #0
     1d0:	1c14      	adds	r4, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1d2:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1d4:	4bbc      	ldr	r3, [pc, #752]	; (4c8 <adc_init+0x308>)
     1d6:	6a18      	ldr	r0, [r3, #32]
     1d8:	2280      	movs	r2, #128	; 0x80
     1da:	0252      	lsls	r2, r2, #9
     1dc:	4302      	orrs	r2, r0
     1de:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1e0:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1e2:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1e4:	07da      	lsls	r2, r3, #31
     1e6:	d500      	bpl.n	1ea <adc_init+0x2a>
     1e8:	e1f6      	b.n	5d8 <adc_init+0x418>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1ea:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     1ec:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1ee:	0799      	lsls	r1, r3, #30
     1f0:	d500      	bpl.n	1f4 <adc_init+0x34>
     1f2:	e1f1      	b.n	5d8 <adc_init+0x418>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     1f4:	7863      	ldrb	r3, [r4, #1]
     1f6:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     1f8:	2b00      	cmp	r3, #0
     1fa:	d000      	beq.n	1fe <adc_init+0x3e>
     1fc:	e1dc      	b.n	5b8 <adc_init+0x3f8>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1fe:	4bb3      	ldr	r3, [pc, #716]	; (4cc <adc_init+0x30c>)
     200:	6c19      	ldr	r1, [r3, #64]	; 0x40
     202:	2204      	movs	r2, #4
     204:	430a      	orrs	r2, r1
     206:	641a      	str	r2, [r3, #64]	; 0x40
     208:	e1d6      	b.n	5b8 <adc_init+0x3f8>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     20a:	7d23      	ldrb	r3, [r4, #20]
     20c:	2b00      	cmp	r3, #0
     20e:	d102      	bne.n	216 <adc_init+0x56>
			!config->freerunning) {
		module_inst->software_trigger = true;
     210:	2301      	movs	r3, #1
     212:	7773      	strb	r3, [r6, #29]
     214:	e001      	b.n	21a <adc_init+0x5a>
	} else {
		module_inst->software_trigger = false;
     216:	2300      	movs	r3, #0
     218:	7773      	strb	r3, [r6, #29]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     21a:	6832      	ldr	r2, [r6, #0]
     21c:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     21e:	7823      	ldrb	r3, [r4, #0]
     220:	4668      	mov	r0, sp
     222:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     224:	201e      	movs	r0, #30
     226:	a902      	add	r1, sp, #8
     228:	4ba9      	ldr	r3, [pc, #676]	; (4d0 <adc_init+0x310>)
     22a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     22c:	201e      	movs	r0, #30
     22e:	4ba9      	ldr	r3, [pc, #676]	; (4d4 <adc_init+0x314>)
     230:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     232:	232c      	movs	r3, #44	; 0x2c
     234:	5ce3      	ldrb	r3, [r4, r3]
     236:	2b00      	cmp	r3, #0
     238:	d042      	beq.n	2c0 <adc_init+0x100>
		uint8_t offset = config->pin_scan.offset_start_scan;
     23a:	222b      	movs	r2, #43	; 0x2b
     23c:	5ca5      	ldrb	r5, [r4, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     23e:	7b21      	ldrb	r1, [r4, #12]
     240:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     242:	194a      	adds	r2, r1, r5
     244:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     246:	18d3      	adds	r3, r2, r3
     248:	b2db      	uxtb	r3, r3
     24a:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     24c:	429a      	cmp	r2, r3
     24e:	d221      	bcs.n	294 <adc_init+0xd4>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     250:	4aa1      	ldr	r2, [pc, #644]	; (4d8 <adc_init+0x318>)
     252:	4693      	mov	fp, r2
     254:	4ba1      	ldr	r3, [pc, #644]	; (4dc <adc_init+0x31c>)
     256:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     258:	270f      	movs	r7, #15
     25a:	402f      	ands	r7, r5
     25c:	7b23      	ldrb	r3, [r4, #12]
     25e:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     260:	a804      	add	r0, sp, #16
     262:	4659      	mov	r1, fp
     264:	2250      	movs	r2, #80	; 0x50
     266:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     268:	2f13      	cmp	r7, #19
     26a:	d80c      	bhi.n	286 <adc_init+0xc6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     26c:	00bf      	lsls	r7, r7, #2
     26e:	ab04      	add	r3, sp, #16
     270:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     272:	a903      	add	r1, sp, #12
     274:	2300      	movs	r3, #0
     276:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     278:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     27a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     27c:	2301      	movs	r3, #1
     27e:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     280:	b2c0      	uxtb	r0, r0
     282:	4a97      	ldr	r2, [pc, #604]	; (4e0 <adc_init+0x320>)
     284:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     286:	3501      	adds	r5, #1
     288:	b2ed      	uxtb	r5, r5
     28a:	4640      	mov	r0, r8
     28c:	1943      	adds	r3, r0, r5
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     28e:	b2db      	uxtb	r3, r3
     290:	454b      	cmp	r3, r9
     292:	d3e1      	bcc.n	258 <adc_init+0x98>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     294:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     296:	a804      	add	r0, sp, #16
     298:	498f      	ldr	r1, [pc, #572]	; (4d8 <adc_init+0x318>)
     29a:	2250      	movs	r2, #80	; 0x50
     29c:	4b8f      	ldr	r3, [pc, #572]	; (4dc <adc_init+0x31c>)
     29e:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2a0:	2d13      	cmp	r5, #19
     2a2:	d837      	bhi.n	314 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2a4:	00ad      	lsls	r5, r5, #2
     2a6:	ab04      	add	r3, sp, #16
     2a8:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2aa:	a903      	add	r1, sp, #12
     2ac:	2300      	movs	r3, #0
     2ae:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2b0:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2b2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2b4:	2301      	movs	r3, #1
     2b6:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2b8:	b2c0      	uxtb	r0, r0
     2ba:	4b89      	ldr	r3, [pc, #548]	; (4e0 <adc_init+0x320>)
     2bc:	4798      	blx	r3
     2be:	e029      	b.n	314 <adc_init+0x154>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     2c0:	7b25      	ldrb	r5, [r4, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2c2:	a804      	add	r0, sp, #16
     2c4:	4984      	ldr	r1, [pc, #528]	; (4d8 <adc_init+0x318>)
     2c6:	2250      	movs	r2, #80	; 0x50
     2c8:	4b84      	ldr	r3, [pc, #528]	; (4dc <adc_init+0x31c>)
     2ca:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2cc:	2d13      	cmp	r5, #19
     2ce:	d80c      	bhi.n	2ea <adc_init+0x12a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2d0:	00ad      	lsls	r5, r5, #2
     2d2:	ab04      	add	r3, sp, #16
     2d4:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d6:	a903      	add	r1, sp, #12
     2d8:	2300      	movs	r3, #0
     2da:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2dc:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2de:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2e0:	2301      	movs	r3, #1
     2e2:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b7e      	ldr	r3, [pc, #504]	; (4e0 <adc_init+0x320>)
     2e8:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     2ea:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2ec:	a804      	add	r0, sp, #16
     2ee:	497a      	ldr	r1, [pc, #488]	; (4d8 <adc_init+0x318>)
     2f0:	2250      	movs	r2, #80	; 0x50
     2f2:	4b7a      	ldr	r3, [pc, #488]	; (4dc <adc_init+0x31c>)
     2f4:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2f6:	2d13      	cmp	r5, #19
     2f8:	d80c      	bhi.n	314 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2fa:	00ad      	lsls	r5, r5, #2
     2fc:	ab04      	add	r3, sp, #16
     2fe:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     300:	a903      	add	r1, sp, #12
     302:	2300      	movs	r3, #0
     304:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     306:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     308:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     30a:	2301      	movs	r3, #1
     30c:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30e:	b2c0      	uxtb	r0, r0
     310:	4b73      	ldr	r3, [pc, #460]	; (4e0 <adc_init+0x320>)
     312:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     314:	7d63      	ldrb	r3, [r4, #21]
     316:	009b      	lsls	r3, r3, #2
     318:	b2db      	uxtb	r3, r3
     31a:	9901      	ldr	r1, [sp, #4]
     31c:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     31e:	7da3      	ldrb	r3, [r4, #22]
     320:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     322:	7862      	ldrb	r2, [r4, #1]
     324:	4313      	orrs	r3, r2
     326:	b2db      	uxtb	r3, r3
     328:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     32a:	7923      	ldrb	r3, [r4, #4]
     32c:	2b34      	cmp	r3, #52	; 0x34
     32e:	d900      	bls.n	332 <adc_init+0x172>
     330:	e140      	b.n	5b4 <adc_init+0x3f4>
     332:	009b      	lsls	r3, r3, #2
     334:	4a6b      	ldr	r2, [pc, #428]	; (4e4 <adc_init+0x324>)
     336:	58d3      	ldr	r3, [r2, r3]
     338:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     33a:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     33c:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     33e:	2301      	movs	r3, #1
     340:	e01a      	b.n	378 <adc_init+0x1b8>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     342:	7c63      	ldrb	r3, [r4, #17]
		accumulate = config->accumulate_samples;
     344:	7c22      	ldrb	r2, [r4, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     346:	2510      	movs	r5, #16
     348:	e016      	b.n	378 <adc_init+0x1b8>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     34a:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     34c:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     34e:	2301      	movs	r3, #1
     350:	e012      	b.n	378 <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     352:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     354:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     356:	2300      	movs	r3, #0
     358:	e00e      	b.n	378 <adc_init+0x1b8>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     35a:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     35c:	2530      	movs	r5, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     35e:	2300      	movs	r3, #0
     360:	e00a      	b.n	378 <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     362:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     364:	2520      	movs	r5, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     366:	2300      	movs	r3, #0
     368:	e006      	b.n	378 <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     36a:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     36c:	2500      	movs	r5, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     36e:	2300      	movs	r3, #0
     370:	e002      	b.n	378 <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     372:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     374:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     376:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     378:	011b      	lsls	r3, r3, #4
     37a:	2170      	movs	r1, #112	; 0x70
     37c:	400b      	ands	r3, r1
     37e:	4313      	orrs	r3, r2
     380:	9a01      	ldr	r2, [sp, #4]
     382:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     384:	7de3      	ldrb	r3, [r4, #23]
		return STATUS_ERR_INVALID_ARG;
     386:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     388:	2b3f      	cmp	r3, #63	; 0x3f
     38a:	d900      	bls.n	38e <adc_init+0x1ce>
     38c:	e124      	b.n	5d8 <adc_init+0x418>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     38e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     390:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     392:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <adc_init+0x1d2>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     39a:	7ce2      	ldrb	r2, [r4, #19]
     39c:	8863      	ldrh	r3, [r4, #2]
     39e:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3a0:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     3a2:	5ca2      	ldrb	r2, [r4, r2]
     3a4:	00d2      	lsls	r2, r2, #3
     3a6:	4313      	orrs	r3, r2
     3a8:	7d22      	ldrb	r2, [r4, #20]
     3aa:	0092      	lsls	r2, r2, #2
     3ac:	4313      	orrs	r3, r2
     3ae:	7ca2      	ldrb	r2, [r4, #18]
     3b0:	0052      	lsls	r2, r2, #1
     3b2:	4313      	orrs	r3, r2
     3b4:	432b      	orrs	r3, r5
     3b6:	9801      	ldr	r0, [sp, #4]
     3b8:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ba:	7e23      	ldrb	r3, [r4, #24]
     3bc:	2b00      	cmp	r3, #0
     3be:	d101      	bne.n	3c4 <adc_init+0x204>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3c0:	6831      	ldr	r1, [r6, #0]
     3c2:	e097      	b.n	4f4 <adc_init+0x334>
		switch (resolution) {
     3c4:	2d10      	cmp	r5, #16
     3c6:	d05f      	beq.n	488 <adc_init+0x2c8>
     3c8:	d802      	bhi.n	3d0 <adc_init+0x210>
     3ca:	2d00      	cmp	r5, #0
     3cc:	d03c      	beq.n	448 <adc_init+0x288>
     3ce:	e7f7      	b.n	3c0 <adc_init+0x200>
     3d0:	2d20      	cmp	r5, #32
     3d2:	d019      	beq.n	408 <adc_init+0x248>
     3d4:	2d30      	cmp	r5, #48	; 0x30
     3d6:	d1f3      	bne.n	3c0 <adc_init+0x200>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     3d8:	7ce2      	ldrb	r2, [r4, #19]
     3da:	2a00      	cmp	r2, #0
     3dc:	d00a      	beq.n	3f4 <adc_init+0x234>
					(config->window.window_lower_value > 127 ||
     3de:	69e2      	ldr	r2, [r4, #28]
     3e0:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3e2:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     3e4:	2aff      	cmp	r2, #255	; 0xff
     3e6:	d900      	bls.n	3ea <adc_init+0x22a>
     3e8:	e0f6      	b.n	5d8 <adc_init+0x418>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     3ea:	6a22      	ldr	r2, [r4, #32]
     3ec:	3280      	adds	r2, #128	; 0x80
     3ee:	2aff      	cmp	r2, #255	; 0xff
     3f0:	d900      	bls.n	3f4 <adc_init+0x234>
     3f2:	e0f1      	b.n	5d8 <adc_init+0x418>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3f4:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     3f6:	69e1      	ldr	r1, [r4, #28]
     3f8:	29ff      	cmp	r1, #255	; 0xff
     3fa:	dd00      	ble.n	3fe <adc_init+0x23e>
     3fc:	e0ec      	b.n	5d8 <adc_init+0x418>
     3fe:	6a22      	ldr	r2, [r4, #32]
     400:	2aff      	cmp	r2, #255	; 0xff
     402:	dd00      	ble.n	406 <adc_init+0x246>
     404:	e0e8      	b.n	5d8 <adc_init+0x418>
     406:	e7db      	b.n	3c0 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     408:	7ce2      	ldrb	r2, [r4, #19]
     40a:	2a00      	cmp	r2, #0
     40c:	d011      	beq.n	432 <adc_init+0x272>
					(config->window.window_lower_value > 511 ||
     40e:	69e0      	ldr	r0, [r4, #28]
     410:	2280      	movs	r2, #128	; 0x80
     412:	0092      	lsls	r2, r2, #2
     414:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     416:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     418:	4a33      	ldr	r2, [pc, #204]	; (4e8 <adc_init+0x328>)
     41a:	4291      	cmp	r1, r2
     41c:	d900      	bls.n	420 <adc_init+0x260>
     41e:	e0db      	b.n	5d8 <adc_init+0x418>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     420:	6a20      	ldr	r0, [r4, #32]
     422:	2280      	movs	r2, #128	; 0x80
     424:	0092      	lsls	r2, r2, #2
     426:	1881      	adds	r1, r0, r2
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     428:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     42a:	4a2f      	ldr	r2, [pc, #188]	; (4e8 <adc_init+0x328>)
     42c:	4291      	cmp	r1, r2
     42e:	d900      	bls.n	432 <adc_init+0x272>
     430:	e0d2      	b.n	5d8 <adc_init+0x418>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     432:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     434:	4a2c      	ldr	r2, [pc, #176]	; (4e8 <adc_init+0x328>)
     436:	69e1      	ldr	r1, [r4, #28]
     438:	4291      	cmp	r1, r2
     43a:	dd00      	ble.n	43e <adc_init+0x27e>
     43c:	e0cc      	b.n	5d8 <adc_init+0x418>
     43e:	6a21      	ldr	r1, [r4, #32]
     440:	4291      	cmp	r1, r2
     442:	dd00      	ble.n	446 <adc_init+0x286>
     444:	e0c8      	b.n	5d8 <adc_init+0x418>
     446:	e7bb      	b.n	3c0 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     448:	7ce2      	ldrb	r2, [r4, #19]
     44a:	2a00      	cmp	r2, #0
     44c:	d011      	beq.n	472 <adc_init+0x2b2>
					(config->window.window_lower_value > 2047 ||
     44e:	69e2      	ldr	r2, [r4, #28]
     450:	2080      	movs	r0, #128	; 0x80
     452:	0100      	lsls	r0, r0, #4
     454:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     456:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     458:	4a24      	ldr	r2, [pc, #144]	; (4ec <adc_init+0x32c>)
     45a:	4291      	cmp	r1, r2
     45c:	d900      	bls.n	460 <adc_init+0x2a0>
     45e:	e0bb      	b.n	5d8 <adc_init+0x418>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     460:	6a22      	ldr	r2, [r4, #32]
     462:	2080      	movs	r0, #128	; 0x80
     464:	0100      	lsls	r0, r0, #4
     466:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     468:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     46a:	4a20      	ldr	r2, [pc, #128]	; (4ec <adc_init+0x32c>)
     46c:	4291      	cmp	r1, r2
     46e:	d900      	bls.n	472 <adc_init+0x2b2>
     470:	e0b2      	b.n	5d8 <adc_init+0x418>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     472:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     474:	4a1d      	ldr	r2, [pc, #116]	; (4ec <adc_init+0x32c>)
     476:	69e1      	ldr	r1, [r4, #28]
     478:	4291      	cmp	r1, r2
     47a:	dd00      	ble.n	47e <adc_init+0x2be>
     47c:	e0ac      	b.n	5d8 <adc_init+0x418>
     47e:	6a21      	ldr	r1, [r4, #32]
     480:	4291      	cmp	r1, r2
     482:	dd00      	ble.n	486 <adc_init+0x2c6>
     484:	e0a8      	b.n	5d8 <adc_init+0x418>
     486:	e79b      	b.n	3c0 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     488:	7ce2      	ldrb	r2, [r4, #19]
     48a:	2a00      	cmp	r2, #0
     48c:	d011      	beq.n	4b2 <adc_init+0x2f2>
					(config->window.window_lower_value > 32767 ||
     48e:	69e2      	ldr	r2, [r4, #28]
     490:	2080      	movs	r0, #128	; 0x80
     492:	0200      	lsls	r0, r0, #8
     494:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     496:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     498:	4a15      	ldr	r2, [pc, #84]	; (4f0 <adc_init+0x330>)
     49a:	4291      	cmp	r1, r2
     49c:	d900      	bls.n	4a0 <adc_init+0x2e0>
     49e:	e09b      	b.n	5d8 <adc_init+0x418>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     4a0:	6a22      	ldr	r2, [r4, #32]
     4a2:	2080      	movs	r0, #128	; 0x80
     4a4:	0200      	lsls	r0, r0, #8
     4a6:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     4a8:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     4aa:	4a11      	ldr	r2, [pc, #68]	; (4f0 <adc_init+0x330>)
     4ac:	4291      	cmp	r1, r2
     4ae:	d900      	bls.n	4b2 <adc_init+0x2f2>
     4b0:	e092      	b.n	5d8 <adc_init+0x418>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     4b2:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     4b4:	4a0e      	ldr	r2, [pc, #56]	; (4f0 <adc_init+0x330>)
     4b6:	69e1      	ldr	r1, [r4, #28]
     4b8:	4291      	cmp	r1, r2
     4ba:	dd00      	ble.n	4be <adc_init+0x2fe>
     4bc:	e08c      	b.n	5d8 <adc_init+0x418>
     4be:	6a21      	ldr	r1, [r4, #32]
     4c0:	4291      	cmp	r1, r2
     4c2:	dd00      	ble.n	4c6 <adc_init+0x306>
     4c4:	e088      	b.n	5d8 <adc_init+0x418>
     4c6:	e77b      	b.n	3c0 <adc_init+0x200>
     4c8:	40000400 	.word	0x40000400
     4cc:	40000800 	.word	0x40000800
     4d0:	00001c61 	.word	0x00001c61
     4d4:	00001bd5 	.word	0x00001bd5
     4d8:	00006e24 	.word	0x00006e24
     4dc:	0000237d 	.word	0x0000237d
     4e0:	00001d3d 	.word	0x00001d3d
     4e4:	00006d50 	.word	0x00006d50
     4e8:	000003ff 	.word	0x000003ff
     4ec:	00000fff 	.word	0x00000fff
     4f0:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4f4:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     4f6:	b252      	sxtb	r2, r2
     4f8:	2a00      	cmp	r2, #0
     4fa:	dbfb      	blt.n	4f4 <adc_init+0x334>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     4fc:	9a01      	ldr	r2, [sp, #4]
     4fe:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     500:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     502:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     504:	b25b      	sxtb	r3, r3
     506:	2b00      	cmp	r3, #0
     508:	dbfb      	blt.n	502 <adc_init+0x342>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     50a:	8ba3      	ldrh	r3, [r4, #28]
     50c:	9801      	ldr	r0, [sp, #4]
     50e:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     510:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     512:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     514:	b25b      	sxtb	r3, r3
     516:	2b00      	cmp	r3, #0
     518:	dbfb      	blt.n	512 <adc_init+0x352>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     51a:	8c23      	ldrh	r3, [r4, #32]
     51c:	9901      	ldr	r1, [sp, #4]
     51e:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     520:	232c      	movs	r3, #44	; 0x2c
     522:	5ce3      	ldrb	r3, [r4, r3]
	if (inputs_to_scan > 0) {
     524:	2b00      	cmp	r3, #0
     526:	d004      	beq.n	532 <adc_init+0x372>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     528:	3b01      	subs	r3, #1
     52a:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     52c:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     52e:	2b0f      	cmp	r3, #15
     530:	d852      	bhi.n	5d8 <adc_init+0x418>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     532:	222b      	movs	r2, #43	; 0x2b
     534:	5ca2      	ldrb	r2, [r4, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     536:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     538:	2a0f      	cmp	r2, #15
     53a:	d84d      	bhi.n	5d8 <adc_init+0x418>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     53c:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     53e:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     540:	b240      	sxtb	r0, r0
     542:	2800      	cmp	r0, #0
     544:	dbfb      	blt.n	53e <adc_init+0x37e>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     546:	89e0      	ldrh	r0, [r4, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     548:	7b21      	ldrb	r1, [r4, #12]
			config->gain_factor |
     54a:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     54c:	68a0      	ldr	r0, [r4, #8]
     54e:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     550:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     552:	430a      	orrs	r2, r1
     554:	041b      	lsls	r3, r3, #16
			config->negative_input |
     556:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     558:	9901      	ldr	r1, [sp, #4]
     55a:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     55c:	232a      	movs	r3, #42	; 0x2a
     55e:	5ce3      	ldrb	r3, [r4, r3]
     560:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     562:	230f      	movs	r3, #15
     564:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     566:	2324      	movs	r3, #36	; 0x24
     568:	5ce3      	ldrb	r3, [r4, r3]
     56a:	2b00      	cmp	r3, #0
     56c:	d010      	beq.n	590 <adc_init+0x3d0>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     56e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     570:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     572:	4a1d      	ldr	r2, [pc, #116]	; (5e8 <adc_init+0x428>)
     574:	4293      	cmp	r3, r2
     576:	d82f      	bhi.n	5d8 <adc_init+0x418>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     578:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     57a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     57c:	2080      	movs	r0, #128	; 0x80
     57e:	0100      	lsls	r0, r0, #4
     580:	1819      	adds	r1, r3, r0
     582:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     584:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     586:	4a18      	ldr	r2, [pc, #96]	; (5e8 <adc_init+0x428>)
     588:	4291      	cmp	r1, r2
     58a:	d825      	bhi.n	5d8 <adc_init+0x418>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     58c:	9901      	ldr	r1, [sp, #4]
     58e:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     590:	4b16      	ldr	r3, [pc, #88]	; (5ec <adc_init+0x42c>)
     592:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     594:	0152      	lsls	r2, r2, #5
     596:	23e0      	movs	r3, #224	; 0xe0
     598:	00db      	lsls	r3, r3, #3
     59a:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     59c:	4b14      	ldr	r3, [pc, #80]	; (5f0 <adc_init+0x430>)
     59e:	6858      	ldr	r0, [r3, #4]
     5a0:	0141      	lsls	r1, r0, #5
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	0edb      	lsrs	r3, r3, #27
     5a6:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     5a8:	b2db      	uxtb	r3, r3
     5aa:	4313      	orrs	r3, r2
     5ac:	9901      	ldr	r1, [sp, #4]
     5ae:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     5b0:	2000      	movs	r0, #0
     5b2:	e011      	b.n	5d8 <adc_init+0x418>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5b4:	2017      	movs	r0, #23
     5b6:	e00f      	b.n	5d8 <adc_init+0x418>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     5b8:	2300      	movs	r3, #0
     5ba:	60b3      	str	r3, [r6, #8]
     5bc:	60f3      	str	r3, [r6, #12]
     5be:	6133      	str	r3, [r6, #16]
	};

	module_inst->registered_callback_mask = 0;
     5c0:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
     5c2:	76f3      	strb	r3, [r6, #27]
	module_inst->remaining_conversions = 0;
     5c4:	8333      	strh	r3, [r6, #24]
	module_inst->job_status = STATUS_OK;
     5c6:	7733      	strb	r3, [r6, #28]

	_adc_instances[0] = module_inst;
     5c8:	4b0a      	ldr	r3, [pc, #40]	; (5f4 <adc_init+0x434>)
     5ca:	601e      	str	r6, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     5cc:	232a      	movs	r3, #42	; 0x2a
     5ce:	5ce3      	ldrb	r3, [r4, r3]
     5d0:	2b00      	cmp	r3, #0
     5d2:	d100      	bne.n	5d6 <adc_init+0x416>
     5d4:	e619      	b.n	20a <adc_init+0x4a>
     5d6:	e61e      	b.n	216 <adc_init+0x56>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     5d8:	b019      	add	sp, #100	; 0x64
     5da:	bc3c      	pop	{r2, r3, r4, r5}
     5dc:	4690      	mov	r8, r2
     5de:	4699      	mov	r9, r3
     5e0:	46a2      	mov	sl, r4
     5e2:	46ab      	mov	fp, r5
     5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00000fff 	.word	0x00000fff
     5ec:	00806024 	.word	0x00806024
     5f0:	00806020 	.word	0x00806020
     5f4:	2000010c 	.word	0x2000010c

000005f8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     5f8:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     5fa:	4b2d      	ldr	r3, [pc, #180]	; (6b0 <ADC_Handler+0xb8>)
     5fc:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     5fe:	6823      	ldr	r3, [r4, #0]
     600:	7e1d      	ldrb	r5, [r3, #24]
     602:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     604:	07e9      	lsls	r1, r5, #31
     606:	d535      	bpl.n	674 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     608:	7ee2      	ldrb	r2, [r4, #27]
     60a:	07d1      	lsls	r1, r2, #31
     60c:	d532      	bpl.n	674 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     60e:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     610:	07d1      	lsls	r1, r2, #31
     612:	d52f      	bpl.n	674 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     614:	2201      	movs	r2, #1
     616:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     618:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     61a:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
     61c:	b25b      	sxtb	r3, r3
     61e:	2b00      	cmp	r3, #0
     620:	dbfb      	blt.n	61a <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     622:	6963      	ldr	r3, [r4, #20]
     624:	1c99      	adds	r1, r3, #2
     626:	6161      	str	r1, [r4, #20]
     628:	8b52      	ldrh	r2, [r2, #26]
     62a:	b292      	uxth	r2, r2
     62c:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     62e:	8b23      	ldrh	r3, [r4, #24]
     630:	3b01      	subs	r3, #1
     632:	b29b      	uxth	r3, r3
     634:	8323      	strh	r3, [r4, #24]
     636:	2b00      	cmp	r3, #0
     638:	d011      	beq.n	65e <ADC_Handler+0x66>
				if (module->software_trigger == true) {
     63a:	7f63      	ldrb	r3, [r4, #29]
     63c:	2b00      	cmp	r3, #0
     63e:	d019      	beq.n	674 <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     640:	6823      	ldr	r3, [r4, #0]
     642:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
     644:	b252      	sxtb	r2, r2
     646:	2a00      	cmp	r2, #0
     648:	dbfb      	blt.n	642 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     64a:	7b19      	ldrb	r1, [r3, #12]
     64c:	2202      	movs	r2, #2
     64e:	430a      	orrs	r2, r1
     650:	731a      	strb	r2, [r3, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     652:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     654:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     656:	b25b      	sxtb	r3, r3
     658:	2b00      	cmp	r3, #0
     65a:	dbfb      	blt.n	654 <ADC_Handler+0x5c>
     65c:	e00a      	b.n	674 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     65e:	7f23      	ldrb	r3, [r4, #28]
     660:	2b05      	cmp	r3, #5
     662:	d107      	bne.n	674 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     664:	2300      	movs	r3, #0
     666:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     668:	2301      	movs	r3, #1
     66a:	6822      	ldr	r2, [r4, #0]
     66c:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     66e:	1c20      	adds	r0, r4, #0
     670:	68a3      	ldr	r3, [r4, #8]
     672:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     674:	0769      	lsls	r1, r5, #29
     676:	d50b      	bpl.n	690 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     678:	2304      	movs	r3, #4
     67a:	6822      	ldr	r2, [r4, #0]
     67c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     67e:	7ee3      	ldrb	r3, [r4, #27]
     680:	0799      	lsls	r1, r3, #30
     682:	d505      	bpl.n	690 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     684:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     686:	079a      	lsls	r2, r3, #30
     688:	d502      	bpl.n	690 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     68a:	1c20      	adds	r0, r4, #0
     68c:	68e3      	ldr	r3, [r4, #12]
     68e:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     690:	07a9      	lsls	r1, r5, #30
     692:	d50b      	bpl.n	6ac <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     694:	2302      	movs	r3, #2
     696:	6822      	ldr	r2, [r4, #0]
     698:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     69a:	7ee3      	ldrb	r3, [r4, #27]
     69c:	0759      	lsls	r1, r3, #29
     69e:	d505      	bpl.n	6ac <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     6a0:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     6a2:	075a      	lsls	r2, r3, #29
     6a4:	d502      	bpl.n	6ac <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     6a6:	6923      	ldr	r3, [r4, #16]
     6a8:	1c20      	adds	r0, r4, #0
     6aa:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     6ac:	bd38      	pop	{r3, r4, r5, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	2000010c 	.word	0x2000010c

000006b4 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6b4:	1c93      	adds	r3, r2, #2
     6b6:	009b      	lsls	r3, r3, #2
     6b8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     6ba:	2301      	movs	r3, #1
     6bc:	4093      	lsls	r3, r2
     6be:	1c1a      	adds	r2, r3, #0
     6c0:	7e83      	ldrb	r3, [r0, #26]
     6c2:	431a      	orrs	r2, r3
     6c4:	7682      	strb	r2, [r0, #26]
}
     6c6:	4770      	bx	lr

000006c8 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     6c8:	b510      	push	{r4, lr}
     6ca:	1c03      	adds	r3, r0, #0
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     6cc:	8b04      	ldrh	r4, [r0, #24]
     6ce:	b2a4      	uxth	r4, r4
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     6d0:	2005      	movs	r0, #5
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     6d2:	2c00      	cmp	r4, #0
     6d4:	d11d      	bne.n	712 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
     6d6:	7f18      	ldrb	r0, [r3, #28]
     6d8:	b2c0      	uxtb	r0, r0
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     6da:	2805      	cmp	r0, #5
     6dc:	d019      	beq.n	712 <adc_read_buffer_job+0x4a>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
	}

	module_inst->job_status = STATUS_BUSY;
     6de:	2005      	movs	r0, #5
     6e0:	7718      	strb	r0, [r3, #28]
	module_inst->remaining_conversions = samples;
     6e2:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
     6e4:	6159      	str	r1, [r3, #20]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
     6e6:	2201      	movs	r2, #1
     6e8:	6819      	ldr	r1, [r3, #0]
     6ea:	75ca      	strb	r2, [r1, #23]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
     6ec:	7f5a      	ldrb	r2, [r3, #29]
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
     6ee:	2000      	movs	r0, #0
	module_inst->remaining_conversions = samples;
	module_inst->job_buffer = buffer;

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);

	if(module_inst->software_trigger == true) {
     6f0:	2a00      	cmp	r2, #0
     6f2:	d00e      	beq.n	712 <adc_read_buffer_job+0x4a>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     6f4:	681a      	ldr	r2, [r3, #0]
     6f6:	7e51      	ldrb	r1, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     6f8:	b249      	sxtb	r1, r1
     6fa:	2900      	cmp	r1, #0
     6fc:	dbfb      	blt.n	6f6 <adc_read_buffer_job+0x2e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6fe:	7b10      	ldrb	r0, [r2, #12]
     700:	2102      	movs	r1, #2
     702:	4301      	orrs	r1, r0
     704:	7311      	strb	r1, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     706:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     708:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     70a:	b25b      	sxtb	r3, r3
     70c:	2b00      	cmp	r3, #0
     70e:	dbfb      	blt.n	708 <adc_read_buffer_job+0x40>
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
     710:	2000      	movs	r0, #0
}
     712:	bd10      	pop	{r4, pc}

00000714 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     714:	b500      	push	{lr}
     716:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     718:	ab01      	add	r3, sp, #4
     71a:	2280      	movs	r2, #128	; 0x80
     71c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     71e:	780a      	ldrb	r2, [r1, #0]
     720:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     722:	784a      	ldrb	r2, [r1, #1]
     724:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     726:	788a      	ldrb	r2, [r1, #2]
     728:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     72a:	1c19      	adds	r1, r3, #0
     72c:	4b01      	ldr	r3, [pc, #4]	; (734 <port_pin_set_config+0x20>)
     72e:	4798      	blx	r3
}
     730:	b003      	add	sp, #12
     732:	bd00      	pop	{pc}
     734:	00001d3d 	.word	0x00001d3d

00000738 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     738:	b510      	push	{r4, lr}
     73a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     73c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     73e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     740:	4299      	cmp	r1, r3
     742:	d30c      	bcc.n	75e <_sercom_get_sync_baud_val+0x26>
     744:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     746:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     748:	1c60      	adds	r0, r4, #1
     74a:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     74c:	428b      	cmp	r3, r1
     74e:	d801      	bhi.n	754 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     750:	1c04      	adds	r4, r0, #0
     752:	e7f8      	b.n	746 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     754:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     756:	2cff      	cmp	r4, #255	; 0xff
     758:	d801      	bhi.n	75e <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     75a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     75c:	2000      	movs	r0, #0
	}
}
     75e:	bd10      	pop	{r4, pc}

00000760 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     760:	b5f0      	push	{r4, r5, r6, r7, lr}
     762:	465f      	mov	r7, fp
     764:	4656      	mov	r6, sl
     766:	464d      	mov	r5, r9
     768:	4644      	mov	r4, r8
     76a:	b4f0      	push	{r4, r5, r6, r7}
     76c:	b087      	sub	sp, #28
     76e:	1c06      	adds	r6, r0, #0
     770:	1c0d      	adds	r5, r1, #0
     772:	9204      	str	r2, [sp, #16]
     774:	aa10      	add	r2, sp, #64	; 0x40
     776:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     778:	1c32      	adds	r2, r6, #0
     77a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     77c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     77e:	428a      	cmp	r2, r1
     780:	d900      	bls.n	784 <_sercom_get_async_baud_val+0x24>
     782:	e0b3      	b.n	8ec <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     784:	2b00      	cmp	r3, #0
     786:	d14b      	bne.n	820 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     788:	2100      	movs	r1, #0
     78a:	1c32      	adds	r2, r6, #0
     78c:	4c5e      	ldr	r4, [pc, #376]	; (908 <_sercom_get_async_baud_val+0x1a8>)
     78e:	47a0      	blx	r4
     790:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     792:	1c2e      	adds	r6, r5, #0
     794:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     796:	2000      	movs	r0, #0
     798:	2100      	movs	r1, #0
     79a:	2200      	movs	r2, #0
     79c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     79e:	243f      	movs	r4, #63	; 0x3f
     7a0:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     7a2:	2501      	movs	r5, #1
     7a4:	46a8      	mov	r8, r5
     7a6:	9002      	str	r0, [sp, #8]
     7a8:	9103      	str	r1, [sp, #12]
     7aa:	4661      	mov	r1, ip
     7ac:	3920      	subs	r1, #32
     7ae:	d403      	bmi.n	7b8 <_sercom_get_async_baud_val+0x58>
     7b0:	4640      	mov	r0, r8
     7b2:	4088      	lsls	r0, r1
     7b4:	4681      	mov	r9, r0
     7b6:	e005      	b.n	7c4 <_sercom_get_async_baud_val+0x64>
     7b8:	2120      	movs	r1, #32
     7ba:	4665      	mov	r5, ip
     7bc:	1b4c      	subs	r4, r1, r5
     7be:	4640      	mov	r0, r8
     7c0:	40e0      	lsrs	r0, r4
     7c2:	4681      	mov	r9, r0
     7c4:	4641      	mov	r1, r8
     7c6:	4664      	mov	r4, ip
     7c8:	40a1      	lsls	r1, r4
     7ca:	468a      	mov	sl, r1

		r = r << 1;
     7cc:	1c10      	adds	r0, r2, #0
     7ce:	1c19      	adds	r1, r3, #0
     7d0:	1880      	adds	r0, r0, r2
     7d2:	4159      	adcs	r1, r3
     7d4:	1c02      	adds	r2, r0, #0
     7d6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     7d8:	465d      	mov	r5, fp
     7da:	464c      	mov	r4, r9
     7dc:	4225      	tst	r5, r4
     7de:	d002      	beq.n	7e6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     7e0:	4642      	mov	r2, r8
     7e2:	4302      	orrs	r2, r0
     7e4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     7e6:	429f      	cmp	r7, r3
     7e8:	d80c      	bhi.n	804 <_sercom_get_async_baud_val+0xa4>
     7ea:	d101      	bne.n	7f0 <_sercom_get_async_baud_val+0x90>
     7ec:	4296      	cmp	r6, r2
     7ee:	d809      	bhi.n	804 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     7f0:	1b92      	subs	r2, r2, r6
     7f2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     7f4:	4650      	mov	r0, sl
     7f6:	9d02      	ldr	r5, [sp, #8]
     7f8:	4328      	orrs	r0, r5
     7fa:	4649      	mov	r1, r9
     7fc:	9c03      	ldr	r4, [sp, #12]
     7fe:	4321      	orrs	r1, r4
     800:	9002      	str	r0, [sp, #8]
     802:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     804:	4665      	mov	r5, ip
     806:	3d01      	subs	r5, #1
     808:	46ac      	mov	ip, r5
     80a:	d2ce      	bcs.n	7aa <_sercom_get_async_baud_val+0x4a>
     80c:	9802      	ldr	r0, [sp, #8]
     80e:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     810:	4b3c      	ldr	r3, [pc, #240]	; (904 <_sercom_get_async_baud_val+0x1a4>)
     812:	4a3b      	ldr	r2, [pc, #236]	; (900 <_sercom_get_async_baud_val+0x1a0>)
     814:	1a12      	subs	r2, r2, r0
     816:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     818:	0c12      	lsrs	r2, r2, #16
     81a:	041b      	lsls	r3, r3, #16
     81c:	431a      	orrs	r2, r3
     81e:	e062      	b.n	8e6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     820:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     822:	2b01      	cmp	r3, #1
     824:	d15f      	bne.n	8e6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     826:	0f4f      	lsrs	r7, r1, #29
     828:	46b9      	mov	r9, r7
     82a:	00cd      	lsls	r5, r1, #3
     82c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     82e:	2100      	movs	r1, #0
     830:	1c32      	adds	r2, r6, #0
     832:	2300      	movs	r3, #0
     834:	4c34      	ldr	r4, [pc, #208]	; (908 <_sercom_get_async_baud_val+0x1a8>)
     836:	47a0      	blx	r4
     838:	1c06      	adds	r6, r0, #0
     83a:	1c0f      	adds	r7, r1, #0
     83c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     83e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     840:	9602      	str	r6, [sp, #8]
     842:	9703      	str	r7, [sp, #12]
     844:	469a      	mov	sl, r3
     846:	4650      	mov	r0, sl
     848:	b2c0      	uxtb	r0, r0
     84a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     84c:	2100      	movs	r1, #0
     84e:	4688      	mov	r8, r1
     850:	2200      	movs	r2, #0
     852:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     854:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     856:	1c27      	adds	r7, r4, #0
     858:	3f20      	subs	r7, #32
     85a:	d403      	bmi.n	864 <_sercom_get_async_baud_val+0x104>
     85c:	1c2e      	adds	r6, r5, #0
     85e:	40be      	lsls	r6, r7
     860:	9601      	str	r6, [sp, #4]
     862:	e004      	b.n	86e <_sercom_get_async_baud_val+0x10e>
     864:	2020      	movs	r0, #32
     866:	1b07      	subs	r7, r0, r4
     868:	1c29      	adds	r1, r5, #0
     86a:	40f9      	lsrs	r1, r7
     86c:	9101      	str	r1, [sp, #4]
     86e:	1c2e      	adds	r6, r5, #0
     870:	40a6      	lsls	r6, r4
     872:	9600      	str	r6, [sp, #0]

		r = r << 1;
     874:	1c10      	adds	r0, r2, #0
     876:	1c19      	adds	r1, r3, #0
     878:	1880      	adds	r0, r0, r2
     87a:	4159      	adcs	r1, r3
     87c:	1c02      	adds	r2, r0, #0
     87e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     880:	465f      	mov	r7, fp
     882:	4037      	ands	r7, r6
     884:	46bc      	mov	ip, r7
     886:	9e01      	ldr	r6, [sp, #4]
     888:	464f      	mov	r7, r9
     88a:	403e      	ands	r6, r7
     88c:	4667      	mov	r7, ip
     88e:	433e      	orrs	r6, r7
     890:	d002      	beq.n	898 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     892:	1c2a      	adds	r2, r5, #0
     894:	4302      	orrs	r2, r0
     896:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     898:	9803      	ldr	r0, [sp, #12]
     89a:	4298      	cmp	r0, r3
     89c:	d80b      	bhi.n	8b6 <_sercom_get_async_baud_val+0x156>
     89e:	d102      	bne.n	8a6 <_sercom_get_async_baud_val+0x146>
     8a0:	9902      	ldr	r1, [sp, #8]
     8a2:	4291      	cmp	r1, r2
     8a4:	d807      	bhi.n	8b6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     8a6:	9e02      	ldr	r6, [sp, #8]
     8a8:	9f03      	ldr	r7, [sp, #12]
     8aa:	1b92      	subs	r2, r2, r6
     8ac:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     8ae:	4647      	mov	r7, r8
     8b0:	9800      	ldr	r0, [sp, #0]
     8b2:	4307      	orrs	r7, r0
     8b4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     8b6:	3c01      	subs	r4, #1
     8b8:	d2cd      	bcs.n	856 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     8ba:	4641      	mov	r1, r8
     8bc:	4652      	mov	r2, sl
     8be:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     8c0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     8c2:	4c12      	ldr	r4, [pc, #72]	; (90c <_sercom_get_async_baud_val+0x1ac>)
     8c4:	42a3      	cmp	r3, r4
     8c6:	d908      	bls.n	8da <_sercom_get_async_baud_val+0x17a>
     8c8:	9a05      	ldr	r2, [sp, #20]
     8ca:	3201      	adds	r2, #1
     8cc:	b2d2      	uxtb	r2, r2
     8ce:	9205      	str	r2, [sp, #20]
     8d0:	2601      	movs	r6, #1
     8d2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     8d4:	4657      	mov	r7, sl
     8d6:	2f08      	cmp	r7, #8
     8d8:	d1b5      	bne.n	846 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8da:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     8dc:	9805      	ldr	r0, [sp, #20]
     8de:	2808      	cmp	r0, #8
     8e0:	d004      	beq.n	8ec <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     8e2:	0342      	lsls	r2, r0, #13
     8e4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     8e6:	9c04      	ldr	r4, [sp, #16]
     8e8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     8ea:	2400      	movs	r4, #0
}
     8ec:	1c20      	adds	r0, r4, #0
     8ee:	b007      	add	sp, #28
     8f0:	bc3c      	pop	{r2, r3, r4, r5}
     8f2:	4690      	mov	r8, r2
     8f4:	4699      	mov	r9, r3
     8f6:	46a2      	mov	sl, r4
     8f8:	46ab      	mov	fp, r5
     8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8fc:	46c0      	nop			; (mov r8, r8)
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00000000 	.word	0x00000000
     904:	00000001 	.word	0x00000001
     908:	00004d55 	.word	0x00004d55
     90c:	00001fff 	.word	0x00001fff

00000910 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     910:	b510      	push	{r4, lr}
     912:	b082      	sub	sp, #8
     914:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     916:	4b0f      	ldr	r3, [pc, #60]	; (954 <sercom_set_gclk_generator+0x44>)
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d001      	beq.n	922 <sercom_set_gclk_generator+0x12>
     91e:	2900      	cmp	r1, #0
     920:	d00d      	beq.n	93e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     922:	a901      	add	r1, sp, #4
     924:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     926:	2013      	movs	r0, #19
     928:	4b0b      	ldr	r3, [pc, #44]	; (958 <sercom_set_gclk_generator+0x48>)
     92a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     92c:	2013      	movs	r0, #19
     92e:	4b0b      	ldr	r3, [pc, #44]	; (95c <sercom_set_gclk_generator+0x4c>)
     930:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     932:	4b08      	ldr	r3, [pc, #32]	; (954 <sercom_set_gclk_generator+0x44>)
     934:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     936:	2201      	movs	r2, #1
     938:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     93a:	2000      	movs	r0, #0
     93c:	e007      	b.n	94e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     93e:	4b05      	ldr	r3, [pc, #20]	; (954 <sercom_set_gclk_generator+0x44>)
     940:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     942:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     944:	1b14      	subs	r4, r2, r4
     946:	1e62      	subs	r2, r4, #1
     948:	4194      	sbcs	r4, r2
     94a:	4264      	negs	r4, r4
     94c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     94e:	b002      	add	sp, #8
     950:	bd10      	pop	{r4, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	200000c4 	.word	0x200000c4
     958:	00001c61 	.word	0x00001c61
     95c:	00001bd5 	.word	0x00001bd5

00000960 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     960:	4b2e      	ldr	r3, [pc, #184]	; (a1c <_sercom_get_default_pad+0xbc>)
     962:	4298      	cmp	r0, r3
     964:	d01c      	beq.n	9a0 <_sercom_get_default_pad+0x40>
     966:	d803      	bhi.n	970 <_sercom_get_default_pad+0x10>
     968:	4b2d      	ldr	r3, [pc, #180]	; (a20 <_sercom_get_default_pad+0xc0>)
     96a:	4298      	cmp	r0, r3
     96c:	d007      	beq.n	97e <_sercom_get_default_pad+0x1e>
     96e:	e04a      	b.n	a06 <_sercom_get_default_pad+0xa6>
     970:	4b2c      	ldr	r3, [pc, #176]	; (a24 <_sercom_get_default_pad+0xc4>)
     972:	4298      	cmp	r0, r3
     974:	d025      	beq.n	9c2 <_sercom_get_default_pad+0x62>
     976:	4b2c      	ldr	r3, [pc, #176]	; (a28 <_sercom_get_default_pad+0xc8>)
     978:	4298      	cmp	r0, r3
     97a:	d033      	beq.n	9e4 <_sercom_get_default_pad+0x84>
     97c:	e043      	b.n	a06 <_sercom_get_default_pad+0xa6>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     97e:	2901      	cmp	r1, #1
     980:	d043      	beq.n	a0a <_sercom_get_default_pad+0xaa>
     982:	2900      	cmp	r1, #0
     984:	d004      	beq.n	990 <_sercom_get_default_pad+0x30>
     986:	2902      	cmp	r1, #2
     988:	d006      	beq.n	998 <_sercom_get_default_pad+0x38>
     98a:	2903      	cmp	r1, #3
     98c:	d006      	beq.n	99c <_sercom_get_default_pad+0x3c>
     98e:	e001      	b.n	994 <_sercom_get_default_pad+0x34>
     990:	4826      	ldr	r0, [pc, #152]	; (a2c <_sercom_get_default_pad+0xcc>)
     992:	e041      	b.n	a18 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     994:	2000      	movs	r0, #0
     996:	e03f      	b.n	a18 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     998:	4825      	ldr	r0, [pc, #148]	; (a30 <_sercom_get_default_pad+0xd0>)
     99a:	e03d      	b.n	a18 <_sercom_get_default_pad+0xb8>
     99c:	4825      	ldr	r0, [pc, #148]	; (a34 <_sercom_get_default_pad+0xd4>)
     99e:	e03b      	b.n	a18 <_sercom_get_default_pad+0xb8>
     9a0:	2901      	cmp	r1, #1
     9a2:	d034      	beq.n	a0e <_sercom_get_default_pad+0xae>
     9a4:	2900      	cmp	r1, #0
     9a6:	d004      	beq.n	9b2 <_sercom_get_default_pad+0x52>
     9a8:	2902      	cmp	r1, #2
     9aa:	d006      	beq.n	9ba <_sercom_get_default_pad+0x5a>
     9ac:	2903      	cmp	r1, #3
     9ae:	d006      	beq.n	9be <_sercom_get_default_pad+0x5e>
     9b0:	e001      	b.n	9b6 <_sercom_get_default_pad+0x56>
     9b2:	2003      	movs	r0, #3
     9b4:	e030      	b.n	a18 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     9b6:	2000      	movs	r0, #0
     9b8:	e02e      	b.n	a18 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ba:	481f      	ldr	r0, [pc, #124]	; (a38 <_sercom_get_default_pad+0xd8>)
     9bc:	e02c      	b.n	a18 <_sercom_get_default_pad+0xb8>
     9be:	481f      	ldr	r0, [pc, #124]	; (a3c <_sercom_get_default_pad+0xdc>)
     9c0:	e02a      	b.n	a18 <_sercom_get_default_pad+0xb8>
     9c2:	2901      	cmp	r1, #1
     9c4:	d025      	beq.n	a12 <_sercom_get_default_pad+0xb2>
     9c6:	2900      	cmp	r1, #0
     9c8:	d004      	beq.n	9d4 <_sercom_get_default_pad+0x74>
     9ca:	2902      	cmp	r1, #2
     9cc:	d006      	beq.n	9dc <_sercom_get_default_pad+0x7c>
     9ce:	2903      	cmp	r1, #3
     9d0:	d006      	beq.n	9e0 <_sercom_get_default_pad+0x80>
     9d2:	e001      	b.n	9d8 <_sercom_get_default_pad+0x78>
     9d4:	481a      	ldr	r0, [pc, #104]	; (a40 <_sercom_get_default_pad+0xe0>)
     9d6:	e01f      	b.n	a18 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     9d8:	2000      	movs	r0, #0
     9da:	e01d      	b.n	a18 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9dc:	4819      	ldr	r0, [pc, #100]	; (a44 <_sercom_get_default_pad+0xe4>)
     9de:	e01b      	b.n	a18 <_sercom_get_default_pad+0xb8>
     9e0:	4819      	ldr	r0, [pc, #100]	; (a48 <_sercom_get_default_pad+0xe8>)
     9e2:	e019      	b.n	a18 <_sercom_get_default_pad+0xb8>
     9e4:	2901      	cmp	r1, #1
     9e6:	d016      	beq.n	a16 <_sercom_get_default_pad+0xb6>
     9e8:	2900      	cmp	r1, #0
     9ea:	d004      	beq.n	9f6 <_sercom_get_default_pad+0x96>
     9ec:	2902      	cmp	r1, #2
     9ee:	d006      	beq.n	9fe <_sercom_get_default_pad+0x9e>
     9f0:	2903      	cmp	r1, #3
     9f2:	d006      	beq.n	a02 <_sercom_get_default_pad+0xa2>
     9f4:	e001      	b.n	9fa <_sercom_get_default_pad+0x9a>
     9f6:	4815      	ldr	r0, [pc, #84]	; (a4c <_sercom_get_default_pad+0xec>)
     9f8:	e00e      	b.n	a18 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     9fa:	2000      	movs	r0, #0
     9fc:	e00c      	b.n	a18 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9fe:	4814      	ldr	r0, [pc, #80]	; (a50 <_sercom_get_default_pad+0xf0>)
     a00:	e00a      	b.n	a18 <_sercom_get_default_pad+0xb8>
     a02:	4814      	ldr	r0, [pc, #80]	; (a54 <_sercom_get_default_pad+0xf4>)
     a04:	e008      	b.n	a18 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     a06:	2000      	movs	r0, #0
     a08:	e006      	b.n	a18 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a0a:	4813      	ldr	r0, [pc, #76]	; (a58 <_sercom_get_default_pad+0xf8>)
     a0c:	e004      	b.n	a18 <_sercom_get_default_pad+0xb8>
     a0e:	4813      	ldr	r0, [pc, #76]	; (a5c <_sercom_get_default_pad+0xfc>)
     a10:	e002      	b.n	a18 <_sercom_get_default_pad+0xb8>
     a12:	4813      	ldr	r0, [pc, #76]	; (a60 <_sercom_get_default_pad+0x100>)
     a14:	e000      	b.n	a18 <_sercom_get_default_pad+0xb8>
     a16:	4813      	ldr	r0, [pc, #76]	; (a64 <_sercom_get_default_pad+0x104>)
	}

	Assert(false);
	return 0;
}
     a18:	4770      	bx	lr
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	42000c00 	.word	0x42000c00
     a20:	42000800 	.word	0x42000800
     a24:	42001000 	.word	0x42001000
     a28:	42001400 	.word	0x42001400
     a2c:	00040003 	.word	0x00040003
     a30:	00060003 	.word	0x00060003
     a34:	00070003 	.word	0x00070003
     a38:	001e0003 	.word	0x001e0003
     a3c:	001f0003 	.word	0x001f0003
     a40:	00080003 	.word	0x00080003
     a44:	000a0003 	.word	0x000a0003
     a48:	000b0003 	.word	0x000b0003
     a4c:	00100003 	.word	0x00100003
     a50:	00120003 	.word	0x00120003
     a54:	00130003 	.word	0x00130003
     a58:	00050003 	.word	0x00050003
     a5c:	00010003 	.word	0x00010003
     a60:	00090003 	.word	0x00090003
     a64:	00110003 	.word	0x00110003

00000a68 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a68:	b570      	push	{r4, r5, r6, lr}
     a6a:	b084      	sub	sp, #16
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a6c:	4a0e      	ldr	r2, [pc, #56]	; (aa8 <_sercom_get_sercom_inst_index+0x40>)
     a6e:	4669      	mov	r1, sp
     a70:	ca70      	ldmia	r2!, {r4, r5, r6}
     a72:	c170      	stmia	r1!, {r4, r5, r6}
     a74:	6812      	ldr	r2, [r2, #0]
     a76:	600a      	str	r2, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a78:	1c03      	adds	r3, r0, #0
     a7a:	9a00      	ldr	r2, [sp, #0]
     a7c:	4282      	cmp	r2, r0
     a7e:	d00f      	beq.n	aa0 <_sercom_get_sercom_inst_index+0x38>
     a80:	9c01      	ldr	r4, [sp, #4]
     a82:	4284      	cmp	r4, r0
     a84:	d008      	beq.n	a98 <_sercom_get_sercom_inst_index+0x30>
     a86:	9d02      	ldr	r5, [sp, #8]
     a88:	4285      	cmp	r5, r0
     a8a:	d007      	beq.n	a9c <_sercom_get_sercom_inst_index+0x34>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a8c:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a8e:	9e03      	ldr	r6, [sp, #12]
     a90:	429e      	cmp	r6, r3
     a92:	d107      	bne.n	aa4 <_sercom_get_sercom_inst_index+0x3c>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a94:	2003      	movs	r0, #3
     a96:	e004      	b.n	aa2 <_sercom_get_sercom_inst_index+0x3a>
     a98:	2001      	movs	r0, #1
     a9a:	e002      	b.n	aa2 <_sercom_get_sercom_inst_index+0x3a>
     a9c:	2002      	movs	r0, #2
     a9e:	e000      	b.n	aa2 <_sercom_get_sercom_inst_index+0x3a>
     aa0:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     aa2:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     aa4:	b004      	add	sp, #16
     aa6:	bd70      	pop	{r4, r5, r6, pc}
     aa8:	00006e74 	.word	0x00006e74

00000aac <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     aac:	b5f0      	push	{r4, r5, r6, r7, lr}
     aae:	4647      	mov	r7, r8
     ab0:	b480      	push	{r7}
     ab2:	b088      	sub	sp, #32
     ab4:	1c05      	adds	r5, r0, #0
     ab6:	1c0c      	adds	r4, r1, #0
     ab8:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     aba:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     abc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     abe:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ac0:	079a      	lsls	r2, r3, #30
     ac2:	d500      	bpl.n	ac6 <spi_init+0x1a>
     ac4:	e0df      	b.n	c86 <spi_init+0x1da>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ac6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     ac8:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     aca:	07da      	lsls	r2, r3, #31
     acc:	d500      	bpl.n	ad0 <spi_init+0x24>
     ace:	e0da      	b.n	c86 <spi_init+0x1da>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad0:	1c08      	adds	r0, r1, #0
     ad2:	4b6f      	ldr	r3, [pc, #444]	; (c90 <spi_init+0x1e4>)
     ad4:	4798      	blx	r3
     ad6:	4b6f      	ldr	r3, [pc, #444]	; (c94 <spi_init+0x1e8>)
     ad8:	6a19      	ldr	r1, [r3, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ada:	1c82      	adds	r2, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     adc:	2701      	movs	r7, #1
     ade:	4097      	lsls	r7, r2
     ae0:	1c3a      	adds	r2, r7, #0
     ae2:	430a      	orrs	r2, r1
     ae4:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     ae6:	a907      	add	r1, sp, #28
     ae8:	2724      	movs	r7, #36	; 0x24
     aea:	5df3      	ldrb	r3, [r6, r7]
     aec:	700b      	strb	r3, [r1, #0]
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aee:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     af0:	b2c0      	uxtb	r0, r0
     af2:	4680      	mov	r8, r0
     af4:	4b68      	ldr	r3, [pc, #416]	; (c98 <spi_init+0x1ec>)
     af6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     af8:	4640      	mov	r0, r8
     afa:	4b68      	ldr	r3, [pc, #416]	; (c9c <spi_init+0x1f0>)
     afc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     afe:	5df0      	ldrb	r0, [r6, r7]
     b00:	2100      	movs	r1, #0
     b02:	4b67      	ldr	r3, [pc, #412]	; (ca0 <spi_init+0x1f4>)
     b04:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b06:	7833      	ldrb	r3, [r6, #0]
     b08:	2b01      	cmp	r3, #1
     b0a:	d103      	bne.n	b14 <spi_init+0x68>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b0c:	6822      	ldr	r2, [r4, #0]
     b0e:	230c      	movs	r3, #12
     b10:	4313      	orrs	r3, r2
     b12:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b14:	7833      	ldrb	r3, [r6, #0]
     b16:	2b00      	cmp	r3, #0
     b18:	d000      	beq.n	b1c <spi_init+0x70>
     b1a:	e0b1      	b.n	c80 <spi_init+0x1d4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b1c:	6822      	ldr	r2, [r4, #0]
     b1e:	2308      	movs	r3, #8
     b20:	4313      	orrs	r3, r2
     b22:	6023      	str	r3, [r4, #0]
     b24:	e0ac      	b.n	c80 <spi_init+0x1d4>
     b26:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     b28:	60d1      	str	r1, [r2, #12]
     b2a:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b2c:	2b1c      	cmp	r3, #28
     b2e:	d1fa      	bne.n	b26 <spi_init+0x7a>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     b30:	2300      	movs	r3, #0
     b32:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     b34:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     b36:	2400      	movs	r4, #0
     b38:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     b3a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     b3c:	2336      	movs	r3, #54	; 0x36
     b3e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     b40:	2337      	movs	r3, #55	; 0x37
     b42:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     b44:	2338      	movs	r3, #56	; 0x38
     b46:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     b48:	2303      	movs	r3, #3
     b4a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     b4c:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     b4e:	6828      	ldr	r0, [r5, #0]
     b50:	4b4f      	ldr	r3, [pc, #316]	; (c90 <spi_init+0x1e4>)
     b52:	4798      	blx	r3
     b54:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     b56:	4953      	ldr	r1, [pc, #332]	; (ca4 <spi_init+0x1f8>)
     b58:	4b53      	ldr	r3, [pc, #332]	; (ca8 <spi_init+0x1fc>)
     b5a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b5c:	00bf      	lsls	r7, r7, #2
     b5e:	4b53      	ldr	r3, [pc, #332]	; (cac <spi_init+0x200>)
     b60:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b62:	682f      	ldr	r7, [r5, #0]
     b64:	ab02      	add	r3, sp, #8
     b66:	2280      	movs	r2, #128	; 0x80
     b68:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b6a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b6c:	2201      	movs	r2, #1
     b6e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     b70:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b72:	7833      	ldrb	r3, [r6, #0]
     b74:	2b00      	cmp	r3, #0
     b76:	d102      	bne.n	b7e <spi_init+0xd2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b78:	2200      	movs	r2, #0
     b7a:	ab02      	add	r3, sp, #8
     b7c:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     b80:	9303      	str	r3, [sp, #12]
     b82:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     b84:	9004      	str	r0, [sp, #16]
     b86:	6b32      	ldr	r2, [r6, #48]	; 0x30
     b88:	9205      	str	r2, [sp, #20]
     b8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     b8c:	9306      	str	r3, [sp, #24]
     b8e:	2400      	movs	r4, #0
     b90:	b2e1      	uxtb	r1, r4
     b92:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b94:	aa03      	add	r2, sp, #12
     b96:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     b98:	2800      	cmp	r0, #0
     b9a:	d102      	bne.n	ba2 <spi_init+0xf6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b9c:	1c38      	adds	r0, r7, #0
     b9e:	4a44      	ldr	r2, [pc, #272]	; (cb0 <spi_init+0x204>)
     ba0:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ba2:	1c43      	adds	r3, r0, #1
     ba4:	d006      	beq.n	bb4 <spi_init+0x108>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ba6:	466a      	mov	r2, sp
     ba8:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     baa:	0c00      	lsrs	r0, r0, #16
     bac:	b2c0      	uxtb	r0, r0
     bae:	a902      	add	r1, sp, #8
     bb0:	4b40      	ldr	r3, [pc, #256]	; (cb4 <spi_init+0x208>)
     bb2:	4798      	blx	r3
     bb4:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     bb6:	2c04      	cmp	r4, #4
     bb8:	d1ea      	bne.n	b90 <spi_init+0xe4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     bba:	7833      	ldrb	r3, [r6, #0]
     bbc:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     bbe:	7c33      	ldrb	r3, [r6, #16]
     bc0:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     bc2:	7cb3      	ldrb	r3, [r6, #18]
     bc4:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     bc6:	7d33      	ldrb	r3, [r6, #20]
     bc8:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     bca:	2200      	movs	r2, #0
     bcc:	466b      	mov	r3, sp
     bce:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     bd0:	7833      	ldrb	r3, [r6, #0]
     bd2:	2b01      	cmp	r3, #1
     bd4:	d114      	bne.n	c00 <spi_init+0x154>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bd6:	6828      	ldr	r0, [r5, #0]
     bd8:	4b2d      	ldr	r3, [pc, #180]	; (c90 <spi_init+0x1e4>)
     bda:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bdc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bde:	b2c0      	uxtb	r0, r0
     be0:	4b35      	ldr	r3, [pc, #212]	; (cb8 <spi_init+0x20c>)
     be2:	4798      	blx	r3
     be4:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     be6:	69b0      	ldr	r0, [r6, #24]
     be8:	466a      	mov	r2, sp
     bea:	3206      	adds	r2, #6
     bec:	4b33      	ldr	r3, [pc, #204]	; (cbc <spi_init+0x210>)
     bee:	4798      	blx	r3
     bf0:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     bf2:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     bf4:	2b00      	cmp	r3, #0
     bf6:	d146      	bne.n	c86 <spi_init+0x1da>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     bf8:	466b      	mov	r3, sp
     bfa:	3306      	adds	r3, #6
     bfc:	781b      	ldrb	r3, [r3, #0]
     bfe:	733b      	strb	r3, [r7, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b00      	cmp	r3, #0
     c04:	d10f      	bne.n	c26 <spi_init+0x17a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     c06:	69b1      	ldr	r1, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     c08:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     c0c:	7ff4      	ldrb	r4, [r6, #31]
     c0e:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c10:	7fb2      	ldrb	r2, [r6, #30]
     c12:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     c14:	4302      	orrs	r2, r0
     c16:	627a      	str	r2, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     c18:	2220      	movs	r2, #32
     c1a:	5cb2      	ldrb	r2, [r6, r2]
     c1c:	2a00      	cmp	r2, #0
     c1e:	d004      	beq.n	c2a <spi_init+0x17e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     c20:	2240      	movs	r2, #64	; 0x40
     c22:	4313      	orrs	r3, r2
     c24:	e001      	b.n	c2a <spi_init+0x17e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     c26:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     c28:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     c2a:	68b2      	ldr	r2, [r6, #8]
     c2c:	6870      	ldr	r0, [r6, #4]
     c2e:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     c30:	68f0      	ldr	r0, [r6, #12]
     c32:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     c34:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
     c36:	7c31      	ldrb	r1, [r6, #16]
     c38:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c3a:	7c71      	ldrb	r1, [r6, #17]
     c3c:	2900      	cmp	r1, #0
     c3e:	d103      	bne.n	c48 <spi_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c40:	491f      	ldr	r1, [pc, #124]	; (cc0 <spi_init+0x214>)
     c42:	7889      	ldrb	r1, [r1, #2]
     c44:	0788      	lsls	r0, r1, #30
     c46:	d501      	bpl.n	c4c <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     c48:	2180      	movs	r1, #128	; 0x80
     c4a:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     c4c:	7cb1      	ldrb	r1, [r6, #18]
     c4e:	2900      	cmp	r1, #0
     c50:	d002      	beq.n	c58 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c52:	2180      	movs	r1, #128	; 0x80
     c54:	0289      	lsls	r1, r1, #10
     c56:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     c58:	7cf1      	ldrb	r1, [r6, #19]
     c5a:	2900      	cmp	r1, #0
     c5c:	d002      	beq.n	c64 <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c5e:	2180      	movs	r1, #128	; 0x80
     c60:	0089      	lsls	r1, r1, #2
     c62:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     c64:	7d31      	ldrb	r1, [r6, #20]
     c66:	2900      	cmp	r1, #0
     c68:	d002      	beq.n	c70 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c6a:	2180      	movs	r1, #128	; 0x80
     c6c:	0189      	lsls	r1, r1, #6
     c6e:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     c70:	6839      	ldr	r1, [r7, #0]
     c72:	430a      	orrs	r2, r1
     c74:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     c76:	687a      	ldr	r2, [r7, #4]
     c78:	4313      	orrs	r3, r2
     c7a:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     c7c:	2000      	movs	r0, #0
     c7e:	e002      	b.n	c86 <spi_init+0x1da>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c80:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     c82:	2100      	movs	r1, #0
     c84:	e74f      	b.n	b26 <spi_init+0x7a>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     c86:	b008      	add	sp, #32
     c88:	bc04      	pop	{r2}
     c8a:	4690      	mov	r8, r2
     c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	00000a69 	.word	0x00000a69
     c94:	40000400 	.word	0x40000400
     c98:	00001c61 	.word	0x00001c61
     c9c:	00001bd5 	.word	0x00001bd5
     ca0:	00000911 	.word	0x00000911
     ca4:	00000fcd 	.word	0x00000fcd
     ca8:	000011c9 	.word	0x000011c9
     cac:	20000114 	.word	0x20000114
     cb0:	00000961 	.word	0x00000961
     cb4:	00001d3d 	.word	0x00001d3d
     cb8:	00001c7d 	.word	0x00001c7d
     cbc:	00000739 	.word	0x00000739
     cc0:	41002000 	.word	0x41002000

00000cc4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     cc4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     cc6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     cc8:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     cca:	2c01      	cmp	r4, #1
     ccc:	d16c      	bne.n	da8 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     cce:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cd0:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     cd2:	2c00      	cmp	r4, #0
     cd4:	d168      	bne.n	da8 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     cd6:	2a00      	cmp	r2, #0
     cd8:	d057      	beq.n	d8a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     cda:	784b      	ldrb	r3, [r1, #1]
     cdc:	2b00      	cmp	r3, #0
     cde:	d044      	beq.n	d6a <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ce0:	6802      	ldr	r2, [r0, #0]
     ce2:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     ce4:	07dc      	lsls	r4, r3, #31
     ce6:	d40f      	bmi.n	d08 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     ce8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cec:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cee:	2900      	cmp	r1, #0
     cf0:	d103      	bne.n	cfa <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     cf2:	095a      	lsrs	r2, r3, #5
     cf4:	01d2      	lsls	r2, r2, #7
     cf6:	492d      	ldr	r1, [pc, #180]	; (dac <spi_select_slave+0xe8>)
     cf8:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cfa:	211f      	movs	r1, #31
     cfc:	400b      	ands	r3, r1
     cfe:	2101      	movs	r1, #1
     d00:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d02:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     d04:	2305      	movs	r3, #5
     d06:	e04f      	b.n	da8 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     d08:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d0a:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d0c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d0e:	2c00      	cmp	r4, #0
     d10:	d103      	bne.n	d1a <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     d12:	095a      	lsrs	r2, r3, #5
     d14:	01d2      	lsls	r2, r2, #7
     d16:	4c25      	ldr	r4, [pc, #148]	; (dac <spi_select_slave+0xe8>)
     d18:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d1a:	241f      	movs	r4, #31
     d1c:	4023      	ands	r3, r4
     d1e:	2401      	movs	r4, #1
     d20:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d22:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     d24:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d26:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d28:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     d2a:	07d4      	lsls	r4, r2, #31
     d2c:	d500      	bpl.n	d30 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d2e:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     d30:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d32:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     d34:	2a00      	cmp	r2, #0
     d36:	d137      	bne.n	da8 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d38:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d3a:	2104      	movs	r1, #4
     d3c:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     d3e:	420b      	tst	r3, r1
     d40:	d0fc      	beq.n	d3c <spi_select_slave+0x78>
     d42:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d44:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     d46:	074c      	lsls	r4, r1, #29
     d48:	d52e      	bpl.n	da8 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d4a:	8b53      	ldrh	r3, [r2, #26]
     d4c:	0759      	lsls	r1, r3, #29
     d4e:	d503      	bpl.n	d58 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     d50:	8b51      	ldrh	r1, [r2, #26]
     d52:	2304      	movs	r3, #4
     d54:	430b      	orrs	r3, r1
     d56:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d58:	7983      	ldrb	r3, [r0, #6]
     d5a:	2b01      	cmp	r3, #1
     d5c:	d102      	bne.n	d64 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d60:	2300      	movs	r3, #0
     d62:	e021      	b.n	da8 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d64:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d66:	2300      	movs	r3, #0
     d68:	e01e      	b.n	da8 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     d6a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d6c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d6e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d70:	2900      	cmp	r1, #0
     d72:	d103      	bne.n	d7c <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     d74:	095a      	lsrs	r2, r3, #5
     d76:	01d2      	lsls	r2, r2, #7
     d78:	4c0c      	ldr	r4, [pc, #48]	; (dac <spi_select_slave+0xe8>)
     d7a:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d7c:	211f      	movs	r1, #31
     d7e:	400b      	ands	r3, r1
     d80:	2101      	movs	r1, #1
     d82:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d84:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d86:	2300      	movs	r3, #0
     d88:	e00e      	b.n	da8 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     d8a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d8c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d8e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d90:	2900      	cmp	r1, #0
     d92:	d103      	bne.n	d9c <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     d94:	095a      	lsrs	r2, r3, #5
     d96:	01d2      	lsls	r2, r2, #7
     d98:	4904      	ldr	r1, [pc, #16]	; (dac <spi_select_slave+0xe8>)
     d9a:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d9c:	211f      	movs	r1, #31
     d9e:	400b      	ands	r3, r1
     da0:	2101      	movs	r1, #1
     da2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     da4:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     da6:	2300      	movs	r3, #0
}
     da8:	1c18      	adds	r0, r3, #0
     daa:	bd10      	pop	{r4, pc}
     dac:	41004400 	.word	0x41004400

00000db0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     db0:	b5f0      	push	{r4, r5, r6, r7, lr}
     db2:	465f      	mov	r7, fp
     db4:	4656      	mov	r6, sl
     db6:	464d      	mov	r5, r9
     db8:	4644      	mov	r4, r8
     dba:	b4f0      	push	{r4, r5, r6, r7}
     dbc:	b083      	sub	sp, #12
     dbe:	1c04      	adds	r4, r0, #0
     dc0:	4692      	mov	sl, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     dc2:	2338      	movs	r3, #56	; 0x38
     dc4:	5cc0      	ldrb	r0, [r0, r3]
     dc6:	b2c0      	uxtb	r0, r0
     dc8:	2805      	cmp	r0, #5
     dca:	d100      	bne.n	dce <spi_write_buffer_wait+0x1e>
     dcc:	e0f1      	b.n	fb2 <spi_write_buffer_wait+0x202>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     dce:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     dd0:	2a00      	cmp	r2, #0
     dd2:	d100      	bne.n	dd6 <spi_write_buffer_wait+0x26>
     dd4:	e0ed      	b.n	fb2 <spi_write_buffer_wait+0x202>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     dd6:	7963      	ldrb	r3, [r4, #5]
     dd8:	2b00      	cmp	r3, #0
     dda:	d105      	bne.n	de8 <spi_write_buffer_wait+0x38>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ddc:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     dde:	7e18      	ldrb	r0, [r3, #24]
     de0:	0782      	lsls	r2, r0, #30
     de2:	d501      	bpl.n	de8 <spi_write_buffer_wait+0x38>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     de4:	2002      	movs	r0, #2
     de6:	7618      	strb	r0, [r3, #24]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     de8:	4655      	mov	r5, sl
     dea:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dec:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     dee:	2602      	movs	r6, #2
     df0:	46b4      	mov	ip, r6
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     df2:	2704      	movs	r7, #4
     df4:	46bb      	mov	fp, r7
     df6:	e08f      	b.n	f18 <spi_write_buffer_wait+0x168>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     df8:	7962      	ldrb	r2, [r4, #5]
     dfa:	2a00      	cmp	r2, #0
     dfc:	d001      	beq.n	e02 <spi_write_buffer_wait+0x52>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dfe:	6826      	ldr	r6, [r4, #0]
     e00:	e016      	b.n	e30 <spi_write_buffer_wait+0x80>
     e02:	6822      	ldr	r2, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e04:	7e16      	ldrb	r6, [r2, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
     e06:	421e      	tst	r6, r3
     e08:	d106      	bne.n	e18 <spi_write_buffer_wait+0x68>
     e0a:	4e6d      	ldr	r6, [pc, #436]	; (fc0 <spi_write_buffer_wait+0x210>)
     e0c:	7e17      	ldrb	r7, [r2, #24]
     e0e:	421f      	tst	r7, r3
     e10:	d102      	bne.n	e18 <spi_write_buffer_wait+0x68>
     e12:	3e01      	subs	r6, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e14:	2e00      	cmp	r6, #0
     e16:	d1f9      	bne.n	e0c <spi_write_buffer_wait+0x5c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e18:	7e16      	ldrb	r6, [r2, #24]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     e1a:	4667      	mov	r7, ip
     e1c:	423e      	tst	r6, r7
     e1e:	d003      	beq.n	e28 <spi_write_buffer_wait+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e20:	2302      	movs	r3, #2
     e22:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     e24:	2004      	movs	r0, #4
     e26:	e0c4      	b.n	fb2 <spi_write_buffer_wait+0x202>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e28:	7e12      	ldrb	r2, [r2, #24]
			}

			if (!spi_is_ready_to_write(module)) {
     e2a:	421a      	tst	r2, r3
     e2c:	d1e7      	bne.n	dfe <spi_write_buffer_wait+0x4e>
     e2e:	e0b3      	b.n	f98 <spi_write_buffer_wait+0x1e8>
     e30:	7e32      	ldrb	r2, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     e32:	421a      	tst	r2, r3
     e34:	d0fc      	beq.n	e30 <spi_write_buffer_wait+0x80>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e36:	1c42      	adds	r2, r0, #1
     e38:	b292      	uxth	r2, r2
     e3a:	4690      	mov	r8, r2
     e3c:	5c0f      	ldrb	r7, [r1, r0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e3e:	79a2      	ldrb	r2, [r4, #6]
     e40:	2a01      	cmp	r2, #1
     e42:	d001      	beq.n	e48 <spi_write_buffer_wait+0x98>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e44:	4640      	mov	r0, r8
     e46:	e005      	b.n	e54 <spi_write_buffer_wait+0xa4>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     e48:	3002      	adds	r0, #2
     e4a:	b280      	uxth	r0, r0
     e4c:	4642      	mov	r2, r8
     e4e:	5c8a      	ldrb	r2, [r1, r2]
     e50:	0212      	lsls	r2, r2, #8
     e52:	4317      	orrs	r7, r2
     e54:	7e32      	ldrb	r2, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e56:	421a      	tst	r2, r3
     e58:	d002      	beq.n	e60 <spi_write_buffer_wait+0xb0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e5a:	05ff      	lsls	r7, r7, #23
     e5c:	0dff      	lsrs	r7, r7, #23
     e5e:	62b7      	str	r7, [r6, #40]	; 0x28
     e60:	1e6a      	subs	r2, r5, #1
     e62:	b296      	uxth	r6, r2
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     e64:	79e2      	ldrb	r2, [r4, #7]
     e66:	2a00      	cmp	r2, #0
     e68:	d101      	bne.n	e6e <spi_write_buffer_wait+0xbe>
     e6a:	1c35      	adds	r5, r6, #0
     e6c:	e056      	b.n	f1c <spi_write_buffer_wait+0x16c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     e6e:	7962      	ldrb	r2, [r4, #5]
     e70:	2a00      	cmp	r2, #0
     e72:	d137      	bne.n	ee4 <spi_write_buffer_wait+0x134>
     e74:	4a53      	ldr	r2, [pc, #332]	; (fc4 <spi_write_buffer_wait+0x214>)
     e76:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e78:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e7a:	7e37      	ldrb	r7, [r6, #24]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
     e7c:	421f      	tst	r7, r3
     e7e:	d01c      	beq.n	eba <spi_write_buffer_wait+0x10a>
						data_to_send = tx_data[tx_pos++];
     e80:	1c47      	adds	r7, r0, #1
     e82:	b2bf      	uxth	r7, r7
     e84:	46b9      	mov	r9, r7
     e86:	9901      	ldr	r1, [sp, #4]
     e88:	5c09      	ldrb	r1, [r1, r0]
     e8a:	4688      	mov	r8, r1
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e8c:	79a7      	ldrb	r7, [r4, #6]
     e8e:	2f01      	cmp	r7, #1
     e90:	d001      	beq.n	e96 <spi_write_buffer_wait+0xe6>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     e92:	4648      	mov	r0, r9
     e94:	e008      	b.n	ea8 <spi_write_buffer_wait+0xf8>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
     e96:	3002      	adds	r0, #2
     e98:	b280      	uxth	r0, r0
     e9a:	9901      	ldr	r1, [sp, #4]
     e9c:	464f      	mov	r7, r9
     e9e:	5dc9      	ldrb	r1, [r1, r7]
     ea0:	0209      	lsls	r1, r1, #8
     ea2:	4647      	mov	r7, r8
     ea4:	430f      	orrs	r7, r1
     ea6:	46b8      	mov	r8, r7
     ea8:	7e37      	ldrb	r7, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     eaa:	421f      	tst	r7, r3
     eac:	d003      	beq.n	eb6 <spi_write_buffer_wait+0x106>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     eae:	4647      	mov	r7, r8
     eb0:	05f9      	lsls	r1, r7, #23
     eb2:	0dcf      	lsrs	r7, r1, #23
     eb4:	62b7      	str	r7, [r6, #40]	; 0x28
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
     eb6:	3d01      	subs	r5, #1
     eb8:	b2ad      	uxth	r5, r5
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     eba:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ebc:	7e37      	ldrb	r7, [r6, #24]
					}
					if (spi_is_ready_to_read(module)) {
     ebe:	4659      	mov	r1, fp
     ec0:	420f      	tst	r7, r1
     ec2:	d102      	bne.n	eca <spi_write_buffer_wait+0x11a>
     ec4:	3a01      	subs	r2, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ec6:	2a00      	cmp	r2, #0
     ec8:	d1d6      	bne.n	e78 <spi_write_buffer_wait+0xc8>
     eca:	9901      	ldr	r1, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ecc:	7e32      	ldrb	r2, [r6, #24]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
     ece:	4667      	mov	r7, ip
     ed0:	423a      	tst	r2, r7
     ed2:	d003      	beq.n	edc <spi_write_buffer_wait+0x12c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ed4:	2302      	movs	r3, #2
     ed6:	7633      	strb	r3, [r6, #24]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
     ed8:	2004      	movs	r0, #4
     eda:	e06a      	b.n	fb2 <spi_write_buffer_wait+0x202>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     edc:	7e32      	ldrb	r2, [r6, #24]
				}

				if (!spi_is_ready_to_read(module)) {
     ede:	465e      	mov	r6, fp
     ee0:	4232      	tst	r2, r6
     ee2:	d05b      	beq.n	f9c <spi_write_buffer_wait+0x1ec>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ee4:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ee6:	7e32      	ldrb	r2, [r6, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     ee8:	465f      	mov	r7, fp
     eea:	423a      	tst	r2, r7
     eec:	d0fb      	beq.n	ee6 <spi_write_buffer_wait+0x136>
     eee:	7e32      	ldrb	r2, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ef0:	423a      	tst	r2, r7
     ef2:	d00d      	beq.n	f10 <spi_write_buffer_wait+0x160>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ef4:	8b72      	ldrh	r2, [r6, #26]
     ef6:	423a      	tst	r2, r7
     ef8:	d004      	beq.n	f04 <spi_write_buffer_wait+0x154>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     efa:	8b72      	ldrh	r2, [r6, #26]
     efc:	2704      	movs	r7, #4
     efe:	433a      	orrs	r2, r7
     f00:	b292      	uxth	r2, r2
     f02:	8372      	strh	r2, [r6, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f04:	79a2      	ldrb	r2, [r4, #6]
     f06:	2a01      	cmp	r2, #1
     f08:	d101      	bne.n	f0e <spi_write_buffer_wait+0x15e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f0a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     f0c:	e000      	b.n	f10 <spi_write_buffer_wait+0x160>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f0e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f10:	4652      	mov	r2, sl
     f12:	3a01      	subs	r2, #1
     f14:	b292      	uxth	r2, r2
     f16:	4692      	mov	sl, r2
     f18:	3d01      	subs	r5, #1
     f1a:	b2ad      	uxth	r5, r5

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     f1c:	4a2a      	ldr	r2, [pc, #168]	; (fc8 <spi_write_buffer_wait+0x218>)
     f1e:	4295      	cmp	r5, r2
     f20:	d000      	beq.n	f24 <spi_write_buffer_wait+0x174>
     f22:	e769      	b.n	df8 <spi_write_buffer_wait+0x48>
     f24:	4651      	mov	r1, sl
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     f26:	7963      	ldrb	r3, [r4, #5]
     f28:	2b01      	cmp	r3, #1
     f2a:	d105      	bne.n	f38 <spi_write_buffer_wait+0x188>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f2c:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f2e:	2202      	movs	r2, #2
     f30:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     f32:	4213      	tst	r3, r2
     f34:	d0fc      	beq.n	f30 <spi_write_buffer_wait+0x180>
     f36:	e033      	b.n	fa0 <spi_write_buffer_wait+0x1f0>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     f38:	2b00      	cmp	r3, #0
     f3a:	d133      	bne.n	fa4 <spi_write_buffer_wait+0x1f4>
		if (module->receiver_enabled) {
     f3c:	79e3      	ldrb	r3, [r4, #7]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     f3e:	2000      	movs	r0, #0
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
     f40:	2b00      	cmp	r3, #0
     f42:	d036      	beq.n	fb2 <spi_write_buffer_wait+0x202>
			while (flush_length) {
     f44:	2900      	cmp	r1, #0
     f46:	d02f      	beq.n	fa8 <spi_write_buffer_wait+0x1f8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f48:	2504      	movs	r5, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     f4a:	4e1d      	ldr	r6, [pc, #116]	; (fc0 <spi_write_buffer_wait+0x210>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f4c:	2704      	movs	r7, #4
     f4e:	4650      	mov	r0, sl
     f50:	e01c      	b.n	f8c <spi_write_buffer_wait+0x1dc>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f52:	7e0a      	ldrb	r2, [r1, #24]
     f54:	422a      	tst	r2, r5
     f56:	d102      	bne.n	f5e <spi_write_buffer_wait+0x1ae>
     f58:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f5a:	2b00      	cmp	r3, #0
     f5c:	d1f9      	bne.n	f52 <spi_write_buffer_wait+0x1a2>
     f5e:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
     f60:	422b      	tst	r3, r5
     f62:	d023      	beq.n	fac <spi_write_buffer_wait+0x1fc>
     f64:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     f66:	422b      	tst	r3, r5
     f68:	d00c      	beq.n	f84 <spi_write_buffer_wait+0x1d4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f6a:	8b4b      	ldrh	r3, [r1, #26]
     f6c:	422b      	tst	r3, r5
     f6e:	d003      	beq.n	f78 <spi_write_buffer_wait+0x1c8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f70:	8b4b      	ldrh	r3, [r1, #26]
     f72:	433b      	orrs	r3, r7
     f74:	b29b      	uxth	r3, r3
     f76:	834b      	strh	r3, [r1, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f78:	79a3      	ldrb	r3, [r4, #6]
     f7a:	2b01      	cmp	r3, #1
     f7c:	d101      	bne.n	f82 <spi_write_buffer_wait+0x1d2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f7e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     f80:	e000      	b.n	f84 <spi_write_buffer_wait+0x1d4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f82:	6a8b      	ldr	r3, [r1, #40]	; 0x28
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
     f84:	3801      	subs	r0, #1
     f86:	b280      	uxth	r0, r0
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
     f88:	2800      	cmp	r0, #0
     f8a:	d011      	beq.n	fb0 <spi_write_buffer_wait+0x200>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f8c:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f8e:	7e0b      	ldrb	r3, [r1, #24]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     f90:	422b      	tst	r3, r5
     f92:	d1e4      	bne.n	f5e <spi_write_buffer_wait+0x1ae>
     f94:	1c33      	adds	r3, r6, #0
     f96:	e7dc      	b.n	f52 <spi_write_buffer_wait+0x1a2>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     f98:	2012      	movs	r0, #18
     f9a:	e00a      	b.n	fb2 <spi_write_buffer_wait+0x202>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     f9c:	2012      	movs	r0, #18
     f9e:	e008      	b.n	fb2 <spi_write_buffer_wait+0x202>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     fa0:	2000      	movs	r0, #0
     fa2:	e006      	b.n	fb2 <spi_write_buffer_wait+0x202>
     fa4:	2000      	movs	r0, #0
     fa6:	e004      	b.n	fb2 <spi_write_buffer_wait+0x202>
     fa8:	2000      	movs	r0, #0
     faa:	e002      	b.n	fb2 <spi_write_buffer_wait+0x202>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     fac:	2012      	movs	r0, #18
     fae:	e000      	b.n	fb2 <spi_write_buffer_wait+0x202>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     fb0:	2000      	movs	r0, #0
}
     fb2:	b003      	add	sp, #12
     fb4:	bc3c      	pop	{r2, r3, r4, r5}
     fb6:	4690      	mov	r8, r2
     fb8:	4699      	mov	r9, r3
     fba:	46a2      	mov	sl, r4
     fbc:	46ab      	mov	fp, r5
     fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fc0:	00002710 	.word	0x00002710
     fc4:	00002711 	.word	0x00002711
     fc8:	0000ffff 	.word	0x0000ffff

00000fcc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     fce:	0080      	lsls	r0, r0, #2
     fd0:	4b7a      	ldr	r3, [pc, #488]	; (11bc <_spi_interrupt_handler+0x1f0>)
     fd2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     fd4:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     fd6:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     fd8:	5ce3      	ldrb	r3, [r4, r3]
     fda:	2237      	movs	r2, #55	; 0x37
     fdc:	5ca7      	ldrb	r7, [r4, r2]
     fde:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     fe0:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     fe2:	7dae      	ldrb	r6, [r5, #22]
     fe4:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     fe6:	07f1      	lsls	r1, r6, #31
     fe8:	d541      	bpl.n	106e <_spi_interrupt_handler+0xa2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     fea:	7963      	ldrb	r3, [r4, #5]
     fec:	2b01      	cmp	r3, #1
     fee:	d116      	bne.n	101e <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
     ff0:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     ff2:	2b00      	cmp	r3, #0
     ff4:	d10f      	bne.n	1016 <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     ff6:	4b72      	ldr	r3, [pc, #456]	; (11c0 <_spi_interrupt_handler+0x1f4>)
     ff8:	881b      	ldrh	r3, [r3, #0]
     ffa:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     ffc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     ffe:	3b01      	subs	r3, #1
    1000:	b29b      	uxth	r3, r3
    1002:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    1004:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1006:	b29b      	uxth	r3, r3
    1008:	2b00      	cmp	r3, #0
    100a:	d101      	bne.n	1010 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    100c:	2301      	movs	r3, #1
    100e:	752b      	strb	r3, [r5, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1010:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    1012:	2b01      	cmp	r3, #1
    1014:	d103      	bne.n	101e <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    1016:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1018:	2b00      	cmp	r3, #0
    101a:	d105      	bne.n	1028 <_spi_interrupt_handler+0x5c>
    101c:	e027      	b.n	106e <_spi_interrupt_handler+0xa2>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    101e:	2b00      	cmp	r3, #0
    1020:	d125      	bne.n	106e <_spi_interrupt_handler+0xa2>
			(module->dir != SPI_DIRECTION_READ))
    1022:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1024:	2b00      	cmp	r3, #0
    1026:	d022      	beq.n	106e <_spi_interrupt_handler+0xa2>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1028:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    102a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    102c:	7819      	ldrb	r1, [r3, #0]
    102e:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1030:	1c58      	adds	r0, r3, #1
    1032:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1034:	79a0      	ldrb	r0, [r4, #6]
    1036:	2801      	cmp	r0, #1
    1038:	d104      	bne.n	1044 <_spi_interrupt_handler+0x78>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    103a:	7858      	ldrb	r0, [r3, #1]
    103c:	0200      	lsls	r0, r0, #8
    103e:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1040:	3302      	adds	r3, #2
    1042:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1044:	05cb      	lsls	r3, r1, #23
    1046:	0ddb      	lsrs	r3, r3, #23
    1048:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    104a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    104c:	3b01      	subs	r3, #1
    104e:	b29b      	uxth	r3, r3
    1050:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1052:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1054:	b29b      	uxth	r3, r3
    1056:	2b00      	cmp	r3, #0
    1058:	d109      	bne.n	106e <_spi_interrupt_handler+0xa2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    105a:	2301      	movs	r3, #1
    105c:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    105e:	7a63      	ldrb	r3, [r4, #9]
    1060:	2b01      	cmp	r3, #1
    1062:	d104      	bne.n	106e <_spi_interrupt_handler+0xa2>
    1064:	79e3      	ldrb	r3, [r4, #7]
    1066:	2b00      	cmp	r3, #0
    1068:	d101      	bne.n	106e <_spi_interrupt_handler+0xa2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    106a:	2302      	movs	r3, #2
    106c:	75ab      	strb	r3, [r5, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    106e:	0772      	lsls	r2, r6, #29
    1070:	d561      	bpl.n	1136 <_spi_interrupt_handler+0x16a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1072:	8b6b      	ldrh	r3, [r5, #26]
    1074:	0759      	lsls	r1, r3, #29
    1076:	d514      	bpl.n	10a2 <_spi_interrupt_handler+0xd6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1078:	7a63      	ldrb	r3, [r4, #9]
    107a:	2b01      	cmp	r3, #1
    107c:	d00b      	beq.n	1096 <_spi_interrupt_handler+0xca>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    107e:	221e      	movs	r2, #30
    1080:	2338      	movs	r3, #56	; 0x38
    1082:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1084:	2303      	movs	r3, #3
    1086:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1088:	2305      	movs	r3, #5
    108a:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    108c:	073a      	lsls	r2, r7, #28
    108e:	d502      	bpl.n	1096 <_spi_interrupt_handler+0xca>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1090:	1c20      	adds	r0, r4, #0
    1092:	69a3      	ldr	r3, [r4, #24]
    1094:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1096:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1098:	8b6a      	ldrh	r2, [r5, #26]
    109a:	2304      	movs	r3, #4
    109c:	4313      	orrs	r3, r2
    109e:	836b      	strh	r3, [r5, #26]
    10a0:	e049      	b.n	1136 <_spi_interrupt_handler+0x16a>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    10a2:	7a63      	ldrb	r3, [r4, #9]
    10a4:	2b01      	cmp	r3, #1
    10a6:	d116      	bne.n	10d6 <_spi_interrupt_handler+0x10a>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10a8:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    10aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    10ae:	3b01      	subs	r3, #1
    10b0:	b29b      	uxth	r3, r3
    10b2:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    10b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    10b6:	b29b      	uxth	r3, r3
    10b8:	2b00      	cmp	r3, #0
    10ba:	d13c      	bne.n	1136 <_spi_interrupt_handler+0x16a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    10bc:	2304      	movs	r3, #4
    10be:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
    10c0:	2200      	movs	r2, #0
    10c2:	2338      	movs	r3, #56	; 0x38
    10c4:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    10c6:	2303      	movs	r3, #3
    10c8:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    10ca:	07f9      	lsls	r1, r7, #31
    10cc:	d533      	bpl.n	1136 <_spi_interrupt_handler+0x16a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    10ce:	1c20      	adds	r0, r4, #0
    10d0:	68e2      	ldr	r2, [r4, #12]
    10d2:	4790      	blx	r2
    10d4:	e02f      	b.n	1136 <_spi_interrupt_handler+0x16a>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10d6:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    10da:	05d2      	lsls	r2, r2, #23
    10dc:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    10de:	b2d3      	uxtb	r3, r2
    10e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    10e2:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    10e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10e6:	1c59      	adds	r1, r3, #1
    10e8:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10ea:	79a1      	ldrb	r1, [r4, #6]
    10ec:	2901      	cmp	r1, #1
    10ee:	d104      	bne.n	10fa <_spi_interrupt_handler+0x12e>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    10f0:	0a12      	lsrs	r2, r2, #8
    10f2:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    10f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10f6:	3301      	adds	r3, #1
    10f8:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    10fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    10fc:	3b01      	subs	r3, #1
    10fe:	b29b      	uxth	r3, r3
    1100:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1102:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1104:	b29b      	uxth	r3, r3
    1106:	2b00      	cmp	r3, #0
    1108:	d115      	bne.n	1136 <_spi_interrupt_handler+0x16a>
					module->status = STATUS_OK;
    110a:	2200      	movs	r2, #0
    110c:	2338      	movs	r3, #56	; 0x38
    110e:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1110:	2304      	movs	r3, #4
    1112:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1114:	7a63      	ldrb	r3, [r4, #9]
    1116:	2b02      	cmp	r3, #2
    1118:	d105      	bne.n	1126 <_spi_interrupt_handler+0x15a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    111a:	077a      	lsls	r2, r7, #29
    111c:	d50b      	bpl.n	1136 <_spi_interrupt_handler+0x16a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    111e:	1c20      	adds	r0, r4, #0
    1120:	6963      	ldr	r3, [r4, #20]
    1122:	4798      	blx	r3
    1124:	e007      	b.n	1136 <_spi_interrupt_handler+0x16a>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1126:	7a63      	ldrb	r3, [r4, #9]
    1128:	2b00      	cmp	r3, #0
    112a:	d104      	bne.n	1136 <_spi_interrupt_handler+0x16a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    112c:	07b9      	lsls	r1, r7, #30
    112e:	d502      	bpl.n	1136 <_spi_interrupt_handler+0x16a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1130:	1c20      	adds	r0, r4, #0
    1132:	6922      	ldr	r2, [r4, #16]
    1134:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1136:	07b3      	lsls	r3, r6, #30
    1138:	d528      	bpl.n	118c <_spi_interrupt_handler+0x1c0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    113a:	7963      	ldrb	r3, [r4, #5]
    113c:	2b00      	cmp	r3, #0
    113e:	d110      	bne.n	1162 <_spi_interrupt_handler+0x196>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1140:	2307      	movs	r3, #7
    1142:	752b      	strb	r3, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1144:	2302      	movs	r3, #2
    1146:	762b      	strb	r3, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1148:	2303      	movs	r3, #3
    114a:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    114c:	2300      	movs	r3, #0
    114e:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1150:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1152:	2338      	movs	r3, #56	; 0x38
    1154:	2200      	movs	r2, #0
    1156:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1158:	06f9      	lsls	r1, r7, #27
    115a:	d502      	bpl.n	1162 <_spi_interrupt_handler+0x196>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
    115c:	1c20      	adds	r0, r4, #0
    115e:	69e2      	ldr	r2, [r4, #28]
    1160:	4790      	blx	r2
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1162:	7963      	ldrb	r3, [r4, #5]
    1164:	2b01      	cmp	r3, #1
    1166:	d111      	bne.n	118c <_spi_interrupt_handler+0x1c0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1168:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    116a:	2b01      	cmp	r3, #1
    116c:	d10e      	bne.n	118c <_spi_interrupt_handler+0x1c0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    116e:	79e3      	ldrb	r3, [r4, #7]
    1170:	2b00      	cmp	r3, #0
    1172:	d10b      	bne.n	118c <_spi_interrupt_handler+0x1c0>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1174:	2302      	movs	r3, #2
    1176:	752b      	strb	r3, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1178:	2303      	movs	r3, #3
    117a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    117c:	2200      	movs	r2, #0
    117e:	2338      	movs	r3, #56	; 0x38
    1180:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1182:	07fb      	lsls	r3, r7, #31
    1184:	d502      	bpl.n	118c <_spi_interrupt_handler+0x1c0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
						(module);
    1186:	1c20      	adds	r0, r4, #0
    1188:	68e1      	ldr	r1, [r4, #12]
    118a:	4788      	blx	r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    118c:	0732      	lsls	r2, r6, #28
    118e:	d50a      	bpl.n	11a6 <_spi_interrupt_handler+0x1da>
			if (module->mode == SPI_MODE_SLAVE) {
    1190:	7963      	ldrb	r3, [r4, #5]
    1192:	2b00      	cmp	r3, #0
    1194:	d107      	bne.n	11a6 <_spi_interrupt_handler+0x1da>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1196:	2308      	movs	r3, #8
    1198:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    119a:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    119c:	06bb      	lsls	r3, r7, #26
    119e:	d502      	bpl.n	11a6 <_spi_interrupt_handler+0x1da>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    11a0:	1c20      	adds	r0, r4, #0
    11a2:	6a21      	ldr	r1, [r4, #32]
    11a4:	4788      	blx	r1
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    11a6:	09f6      	lsrs	r6, r6, #7
    11a8:	d007      	beq.n	11ba <_spi_interrupt_handler+0x1ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    11aa:	2380      	movs	r3, #128	; 0x80
    11ac:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    11ae:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    11b0:	067a      	lsls	r2, r7, #25
    11b2:	d502      	bpl.n	11ba <_spi_interrupt_handler+0x1ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    11b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    11b6:	1c20      	adds	r0, r4, #0
    11b8:	4798      	blx	r3
		}
	}
#  endif
}
    11ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11bc:	20000114 	.word	0x20000114
    11c0:	20000110 	.word	0x20000110

000011c4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11c4:	4770      	bx	lr
    11c6:	46c0      	nop			; (mov r8, r8)

000011c8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11c8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    11ca:	4b0b      	ldr	r3, [pc, #44]	; (11f8 <_sercom_set_handler+0x30>)
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d10e      	bne.n	11f0 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11d2:	4c0a      	ldr	r4, [pc, #40]	; (11fc <_sercom_set_handler+0x34>)
    11d4:	4d0a      	ldr	r5, [pc, #40]	; (1200 <_sercom_set_handler+0x38>)
    11d6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    11d8:	4b0a      	ldr	r3, [pc, #40]	; (1204 <_sercom_set_handler+0x3c>)
    11da:	2200      	movs	r2, #0
    11dc:	601a      	str	r2, [r3, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11de:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    11e0:	605a      	str	r2, [r3, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11e2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    11e4:	609a      	str	r2, [r3, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11e6:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    11e8:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    11ea:	2201      	movs	r2, #1
    11ec:	4b02      	ldr	r3, [pc, #8]	; (11f8 <_sercom_set_handler+0x30>)
    11ee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11f0:	0080      	lsls	r0, r0, #2
    11f2:	4b02      	ldr	r3, [pc, #8]	; (11fc <_sercom_set_handler+0x34>)
    11f4:	50c1      	str	r1, [r0, r3]
}
    11f6:	bd30      	pop	{r4, r5, pc}
    11f8:	200000c8 	.word	0x200000c8
    11fc:	200000cc 	.word	0x200000cc
    1200:	000011c5 	.word	0x000011c5
    1204:	20000114 	.word	0x20000114

00001208 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1208:	b530      	push	{r4, r5, lr}
    120a:	b083      	sub	sp, #12
    120c:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    120e:	ac01      	add	r4, sp, #4
    1210:	1c20      	adds	r0, r4, #0
    1212:	4905      	ldr	r1, [pc, #20]	; (1228 <_sercom_get_interrupt_vector+0x20>)
    1214:	2204      	movs	r2, #4
    1216:	4b05      	ldr	r3, [pc, #20]	; (122c <_sercom_get_interrupt_vector+0x24>)
    1218:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    121a:	1c28      	adds	r0, r5, #0
    121c:	4b04      	ldr	r3, [pc, #16]	; (1230 <_sercom_get_interrupt_vector+0x28>)
    121e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1220:	5620      	ldrsb	r0, [r4, r0]
}
    1222:	b003      	add	sp, #12
    1224:	bd30      	pop	{r4, r5, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00006e84 	.word	0x00006e84
    122c:	0000237d 	.word	0x0000237d
    1230:	00000a69 	.word	0x00000a69

00001234 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1234:	b508      	push	{r3, lr}
    1236:	4b02      	ldr	r3, [pc, #8]	; (1240 <SERCOM0_Handler+0xc>)
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	2000      	movs	r0, #0
    123c:	4798      	blx	r3
    123e:	bd08      	pop	{r3, pc}
    1240:	200000cc 	.word	0x200000cc

00001244 <SERCOM1_Handler>:
    1244:	b508      	push	{r3, lr}
    1246:	4b02      	ldr	r3, [pc, #8]	; (1250 <SERCOM1_Handler+0xc>)
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	2001      	movs	r0, #1
    124c:	4798      	blx	r3
    124e:	bd08      	pop	{r3, pc}
    1250:	200000cc 	.word	0x200000cc

00001254 <SERCOM2_Handler>:
    1254:	b508      	push	{r3, lr}
    1256:	4b02      	ldr	r3, [pc, #8]	; (1260 <SERCOM2_Handler+0xc>)
    1258:	689b      	ldr	r3, [r3, #8]
    125a:	2002      	movs	r0, #2
    125c:	4798      	blx	r3
    125e:	bd08      	pop	{r3, pc}
    1260:	200000cc 	.word	0x200000cc

00001264 <SERCOM3_Handler>:
    1264:	b508      	push	{r3, lr}
    1266:	4b02      	ldr	r3, [pc, #8]	; (1270 <SERCOM3_Handler+0xc>)
    1268:	68db      	ldr	r3, [r3, #12]
    126a:	2003      	movs	r0, #3
    126c:	4798      	blx	r3
    126e:	bd08      	pop	{r3, pc}
    1270:	200000cc 	.word	0x200000cc

00001274 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1274:	4770      	bx	lr
    1276:	46c0      	nop			; (mov r8, r8)

00001278 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1278:	4b0c      	ldr	r3, [pc, #48]	; (12ac <cpu_irq_enter_critical+0x34>)
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	2b00      	cmp	r3, #0
    127e:	d110      	bne.n	12a2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1280:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1284:	2b00      	cmp	r3, #0
    1286:	d109      	bne.n	129c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1288:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    128a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    128e:	2200      	movs	r2, #0
    1290:	4b07      	ldr	r3, [pc, #28]	; (12b0 <cpu_irq_enter_critical+0x38>)
    1292:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1294:	2201      	movs	r2, #1
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <cpu_irq_enter_critical+0x3c>)
    1298:	701a      	strb	r2, [r3, #0]
    129a:	e002      	b.n	12a2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    129c:	2200      	movs	r2, #0
    129e:	4b05      	ldr	r3, [pc, #20]	; (12b4 <cpu_irq_enter_critical+0x3c>)
    12a0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    12a2:	4b02      	ldr	r3, [pc, #8]	; (12ac <cpu_irq_enter_critical+0x34>)
    12a4:	681a      	ldr	r2, [r3, #0]
    12a6:	3201      	adds	r2, #1
    12a8:	601a      	str	r2, [r3, #0]
}
    12aa:	4770      	bx	lr
    12ac:	200000dc 	.word	0x200000dc
    12b0:	20000008 	.word	0x20000008
    12b4:	200000e0 	.word	0x200000e0

000012b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    12b8:	4b08      	ldr	r3, [pc, #32]	; (12dc <cpu_irq_leave_critical+0x24>)
    12ba:	681a      	ldr	r2, [r3, #0]
    12bc:	3a01      	subs	r2, #1
    12be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d109      	bne.n	12da <cpu_irq_leave_critical+0x22>
    12c6:	4b06      	ldr	r3, [pc, #24]	; (12e0 <cpu_irq_leave_critical+0x28>)
    12c8:	781b      	ldrb	r3, [r3, #0]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d005      	beq.n	12da <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    12ce:	2201      	movs	r2, #1
    12d0:	4b04      	ldr	r3, [pc, #16]	; (12e4 <cpu_irq_leave_critical+0x2c>)
    12d2:	701a      	strb	r2, [r3, #0]
    12d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    12d8:	b662      	cpsie	i
	}
}
    12da:	4770      	bx	lr
    12dc:	200000dc 	.word	0x200000dc
    12e0:	200000e0 	.word	0x200000e0
    12e4:	20000008 	.word	0x20000008

000012e8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ea:	465f      	mov	r7, fp
    12ec:	4656      	mov	r6, sl
    12ee:	464d      	mov	r5, r9
    12f0:	4644      	mov	r4, r8
    12f2:	b4f0      	push	{r4, r5, r6, r7}
    12f4:	b093      	sub	sp, #76	; 0x4c
    12f6:	1c05      	adds	r5, r0, #0
    12f8:	1c0c      	adds	r4, r1, #0
    12fa:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    12fc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12fe:	1c08      	adds	r0, r1, #0
    1300:	4ba9      	ldr	r3, [pc, #676]	; (15a8 <usart_init+0x2c0>)
    1302:	4798      	blx	r3
    1304:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1306:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1308:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    130a:	07d9      	lsls	r1, r3, #31
    130c:	d500      	bpl.n	1310 <usart_init+0x28>
    130e:	e143      	b.n	1598 <usart_init+0x2b0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1310:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1312:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1314:	079f      	lsls	r7, r3, #30
    1316:	d500      	bpl.n	131a <usart_init+0x32>
    1318:	e13e      	b.n	1598 <usart_init+0x2b0>
    131a:	4ba4      	ldr	r3, [pc, #656]	; (15ac <usart_init+0x2c4>)
    131c:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    131e:	1c91      	adds	r1, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1320:	2701      	movs	r7, #1
    1322:	408f      	lsls	r7, r1
    1324:	1c39      	adds	r1, r7, #0
    1326:	4301      	orrs	r1, r0
    1328:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    132a:	a911      	add	r1, sp, #68	; 0x44
    132c:	272d      	movs	r7, #45	; 0x2d
    132e:	5df3      	ldrb	r3, [r6, r7]
    1330:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1332:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1334:	b2d2      	uxtb	r2, r2
    1336:	4690      	mov	r8, r2
    1338:	1c10      	adds	r0, r2, #0
    133a:	4b9d      	ldr	r3, [pc, #628]	; (15b0 <usart_init+0x2c8>)
    133c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    133e:	4640      	mov	r0, r8
    1340:	4b9c      	ldr	r3, [pc, #624]	; (15b4 <usart_init+0x2cc>)
    1342:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1344:	5df0      	ldrb	r0, [r6, r7]
    1346:	2100      	movs	r1, #0
    1348:	4b9b      	ldr	r3, [pc, #620]	; (15b8 <usart_init+0x2d0>)
    134a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    134c:	7af3      	ldrb	r3, [r6, #11]
    134e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1350:	2324      	movs	r3, #36	; 0x24
    1352:	5cf3      	ldrb	r3, [r6, r3]
    1354:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1356:	2325      	movs	r3, #37	; 0x25
    1358:	5cf3      	ldrb	r3, [r6, r3]
    135a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    135c:	7ef3      	ldrb	r3, [r6, #27]
    135e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1360:	7f33      	ldrb	r3, [r6, #28]
    1362:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1364:	6829      	ldr	r1, [r5, #0]
    1366:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1368:	1c08      	adds	r0, r1, #0
    136a:	4b8f      	ldr	r3, [pc, #572]	; (15a8 <usart_init+0x2c0>)
    136c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    136e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1370:	2200      	movs	r2, #0
    1372:	466b      	mov	r3, sp
    1374:	85da      	strh	r2, [r3, #46]	; 0x2e

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1376:	8a32      	ldrh	r2, [r6, #16]
    1378:	9203      	str	r2, [sp, #12]
    137a:	2380      	movs	r3, #128	; 0x80
    137c:	01db      	lsls	r3, r3, #7
    137e:	429a      	cmp	r2, r3
    1380:	d021      	beq.n	13c6 <usart_init+0xde>
    1382:	2380      	movs	r3, #128	; 0x80
    1384:	01db      	lsls	r3, r3, #7
    1386:	429a      	cmp	r2, r3
    1388:	d804      	bhi.n	1394 <usart_init+0xac>
    138a:	2380      	movs	r3, #128	; 0x80
    138c:	019b      	lsls	r3, r3, #6
    138e:	429a      	cmp	r2, r3
    1390:	d011      	beq.n	13b6 <usart_init+0xce>
    1392:	e008      	b.n	13a6 <usart_init+0xbe>
    1394:	23c0      	movs	r3, #192	; 0xc0
    1396:	01db      	lsls	r3, r3, #7
    1398:	9f03      	ldr	r7, [sp, #12]
    139a:	429f      	cmp	r7, r3
    139c:	d00f      	beq.n	13be <usart_init+0xd6>
    139e:	2380      	movs	r3, #128	; 0x80
    13a0:	021b      	lsls	r3, r3, #8
    13a2:	429f      	cmp	r7, r3
    13a4:	d003      	beq.n	13ae <usart_init+0xc6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13a6:	2710      	movs	r7, #16
    13a8:	9708      	str	r7, [sp, #32]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13aa:	2700      	movs	r7, #0
    13ac:	e00e      	b.n	13cc <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    13ae:	2703      	movs	r7, #3
    13b0:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13b2:	2700      	movs	r7, #0
    13b4:	e00a      	b.n	13cc <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13b6:	2710      	movs	r7, #16
    13b8:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13ba:	2701      	movs	r7, #1
    13bc:	e006      	b.n	13cc <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13be:	2708      	movs	r7, #8
    13c0:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13c2:	2701      	movs	r7, #1
    13c4:	e002      	b.n	13cc <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13c6:	2708      	movs	r7, #8
    13c8:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13ca:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    13cc:	6831      	ldr	r1, [r6, #0]
    13ce:	9104      	str	r1, [sp, #16]
		(uint32_t)config->mux_setting |
    13d0:	68f2      	ldr	r2, [r6, #12]
    13d2:	9205      	str	r2, [sp, #20]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    13d4:	6973      	ldr	r3, [r6, #20]
    13d6:	9306      	str	r3, [sp, #24]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13d8:	7e31      	ldrb	r1, [r6, #24]
    13da:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13dc:	2326      	movs	r3, #38	; 0x26
    13de:	5cf3      	ldrb	r3, [r6, r3]
    13e0:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    13e2:	6872      	ldr	r2, [r6, #4]
    13e4:	4691      	mov	r9, r2
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    13e6:	2a00      	cmp	r2, #0
    13e8:	d013      	beq.n	1412 <usart_init+0x12a>
    13ea:	2380      	movs	r3, #128	; 0x80
    13ec:	055b      	lsls	r3, r3, #21
    13ee:	429a      	cmp	r2, r3
    13f0:	d12e      	bne.n	1450 <usart_init+0x168>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    13f2:	2327      	movs	r3, #39	; 0x27
    13f4:	5cf3      	ldrb	r3, [r6, r3]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d12e      	bne.n	1458 <usart_init+0x170>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    13fa:	6a37      	ldr	r7, [r6, #32]
    13fc:	b2c0      	uxtb	r0, r0
    13fe:	4b6f      	ldr	r3, [pc, #444]	; (15bc <usart_init+0x2d4>)
    1400:	4798      	blx	r3
    1402:	1c01      	adds	r1, r0, #0
    1404:	1c38      	adds	r0, r7, #0
    1406:	466a      	mov	r2, sp
    1408:	322e      	adds	r2, #46	; 0x2e
    140a:	4b6d      	ldr	r3, [pc, #436]	; (15c0 <usart_init+0x2d8>)
    140c:	4798      	blx	r3
    140e:	1c03      	adds	r3, r0, #0
    1410:	e01f      	b.n	1452 <usart_init+0x16a>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1412:	2327      	movs	r3, #39	; 0x27
    1414:	5cf3      	ldrb	r3, [r6, r3]
    1416:	2b00      	cmp	r3, #0
    1418:	d00a      	beq.n	1430 <usart_init+0x148>
				status_code =
    141a:	9908      	ldr	r1, [sp, #32]
    141c:	9100      	str	r1, [sp, #0]
    141e:	6a30      	ldr	r0, [r6, #32]
    1420:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1422:	466a      	mov	r2, sp
    1424:	322e      	adds	r2, #46	; 0x2e
    1426:	1c3b      	adds	r3, r7, #0
    1428:	4f66      	ldr	r7, [pc, #408]	; (15c4 <usart_init+0x2dc>)
    142a:	47b8      	blx	r7
    142c:	1c03      	adds	r3, r0, #0
    142e:	e010      	b.n	1452 <usart_init+0x16a>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1430:	6a31      	ldr	r1, [r6, #32]
    1432:	9109      	str	r1, [sp, #36]	; 0x24
    1434:	b2c0      	uxtb	r0, r0
    1436:	4b61      	ldr	r3, [pc, #388]	; (15bc <usart_init+0x2d4>)
    1438:	4798      	blx	r3
    143a:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    143c:	9a08      	ldr	r2, [sp, #32]
    143e:	9200      	str	r2, [sp, #0]
    1440:	9809      	ldr	r0, [sp, #36]	; 0x24
    1442:	466a      	mov	r2, sp
    1444:	322e      	adds	r2, #46	; 0x2e
    1446:	1c3b      	adds	r3, r7, #0
    1448:	4f5e      	ldr	r7, [pc, #376]	; (15c4 <usart_init+0x2dc>)
    144a:	47b8      	blx	r7
    144c:	1c03      	adds	r3, r0, #0
    144e:	e000      	b.n	1452 <usart_init+0x16a>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1450:	2300      	movs	r3, #0
    1452:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1454:	d000      	beq.n	1458 <usart_init+0x170>
    1456:	e09f      	b.n	1598 <usart_init+0x2b0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1458:	7e73      	ldrb	r3, [r6, #25]
    145a:	2b00      	cmp	r3, #0
    145c:	d002      	beq.n	1464 <usart_init+0x17c>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    145e:	7eb3      	ldrb	r3, [r6, #26]
    1460:	4641      	mov	r1, r8
    1462:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1464:	682a      	ldr	r2, [r5, #0]
    1466:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1468:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    146a:	2b00      	cmp	r3, #0
    146c:	d1fc      	bne.n	1468 <usart_init+0x180>
    146e:	9703      	str	r7, [sp, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1470:	466b      	mov	r3, sp
    1472:	332e      	adds	r3, #46	; 0x2e
    1474:	881b      	ldrh	r3, [r3, #0]
    1476:	4642      	mov	r2, r8
    1478:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    147a:	9b05      	ldr	r3, [sp, #20]
    147c:	9f04      	ldr	r7, [sp, #16]
    147e:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    1480:	9f06      	ldr	r7, [sp, #24]
    1482:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1484:	4649      	mov	r1, r9
    1486:	430b      	orrs	r3, r1
		config->sample_rate |
    1488:	9f03      	ldr	r7, [sp, #12]
    148a:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    148c:	4652      	mov	r2, sl
    148e:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1490:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1492:	4659      	mov	r1, fp
    1494:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    1496:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1498:	2327      	movs	r3, #39	; 0x27
    149a:	5cf3      	ldrb	r3, [r6, r3]
    149c:	2b00      	cmp	r3, #0
    149e:	d101      	bne.n	14a4 <usart_init+0x1bc>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    14a0:	2304      	movs	r3, #4
    14a2:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14a4:	7f31      	ldrb	r1, [r6, #28]
    14a6:	0249      	lsls	r1, r1, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14a8:	7e73      	ldrb	r3, [r6, #25]
    14aa:	029b      	lsls	r3, r3, #10
    14ac:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14ae:	7f73      	ldrb	r3, [r6, #29]
    14b0:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14b2:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14b4:	2324      	movs	r3, #36	; 0x24
    14b6:	5cf3      	ldrb	r3, [r6, r3]
    14b8:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14ba:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14bc:	2325      	movs	r3, #37	; 0x25
    14be:	5cf3      	ldrb	r3, [r6, r3]
    14c0:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14c2:	4319      	orrs	r1, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    14c4:	7af3      	ldrb	r3, [r6, #11]
    14c6:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    14c8:	8933      	ldrh	r3, [r6, #8]
    14ca:	2bff      	cmp	r3, #255	; 0xff
    14cc:	d004      	beq.n	14d8 <usart_init+0x1f0>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14ce:	2280      	movs	r2, #128	; 0x80
    14d0:	0452      	lsls	r2, r2, #17
    14d2:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    14d4:	4319      	orrs	r1, r3
    14d6:	e005      	b.n	14e4 <usart_init+0x1fc>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    14d8:	7ef3      	ldrb	r3, [r6, #27]
    14da:	2b00      	cmp	r3, #0
    14dc:	d002      	beq.n	14e4 <usart_init+0x1fc>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	04db      	lsls	r3, r3, #19
    14e2:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    14e4:	232c      	movs	r3, #44	; 0x2c
    14e6:	5cf3      	ldrb	r3, [r6, r3]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d103      	bne.n	14f4 <usart_init+0x20c>
    14ec:	4b36      	ldr	r3, [pc, #216]	; (15c8 <usart_init+0x2e0>)
    14ee:	789b      	ldrb	r3, [r3, #2]
    14f0:	079a      	lsls	r2, r3, #30
    14f2:	d501      	bpl.n	14f8 <usart_init+0x210>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14f4:	2380      	movs	r3, #128	; 0x80
    14f6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14f8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14fa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    14fc:	2b00      	cmp	r3, #0
    14fe:	d1fc      	bne.n	14fa <usart_init+0x212>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1500:	4643      	mov	r3, r8
    1502:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1504:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1506:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1508:	2b00      	cmp	r3, #0
    150a:	d1fc      	bne.n	1506 <usart_init+0x21e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    150c:	4641      	mov	r1, r8
    150e:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1510:	ab10      	add	r3, sp, #64	; 0x40
    1512:	2280      	movs	r2, #128	; 0x80
    1514:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1516:	2200      	movs	r2, #0
    1518:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    151a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    151c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    151e:	6b32      	ldr	r2, [r6, #48]	; 0x30
    1520:	920c      	str	r2, [sp, #48]	; 0x30
    1522:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1524:	930d      	str	r3, [sp, #52]	; 0x34
    1526:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1528:	970e      	str	r7, [sp, #56]	; 0x38
    152a:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    152c:	960f      	str	r6, [sp, #60]	; 0x3c
    152e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1530:	ae10      	add	r6, sp, #64	; 0x40
    1532:	b2f9      	uxtb	r1, r7
    1534:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1536:	aa0c      	add	r2, sp, #48	; 0x30
    1538:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    153a:	2800      	cmp	r0, #0
    153c:	d102      	bne.n	1544 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    153e:	1c20      	adds	r0, r4, #0
    1540:	4a22      	ldr	r2, [pc, #136]	; (15cc <usart_init+0x2e4>)
    1542:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1544:	1c43      	adds	r3, r0, #1
    1546:	d005      	beq.n	1554 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1548:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    154a:	0c00      	lsrs	r0, r0, #16
    154c:	b2c0      	uxtb	r0, r0
    154e:	1c31      	adds	r1, r6, #0
    1550:	4a1f      	ldr	r2, [pc, #124]	; (15d0 <usart_init+0x2e8>)
    1552:	4790      	blx	r2
    1554:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1556:	2f04      	cmp	r7, #4
    1558:	d1eb      	bne.n	1532 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    155a:	2300      	movs	r3, #0
    155c:	60eb      	str	r3, [r5, #12]
    155e:	612b      	str	r3, [r5, #16]
    1560:	616b      	str	r3, [r5, #20]
    1562:	61ab      	str	r3, [r5, #24]
    1564:	61eb      	str	r3, [r5, #28]
    1566:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1568:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    156a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    156c:	2200      	movs	r2, #0
    156e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1570:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1572:	2330      	movs	r3, #48	; 0x30
    1574:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1576:	2331      	movs	r3, #49	; 0x31
    1578:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    157a:	2332      	movs	r3, #50	; 0x32
    157c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    157e:	2333      	movs	r3, #51	; 0x33
    1580:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1582:	6828      	ldr	r0, [r5, #0]
    1584:	4b08      	ldr	r3, [pc, #32]	; (15a8 <usart_init+0x2c0>)
    1586:	4798      	blx	r3
    1588:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    158a:	4912      	ldr	r1, [pc, #72]	; (15d4 <usart_init+0x2ec>)
    158c:	4b12      	ldr	r3, [pc, #72]	; (15d8 <usart_init+0x2f0>)
    158e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1590:	00a4      	lsls	r4, r4, #2
    1592:	4b12      	ldr	r3, [pc, #72]	; (15dc <usart_init+0x2f4>)
    1594:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1596:	2000      	movs	r0, #0
}
    1598:	b013      	add	sp, #76	; 0x4c
    159a:	bc3c      	pop	{r2, r3, r4, r5}
    159c:	4690      	mov	r8, r2
    159e:	4699      	mov	r9, r3
    15a0:	46a2      	mov	sl, r4
    15a2:	46ab      	mov	fp, r5
    15a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00000a69 	.word	0x00000a69
    15ac:	40000400 	.word	0x40000400
    15b0:	00001c61 	.word	0x00001c61
    15b4:	00001bd5 	.word	0x00001bd5
    15b8:	00000911 	.word	0x00000911
    15bc:	00001c7d 	.word	0x00001c7d
    15c0:	00000739 	.word	0x00000739
    15c4:	00000761 	.word	0x00000761
    15c8:	41002000 	.word	0x41002000
    15cc:	00000961 	.word	0x00000961
    15d0:	00001d3d 	.word	0x00001d3d
    15d4:	00001685 	.word	0x00001685
    15d8:	000011c9 	.word	0x000011c9
    15dc:	20000114 	.word	0x20000114

000015e0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    15e0:	b510      	push	{r4, lr}
    15e2:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15e4:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15e6:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    15e8:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15ea:	2c00      	cmp	r4, #0
    15ec:	d00d      	beq.n	160a <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15ee:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    15f0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15f2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15f4:	2a00      	cmp	r2, #0
    15f6:	d108      	bne.n	160a <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15f8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    15fa:	2a00      	cmp	r2, #0
    15fc:	d1fc      	bne.n	15f8 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    15fe:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1600:	2102      	movs	r1, #2
    1602:	7e1a      	ldrb	r2, [r3, #24]
    1604:	420a      	tst	r2, r1
    1606:	d0fc      	beq.n	1602 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1608:	2000      	movs	r0, #0
}
    160a:	bd10      	pop	{r4, pc}

0000160c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    160c:	b510      	push	{r4, lr}
    160e:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1610:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1612:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1614:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1616:	2a00      	cmp	r2, #0
    1618:	d033      	beq.n	1682 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    161a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    161c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    161e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1620:	2b00      	cmp	r3, #0
    1622:	d12e      	bne.n	1682 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1624:	7e23      	ldrb	r3, [r4, #24]
    1626:	075a      	lsls	r2, r3, #29
    1628:	d52b      	bpl.n	1682 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    162a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    162c:	2b00      	cmp	r3, #0
    162e:	d1fc      	bne.n	162a <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1630:	8b63      	ldrh	r3, [r4, #26]
    1632:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1634:	069a      	lsls	r2, r3, #26
    1636:	d021      	beq.n	167c <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1638:	079a      	lsls	r2, r3, #30
    163a:	d503      	bpl.n	1644 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    163c:	2302      	movs	r3, #2
    163e:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    1640:	201a      	movs	r0, #26
    1642:	e01e      	b.n	1682 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1644:	075a      	lsls	r2, r3, #29
    1646:	d503      	bpl.n	1650 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1648:	2304      	movs	r3, #4
    164a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    164c:	201e      	movs	r0, #30
    164e:	e018      	b.n	1682 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1650:	07da      	lsls	r2, r3, #31
    1652:	d503      	bpl.n	165c <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1654:	2301      	movs	r3, #1
    1656:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1658:	2013      	movs	r0, #19
    165a:	e012      	b.n	1682 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    165c:	06da      	lsls	r2, r3, #27
    165e:	d505      	bpl.n	166c <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1660:	8b62      	ldrh	r2, [r4, #26]
    1662:	2310      	movs	r3, #16
    1664:	4313      	orrs	r3, r2
    1666:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1668:	2042      	movs	r0, #66	; 0x42
    166a:	e00a      	b.n	1682 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    166c:	069a      	lsls	r2, r3, #26
    166e:	d505      	bpl.n	167c <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1670:	8b62      	ldrh	r2, [r4, #26]
    1672:	2320      	movs	r3, #32
    1674:	4313      	orrs	r3, r2
    1676:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1678:	2041      	movs	r0, #65	; 0x41
    167a:	e002      	b.n	1682 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    167c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    167e:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1680:	2000      	movs	r0, #0
}
    1682:	bd10      	pop	{r4, pc}

00001684 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1686:	0080      	lsls	r0, r0, #2
    1688:	4b64      	ldr	r3, [pc, #400]	; (181c <_usart_interrupt_handler+0x198>)
    168a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    168c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    168e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1690:	2b00      	cmp	r3, #0
    1692:	d1fc      	bne.n	168e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1694:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1696:	7da6      	ldrb	r6, [r4, #22]
    1698:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    169a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    169c:	5ceb      	ldrb	r3, [r5, r3]
    169e:	2230      	movs	r2, #48	; 0x30
    16a0:	5caf      	ldrb	r7, [r5, r2]
    16a2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    16a4:	07f1      	lsls	r1, r6, #31
    16a6:	d520      	bpl.n	16ea <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    16a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16aa:	b29b      	uxth	r3, r3
    16ac:	2b00      	cmp	r3, #0
    16ae:	d01a      	beq.n	16e6 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    16b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    16b2:	781a      	ldrb	r2, [r3, #0]
    16b4:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    16b6:	1c59      	adds	r1, r3, #1
    16b8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    16ba:	7969      	ldrb	r1, [r5, #5]
    16bc:	2901      	cmp	r1, #1
    16be:	d104      	bne.n	16ca <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    16c0:	7859      	ldrb	r1, [r3, #1]
    16c2:	0209      	lsls	r1, r1, #8
    16c4:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    16c6:	3302      	adds	r3, #2
    16c8:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    16ca:	05d3      	lsls	r3, r2, #23
    16cc:	0ddb      	lsrs	r3, r3, #23
    16ce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    16d0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16d2:	3b01      	subs	r3, #1
    16d4:	b29b      	uxth	r3, r3
    16d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    16d8:	2b00      	cmp	r3, #0
    16da:	d106      	bne.n	16ea <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16dc:	2301      	movs	r3, #1
    16de:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    16e0:	2302      	movs	r3, #2
    16e2:	75a3      	strb	r3, [r4, #22]
    16e4:	e001      	b.n	16ea <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16e6:	2301      	movs	r3, #1
    16e8:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    16ea:	07b2      	lsls	r2, r6, #30
    16ec:	d509      	bpl.n	1702 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    16ee:	2302      	movs	r3, #2
    16f0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    16f2:	2200      	movs	r2, #0
    16f4:	2333      	movs	r3, #51	; 0x33
    16f6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    16f8:	07fb      	lsls	r3, r7, #31
    16fa:	d502      	bpl.n	1702 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    16fc:	1c28      	adds	r0, r5, #0
    16fe:	68e9      	ldr	r1, [r5, #12]
    1700:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1702:	0772      	lsls	r2, r6, #29
    1704:	d56a      	bpl.n	17dc <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    1706:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1708:	b29b      	uxth	r3, r3
    170a:	2b00      	cmp	r3, #0
    170c:	d064      	beq.n	17d8 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    170e:	8b63      	ldrh	r3, [r4, #26]
    1710:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1712:	0719      	lsls	r1, r3, #28
    1714:	d402      	bmi.n	171c <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1716:	223f      	movs	r2, #63	; 0x3f
    1718:	4013      	ands	r3, r2
    171a:	e001      	b.n	1720 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    171c:	2237      	movs	r2, #55	; 0x37
    171e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1720:	2b00      	cmp	r3, #0
    1722:	d037      	beq.n	1794 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1724:	079a      	lsls	r2, r3, #30
    1726:	d507      	bpl.n	1738 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1728:	221a      	movs	r2, #26
    172a:	2332      	movs	r3, #50	; 0x32
    172c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    172e:	8b62      	ldrh	r2, [r4, #26]
    1730:	2302      	movs	r3, #2
    1732:	4313      	orrs	r3, r2
    1734:	8363      	strh	r3, [r4, #26]
    1736:	e027      	b.n	1788 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1738:	0759      	lsls	r1, r3, #29
    173a:	d507      	bpl.n	174c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    173c:	221e      	movs	r2, #30
    173e:	2332      	movs	r3, #50	; 0x32
    1740:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1742:	8b62      	ldrh	r2, [r4, #26]
    1744:	2304      	movs	r3, #4
    1746:	4313      	orrs	r3, r2
    1748:	8363      	strh	r3, [r4, #26]
    174a:	e01d      	b.n	1788 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    174c:	07da      	lsls	r2, r3, #31
    174e:	d507      	bpl.n	1760 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1750:	2213      	movs	r2, #19
    1752:	2332      	movs	r3, #50	; 0x32
    1754:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1756:	8b62      	ldrh	r2, [r4, #26]
    1758:	2301      	movs	r3, #1
    175a:	4313      	orrs	r3, r2
    175c:	8363      	strh	r3, [r4, #26]
    175e:	e013      	b.n	1788 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1760:	06d9      	lsls	r1, r3, #27
    1762:	d507      	bpl.n	1774 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1764:	2242      	movs	r2, #66	; 0x42
    1766:	2332      	movs	r3, #50	; 0x32
    1768:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    176a:	8b62      	ldrh	r2, [r4, #26]
    176c:	2310      	movs	r3, #16
    176e:	4313      	orrs	r3, r2
    1770:	8363      	strh	r3, [r4, #26]
    1772:	e009      	b.n	1788 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1774:	2220      	movs	r2, #32
    1776:	421a      	tst	r2, r3
    1778:	d006      	beq.n	1788 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    177a:	2241      	movs	r2, #65	; 0x41
    177c:	2332      	movs	r3, #50	; 0x32
    177e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1780:	8b62      	ldrh	r2, [r4, #26]
    1782:	2320      	movs	r3, #32
    1784:	4313      	orrs	r3, r2
    1786:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1788:	077a      	lsls	r2, r7, #29
    178a:	d527      	bpl.n	17dc <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    178c:	1c28      	adds	r0, r5, #0
    178e:	696b      	ldr	r3, [r5, #20]
    1790:	4798      	blx	r3
    1792:	e023      	b.n	17dc <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1794:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1796:	05d2      	lsls	r2, r2, #23
    1798:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    179a:	b2d3      	uxtb	r3, r2
    179c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    179e:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    17a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    17a2:	1c59      	adds	r1, r3, #1
    17a4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17a6:	7969      	ldrb	r1, [r5, #5]
    17a8:	2901      	cmp	r1, #1
    17aa:	d104      	bne.n	17b6 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    17ac:	0a12      	lsrs	r2, r2, #8
    17ae:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    17b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    17b2:	3301      	adds	r3, #1
    17b4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    17b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17b8:	3b01      	subs	r3, #1
    17ba:	b29b      	uxth	r3, r3
    17bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    17be:	2b00      	cmp	r3, #0
    17c0:	d10c      	bne.n	17dc <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17c2:	2304      	movs	r3, #4
    17c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    17c6:	2200      	movs	r2, #0
    17c8:	2332      	movs	r3, #50	; 0x32
    17ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    17cc:	07ba      	lsls	r2, r7, #30
    17ce:	d505      	bpl.n	17dc <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    17d0:	1c28      	adds	r0, r5, #0
    17d2:	692b      	ldr	r3, [r5, #16]
    17d4:	4798      	blx	r3
    17d6:	e001      	b.n	17dc <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17d8:	2304      	movs	r3, #4
    17da:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    17dc:	06f1      	lsls	r1, r6, #27
    17de:	d507      	bpl.n	17f0 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    17e0:	2310      	movs	r3, #16
    17e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    17e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    17e6:	06fa      	lsls	r2, r7, #27
    17e8:	d502      	bpl.n	17f0 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    17ea:	1c28      	adds	r0, r5, #0
    17ec:	69eb      	ldr	r3, [r5, #28]
    17ee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    17f0:	06b1      	lsls	r1, r6, #26
    17f2:	d507      	bpl.n	1804 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    17f4:	2320      	movs	r3, #32
    17f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    17f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    17fa:	073a      	lsls	r2, r7, #28
    17fc:	d502      	bpl.n	1804 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    17fe:	1c28      	adds	r0, r5, #0
    1800:	69ab      	ldr	r3, [r5, #24]
    1802:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1804:	0731      	lsls	r1, r6, #28
    1806:	d507      	bpl.n	1818 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1808:	2308      	movs	r3, #8
    180a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    180c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    180e:	06ba      	lsls	r2, r7, #26
    1810:	d502      	bpl.n	1818 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1812:	6a2b      	ldr	r3, [r5, #32]
    1814:	1c28      	adds	r0, r5, #0
    1816:	4798      	blx	r3
		}
	}
#endif
}
    1818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	20000114 	.word	0x20000114

00001820 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1820:	b508      	push	{r3, lr}
	switch (clock_source) {
    1822:	2808      	cmp	r0, #8
    1824:	d834      	bhi.n	1890 <system_clock_source_get_hz+0x70>
    1826:	0080      	lsls	r0, r0, #2
    1828:	4b1b      	ldr	r3, [pc, #108]	; (1898 <system_clock_source_get_hz+0x78>)
    182a:	581b      	ldr	r3, [r3, r0]
    182c:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    182e:	2080      	movs	r0, #128	; 0x80
    1830:	0200      	lsls	r0, r0, #8
    1832:	e030      	b.n	1896 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1834:	4b19      	ldr	r3, [pc, #100]	; (189c <system_clock_source_get_hz+0x7c>)
    1836:	6918      	ldr	r0, [r3, #16]
    1838:	e02d      	b.n	1896 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    183a:	4b19      	ldr	r3, [pc, #100]	; (18a0 <system_clock_source_get_hz+0x80>)
    183c:	6a18      	ldr	r0, [r3, #32]
    183e:	0580      	lsls	r0, r0, #22
    1840:	0f80      	lsrs	r0, r0, #30
    1842:	4b18      	ldr	r3, [pc, #96]	; (18a4 <system_clock_source_get_hz+0x84>)
    1844:	40c3      	lsrs	r3, r0
    1846:	1c18      	adds	r0, r3, #0
    1848:	e025      	b.n	1896 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    184a:	4b14      	ldr	r3, [pc, #80]	; (189c <system_clock_source_get_hz+0x7c>)
    184c:	6958      	ldr	r0, [r3, #20]
    184e:	e022      	b.n	1896 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1850:	4b12      	ldr	r3, [pc, #72]	; (189c <system_clock_source_get_hz+0x7c>)
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	2002      	movs	r0, #2
    1856:	4018      	ands	r0, r3
    1858:	d01d      	beq.n	1896 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    185a:	4911      	ldr	r1, [pc, #68]	; (18a0 <system_clock_source_get_hz+0x80>)
    185c:	2210      	movs	r2, #16
    185e:	68cb      	ldr	r3, [r1, #12]
    1860:	421a      	tst	r2, r3
    1862:	d0fc      	beq.n	185e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1864:	4b0d      	ldr	r3, [pc, #52]	; (189c <system_clock_source_get_hz+0x7c>)
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	075a      	lsls	r2, r3, #29
    186a:	d513      	bpl.n	1894 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    186c:	2000      	movs	r0, #0
    186e:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <system_clock_source_get_hz+0x88>)
    1870:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1872:	4b0a      	ldr	r3, [pc, #40]	; (189c <system_clock_source_get_hz+0x7c>)
    1874:	689b      	ldr	r3, [r3, #8]
    1876:	041b      	lsls	r3, r3, #16
    1878:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    187a:	4358      	muls	r0, r3
    187c:	e00b      	b.n	1896 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    187e:	2350      	movs	r3, #80	; 0x50
    1880:	4a07      	ldr	r2, [pc, #28]	; (18a0 <system_clock_source_get_hz+0x80>)
    1882:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1884:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1886:	075a      	lsls	r2, r3, #29
    1888:	d505      	bpl.n	1896 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    188a:	4b04      	ldr	r3, [pc, #16]	; (189c <system_clock_source_get_hz+0x7c>)
    188c:	68d8      	ldr	r0, [r3, #12]
    188e:	e002      	b.n	1896 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1890:	2000      	movs	r0, #0
    1892:	e000      	b.n	1896 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1894:	4805      	ldr	r0, [pc, #20]	; (18ac <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1896:	bd08      	pop	{r3, pc}
    1898:	00006e88 	.word	0x00006e88
    189c:	200000e4 	.word	0x200000e4
    18a0:	40000800 	.word	0x40000800
    18a4:	007a1200 	.word	0x007a1200
    18a8:	00001c7d 	.word	0x00001c7d
    18ac:	02dc6c00 	.word	0x02dc6c00

000018b0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18b0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18b2:	4b0c      	ldr	r3, [pc, #48]	; (18e4 <system_clock_source_osc8m_set_config+0x34>)
    18b4:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18b6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18b8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18ba:	7840      	ldrb	r0, [r0, #1]
    18bc:	2201      	movs	r2, #1
    18be:	4010      	ands	r0, r2
    18c0:	0180      	lsls	r0, r0, #6
    18c2:	2640      	movs	r6, #64	; 0x40
    18c4:	43b4      	bics	r4, r6
    18c6:	4304      	orrs	r4, r0
    18c8:	402a      	ands	r2, r5
    18ca:	01d0      	lsls	r0, r2, #7
    18cc:	2280      	movs	r2, #128	; 0x80
    18ce:	4394      	bics	r4, r2
    18d0:	1c22      	adds	r2, r4, #0
    18d2:	4302      	orrs	r2, r0
    18d4:	2003      	movs	r0, #3
    18d6:	4001      	ands	r1, r0
    18d8:	0209      	lsls	r1, r1, #8
    18da:	4803      	ldr	r0, [pc, #12]	; (18e8 <system_clock_source_osc8m_set_config+0x38>)
    18dc:	4002      	ands	r2, r0
    18de:	430a      	orrs	r2, r1
    18e0:	621a      	str	r2, [r3, #32]
}
    18e2:	bd70      	pop	{r4, r5, r6, pc}
    18e4:	40000800 	.word	0x40000800
    18e8:	fffffcff 	.word	0xfffffcff

000018ec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18ec:	2808      	cmp	r0, #8
    18ee:	d849      	bhi.n	1984 <system_clock_source_enable+0x98>
    18f0:	0080      	lsls	r0, r0, #2
    18f2:	4b25      	ldr	r3, [pc, #148]	; (1988 <system_clock_source_enable+0x9c>)
    18f4:	581b      	ldr	r3, [r3, r0]
    18f6:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    18f8:	2000      	movs	r0, #0
    18fa:	e044      	b.n	1986 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18fc:	4b23      	ldr	r3, [pc, #140]	; (198c <system_clock_source_enable+0xa0>)
    18fe:	6a19      	ldr	r1, [r3, #32]
    1900:	2202      	movs	r2, #2
    1902:	430a      	orrs	r2, r1
    1904:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1906:	2000      	movs	r0, #0
    1908:	e03d      	b.n	1986 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    190a:	4b20      	ldr	r3, [pc, #128]	; (198c <system_clock_source_enable+0xa0>)
    190c:	6999      	ldr	r1, [r3, #24]
    190e:	2202      	movs	r2, #2
    1910:	430a      	orrs	r2, r1
    1912:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1914:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1916:	e036      	b.n	1986 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1918:	4b1c      	ldr	r3, [pc, #112]	; (198c <system_clock_source_enable+0xa0>)
    191a:	8a19      	ldrh	r1, [r3, #16]
    191c:	2202      	movs	r2, #2
    191e:	430a      	orrs	r2, r1
    1920:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1922:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1924:	e02f      	b.n	1986 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1926:	4b19      	ldr	r3, [pc, #100]	; (198c <system_clock_source_enable+0xa0>)
    1928:	8a99      	ldrh	r1, [r3, #20]
    192a:	2202      	movs	r2, #2
    192c:	430a      	orrs	r2, r1
    192e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1930:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1932:	e028      	b.n	1986 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1934:	4a16      	ldr	r2, [pc, #88]	; (1990 <system_clock_source_enable+0xa4>)
    1936:	6811      	ldr	r1, [r2, #0]
    1938:	2302      	movs	r3, #2
    193a:	4319      	orrs	r1, r3
    193c:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    193e:	4a13      	ldr	r2, [pc, #76]	; (198c <system_clock_source_enable+0xa0>)
    1940:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1942:	1c11      	adds	r1, r2, #0
    1944:	2210      	movs	r2, #16
    1946:	68cb      	ldr	r3, [r1, #12]
    1948:	421a      	tst	r2, r3
    194a:	d0fc      	beq.n	1946 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    194c:	4a10      	ldr	r2, [pc, #64]	; (1990 <system_clock_source_enable+0xa4>)
    194e:	6891      	ldr	r1, [r2, #8]
    1950:	4b0e      	ldr	r3, [pc, #56]	; (198c <system_clock_source_enable+0xa0>)
    1952:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1954:	6852      	ldr	r2, [r2, #4]
    1956:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1958:	2200      	movs	r2, #0
    195a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    195c:	1c19      	adds	r1, r3, #0
    195e:	2210      	movs	r2, #16
    1960:	68cb      	ldr	r3, [r1, #12]
    1962:	421a      	tst	r2, r3
    1964:	d0fc      	beq.n	1960 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1966:	4b0a      	ldr	r3, [pc, #40]	; (1990 <system_clock_source_enable+0xa4>)
    1968:	681a      	ldr	r2, [r3, #0]
    196a:	b292      	uxth	r2, r2
    196c:	4b07      	ldr	r3, [pc, #28]	; (198c <system_clock_source_enable+0xa0>)
    196e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1970:	2000      	movs	r0, #0
    1972:	e008      	b.n	1986 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1974:	4a05      	ldr	r2, [pc, #20]	; (198c <system_clock_source_enable+0xa0>)
    1976:	2344      	movs	r3, #68	; 0x44
    1978:	5cd0      	ldrb	r0, [r2, r3]
    197a:	2102      	movs	r1, #2
    197c:	4301      	orrs	r1, r0
    197e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1980:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1982:	e000      	b.n	1986 <system_clock_source_enable+0x9a>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1984:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1986:	4770      	bx	lr
    1988:	00006eac 	.word	0x00006eac
    198c:	40000800 	.word	0x40000800
    1990:	200000e4 	.word	0x200000e4

00001994 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1994:	b530      	push	{r4, r5, lr}
    1996:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1998:	22c2      	movs	r2, #194	; 0xc2
    199a:	00d2      	lsls	r2, r2, #3
    199c:	4b1a      	ldr	r3, [pc, #104]	; (1a08 <system_clock_init+0x74>)
    199e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    19a0:	4b1a      	ldr	r3, [pc, #104]	; (1a0c <system_clock_init+0x78>)
    19a2:	685a      	ldr	r2, [r3, #4]
    19a4:	211e      	movs	r1, #30
    19a6:	438a      	bics	r2, r1
    19a8:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    19aa:	2301      	movs	r3, #1
    19ac:	466a      	mov	r2, sp
    19ae:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19b0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    19b2:	4d17      	ldr	r5, [pc, #92]	; (1a10 <system_clock_init+0x7c>)
    19b4:	b2e0      	uxtb	r0, r4
    19b6:	4669      	mov	r1, sp
    19b8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19ba:	3401      	adds	r4, #1
    19bc:	2c25      	cmp	r4, #37	; 0x25
    19be:	d1f9      	bne.n	19b4 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    19c0:	a803      	add	r0, sp, #12
    19c2:	2400      	movs	r4, #0
    19c4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    19c6:	2501      	movs	r5, #1
    19c8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19ca:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19cc:	4b11      	ldr	r3, [pc, #68]	; (1a14 <system_clock_init+0x80>)
    19ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19d0:	2006      	movs	r0, #6
    19d2:	4b11      	ldr	r3, [pc, #68]	; (1a18 <system_clock_init+0x84>)
    19d4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19d6:	4b11      	ldr	r3, [pc, #68]	; (1a1c <system_clock_init+0x88>)
    19d8:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    19da:	4b11      	ldr	r3, [pc, #68]	; (1a20 <system_clock_init+0x8c>)
    19dc:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    19de:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    19e0:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    19e2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    19e4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    19e6:	466b      	mov	r3, sp
    19e8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    19ea:	2306      	movs	r3, #6
    19ec:	466a      	mov	r2, sp
    19ee:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    19f0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    19f2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19f4:	2000      	movs	r0, #0
    19f6:	4669      	mov	r1, sp
    19f8:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <system_clock_init+0x90>)
    19fa:	4798      	blx	r3
    19fc:	2000      	movs	r0, #0
    19fe:	4b0a      	ldr	r3, [pc, #40]	; (1a28 <system_clock_init+0x94>)
    1a00:	4798      	blx	r3
#endif
}
    1a02:	b005      	add	sp, #20
    1a04:	bd30      	pop	{r4, r5, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	40000800 	.word	0x40000800
    1a0c:	41004000 	.word	0x41004000
    1a10:	00001c61 	.word	0x00001c61
    1a14:	000018b1 	.word	0x000018b1
    1a18:	000018ed 	.word	0x000018ed
    1a1c:	00001a2d 	.word	0x00001a2d
    1a20:	40000400 	.word	0x40000400
    1a24:	00001a51 	.word	0x00001a51
    1a28:	00001b05 	.word	0x00001b05

00001a2c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1a2c:	4b06      	ldr	r3, [pc, #24]	; (1a48 <system_gclk_init+0x1c>)
    1a2e:	6999      	ldr	r1, [r3, #24]
    1a30:	2208      	movs	r2, #8
    1a32:	430a      	orrs	r2, r1
    1a34:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a36:	2201      	movs	r2, #1
    1a38:	4b04      	ldr	r3, [pc, #16]	; (1a4c <system_gclk_init+0x20>)
    1a3a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a3c:	1c19      	adds	r1, r3, #0
    1a3e:	780b      	ldrb	r3, [r1, #0]
    1a40:	4213      	tst	r3, r2
    1a42:	d1fc      	bne.n	1a3e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a44:	4770      	bx	lr
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	40000400 	.word	0x40000400
    1a4c:	40000c00 	.word	0x40000c00

00001a50 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a52:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a54:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a56:	780d      	ldrb	r5, [r1, #0]
    1a58:	022d      	lsls	r5, r5, #8
    1a5a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a5c:	784b      	ldrb	r3, [r1, #1]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d002      	beq.n	1a68 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a62:	2380      	movs	r3, #128	; 0x80
    1a64:	02db      	lsls	r3, r3, #11
    1a66:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a68:	7a4b      	ldrb	r3, [r1, #9]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d002      	beq.n	1a74 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a6e:	2380      	movs	r3, #128	; 0x80
    1a70:	031b      	lsls	r3, r3, #12
    1a72:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a74:	684c      	ldr	r4, [r1, #4]
    1a76:	2c01      	cmp	r4, #1
    1a78:	d917      	bls.n	1aaa <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a7a:	1e63      	subs	r3, r4, #1
    1a7c:	421c      	tst	r4, r3
    1a7e:	d10f      	bne.n	1aa0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a80:	2c02      	cmp	r4, #2
    1a82:	d906      	bls.n	1a92 <system_gclk_gen_set_config+0x42>
    1a84:	2302      	movs	r3, #2
    1a86:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a88:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1a8a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a8c:	429c      	cmp	r4, r3
    1a8e:	d8fb      	bhi.n	1a88 <system_gclk_gen_set_config+0x38>
    1a90:	e000      	b.n	1a94 <system_gclk_gen_set_config+0x44>
    1a92:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a94:	0217      	lsls	r7, r2, #8
    1a96:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a98:	2380      	movs	r3, #128	; 0x80
    1a9a:	035b      	lsls	r3, r3, #13
    1a9c:	431d      	orrs	r5, r3
    1a9e:	e004      	b.n	1aaa <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1aa0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1aa2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aa4:	2380      	movs	r3, #128	; 0x80
    1aa6:	029b      	lsls	r3, r3, #10
    1aa8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1aaa:	7a0b      	ldrb	r3, [r1, #8]
    1aac:	2b00      	cmp	r3, #0
    1aae:	d002      	beq.n	1ab6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ab0:	2380      	movs	r3, #128	; 0x80
    1ab2:	039b      	lsls	r3, r3, #14
    1ab4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ab6:	4a0f      	ldr	r2, [pc, #60]	; (1af4 <system_gclk_gen_set_config+0xa4>)
    1ab8:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1aba:	b25b      	sxtb	r3, r3
    1abc:	2b00      	cmp	r3, #0
    1abe:	dbfb      	blt.n	1ab8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ac0:	4b0d      	ldr	r3, [pc, #52]	; (1af8 <system_gclk_gen_set_config+0xa8>)
    1ac2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ac4:	4b0d      	ldr	r3, [pc, #52]	; (1afc <system_gclk_gen_set_config+0xac>)
    1ac6:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ac8:	4a0a      	ldr	r2, [pc, #40]	; (1af4 <system_gclk_gen_set_config+0xa4>)
    1aca:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1acc:	b25b      	sxtb	r3, r3
    1ace:	2b00      	cmp	r3, #0
    1ad0:	dbfb      	blt.n	1aca <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ad2:	4b08      	ldr	r3, [pc, #32]	; (1af4 <system_gclk_gen_set_config+0xa4>)
    1ad4:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ad6:	1c1a      	adds	r2, r3, #0
    1ad8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1ada:	b25b      	sxtb	r3, r3
    1adc:	2b00      	cmp	r3, #0
    1ade:	dbfb      	blt.n	1ad8 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ae0:	4b04      	ldr	r3, [pc, #16]	; (1af4 <system_gclk_gen_set_config+0xa4>)
    1ae2:	6859      	ldr	r1, [r3, #4]
    1ae4:	2280      	movs	r2, #128	; 0x80
    1ae6:	0252      	lsls	r2, r2, #9
    1ae8:	400a      	ands	r2, r1
    1aea:	4315      	orrs	r5, r2
    1aec:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1aee:	4b04      	ldr	r3, [pc, #16]	; (1b00 <system_gclk_gen_set_config+0xb0>)
    1af0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1af4:	40000c00 	.word	0x40000c00
    1af8:	00001279 	.word	0x00001279
    1afc:	40000c08 	.word	0x40000c08
    1b00:	000012b9 	.word	0x000012b9

00001b04 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b04:	b510      	push	{r4, lr}
    1b06:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b08:	4a0b      	ldr	r2, [pc, #44]	; (1b38 <system_gclk_gen_enable+0x34>)
    1b0a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1b0c:	b25b      	sxtb	r3, r3
    1b0e:	2b00      	cmp	r3, #0
    1b10:	dbfb      	blt.n	1b0a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b12:	4b0a      	ldr	r3, [pc, #40]	; (1b3c <system_gclk_gen_enable+0x38>)
    1b14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b16:	4b0a      	ldr	r3, [pc, #40]	; (1b40 <system_gclk_gen_enable+0x3c>)
    1b18:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b1a:	4a07      	ldr	r2, [pc, #28]	; (1b38 <system_gclk_gen_enable+0x34>)
    1b1c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1b1e:	b25b      	sxtb	r3, r3
    1b20:	2b00      	cmp	r3, #0
    1b22:	dbfb      	blt.n	1b1c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b24:	4b04      	ldr	r3, [pc, #16]	; (1b38 <system_gclk_gen_enable+0x34>)
    1b26:	6859      	ldr	r1, [r3, #4]
    1b28:	2280      	movs	r2, #128	; 0x80
    1b2a:	0252      	lsls	r2, r2, #9
    1b2c:	430a      	orrs	r2, r1
    1b2e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b30:	4b04      	ldr	r3, [pc, #16]	; (1b44 <system_gclk_gen_enable+0x40>)
    1b32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	40000c00 	.word	0x40000c00
    1b3c:	00001279 	.word	0x00001279
    1b40:	40000c04 	.word	0x40000c04
    1b44:	000012b9 	.word	0x000012b9

00001b48 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
    1b4a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b4c:	4a1a      	ldr	r2, [pc, #104]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b4e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1b50:	b25b      	sxtb	r3, r3
    1b52:	2b00      	cmp	r3, #0
    1b54:	dbfb      	blt.n	1b4e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b56:	4b19      	ldr	r3, [pc, #100]	; (1bbc <system_gclk_gen_get_hz+0x74>)
    1b58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b5a:	4b19      	ldr	r3, [pc, #100]	; (1bc0 <system_gclk_gen_get_hz+0x78>)
    1b5c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b5e:	4a16      	ldr	r2, [pc, #88]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b60:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1b62:	b25b      	sxtb	r3, r3
    1b64:	2b00      	cmp	r3, #0
    1b66:	dbfb      	blt.n	1b60 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b68:	4e13      	ldr	r6, [pc, #76]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b6a:	6870      	ldr	r0, [r6, #4]
    1b6c:	04c0      	lsls	r0, r0, #19
    1b6e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <system_gclk_gen_get_hz+0x7c>)
    1b72:	4798      	blx	r3
    1b74:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b76:	4b12      	ldr	r3, [pc, #72]	; (1bc0 <system_gclk_gen_get_hz+0x78>)
    1b78:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b7a:	6876      	ldr	r6, [r6, #4]
    1b7c:	02f6      	lsls	r6, r6, #11
    1b7e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b80:	4b11      	ldr	r3, [pc, #68]	; (1bc8 <system_gclk_gen_get_hz+0x80>)
    1b82:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b84:	4a0c      	ldr	r2, [pc, #48]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b86:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1b88:	b25b      	sxtb	r3, r3
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	dbfb      	blt.n	1b86 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b8e:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b90:	689c      	ldr	r4, [r3, #8]
    1b92:	0a24      	lsrs	r4, r4, #8
    1b94:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b96:	4b0d      	ldr	r3, [pc, #52]	; (1bcc <system_gclk_gen_get_hz+0x84>)
    1b98:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b9a:	2e00      	cmp	r6, #0
    1b9c:	d107      	bne.n	1bae <system_gclk_gen_get_hz+0x66>
    1b9e:	2c01      	cmp	r4, #1
    1ba0:	d907      	bls.n	1bb2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1ba2:	1c28      	adds	r0, r5, #0
    1ba4:	1c21      	adds	r1, r4, #0
    1ba6:	4b0a      	ldr	r3, [pc, #40]	; (1bd0 <system_gclk_gen_get_hz+0x88>)
    1ba8:	4798      	blx	r3
    1baa:	1c05      	adds	r5, r0, #0
    1bac:	e001      	b.n	1bb2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1bae:	3401      	adds	r4, #1
    1bb0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1bb2:	1c28      	adds	r0, r5, #0
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	40000c00 	.word	0x40000c00
    1bbc:	00001279 	.word	0x00001279
    1bc0:	40000c04 	.word	0x40000c04
    1bc4:	00001821 	.word	0x00001821
    1bc8:	40000c08 	.word	0x40000c08
    1bcc:	000012b9 	.word	0x000012b9
    1bd0:	00004b79 	.word	0x00004b79

00001bd4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bd4:	b510      	push	{r4, lr}
    1bd6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1bd8:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <system_gclk_chan_enable+0x20>)
    1bda:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bdc:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <system_gclk_chan_enable+0x24>)
    1bde:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1be0:	4b06      	ldr	r3, [pc, #24]	; (1bfc <system_gclk_chan_enable+0x28>)
    1be2:	8859      	ldrh	r1, [r3, #2]
    1be4:	2280      	movs	r2, #128	; 0x80
    1be6:	01d2      	lsls	r2, r2, #7
    1be8:	430a      	orrs	r2, r1
    1bea:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <system_gclk_chan_enable+0x2c>)
    1bee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bf0:	bd10      	pop	{r4, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	00001279 	.word	0x00001279
    1bf8:	40000c02 	.word	0x40000c02
    1bfc:	40000c00 	.word	0x40000c00
    1c00:	000012b9 	.word	0x000012b9

00001c04 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c04:	b510      	push	{r4, lr}
    1c06:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c08:	4b0f      	ldr	r3, [pc, #60]	; (1c48 <system_gclk_chan_disable+0x44>)
    1c0a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c0c:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <system_gclk_chan_disable+0x48>)
    1c0e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c10:	4b0f      	ldr	r3, [pc, #60]	; (1c50 <system_gclk_chan_disable+0x4c>)
    1c12:	8858      	ldrh	r0, [r3, #2]
    1c14:	0500      	lsls	r0, r0, #20
    1c16:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c18:	8859      	ldrh	r1, [r3, #2]
    1c1a:	4a0e      	ldr	r2, [pc, #56]	; (1c54 <system_gclk_chan_disable+0x50>)
    1c1c:	400a      	ands	r2, r1
    1c1e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c20:	8859      	ldrh	r1, [r3, #2]
    1c22:	4a0d      	ldr	r2, [pc, #52]	; (1c58 <system_gclk_chan_disable+0x54>)
    1c24:	400a      	ands	r2, r1
    1c26:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c28:	1c19      	adds	r1, r3, #0
    1c2a:	2280      	movs	r2, #128	; 0x80
    1c2c:	01d2      	lsls	r2, r2, #7
    1c2e:	884b      	ldrh	r3, [r1, #2]
    1c30:	4213      	tst	r3, r2
    1c32:	d1fc      	bne.n	1c2e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c34:	4b06      	ldr	r3, [pc, #24]	; (1c50 <system_gclk_chan_disable+0x4c>)
    1c36:	0201      	lsls	r1, r0, #8
    1c38:	8858      	ldrh	r0, [r3, #2]
    1c3a:	4a06      	ldr	r2, [pc, #24]	; (1c54 <system_gclk_chan_disable+0x50>)
    1c3c:	4002      	ands	r2, r0
    1c3e:	430a      	orrs	r2, r1
    1c40:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <system_gclk_chan_disable+0x58>)
    1c44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c46:	bd10      	pop	{r4, pc}
    1c48:	00001279 	.word	0x00001279
    1c4c:	40000c02 	.word	0x40000c02
    1c50:	40000c00 	.word	0x40000c00
    1c54:	fffff0ff 	.word	0xfffff0ff
    1c58:	ffffbfff 	.word	0xffffbfff
    1c5c:	000012b9 	.word	0x000012b9

00001c60 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1c60:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c62:	780c      	ldrb	r4, [r1, #0]
    1c64:	0224      	lsls	r4, r4, #8
    1c66:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1c68:	4b02      	ldr	r3, [pc, #8]	; (1c74 <system_gclk_chan_set_config+0x14>)
    1c6a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c6c:	b2a4      	uxth	r4, r4
    1c6e:	4b02      	ldr	r3, [pc, #8]	; (1c78 <system_gclk_chan_set_config+0x18>)
    1c70:	805c      	strh	r4, [r3, #2]
}
    1c72:	bd10      	pop	{r4, pc}
    1c74:	00001c05 	.word	0x00001c05
    1c78:	40000c00 	.word	0x40000c00

00001c7c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c7c:	b510      	push	{r4, lr}
    1c7e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c80:	4b06      	ldr	r3, [pc, #24]	; (1c9c <system_gclk_chan_get_hz+0x20>)
    1c82:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c84:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <system_gclk_chan_get_hz+0x24>)
    1c86:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c88:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <system_gclk_chan_get_hz+0x28>)
    1c8a:	885c      	ldrh	r4, [r3, #2]
    1c8c:	0524      	lsls	r4, r4, #20
    1c8e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c90:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <system_gclk_chan_get_hz+0x2c>)
    1c92:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c94:	1c20      	adds	r0, r4, #0
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <system_gclk_chan_get_hz+0x30>)
    1c98:	4798      	blx	r3
}
    1c9a:	bd10      	pop	{r4, pc}
    1c9c:	00001279 	.word	0x00001279
    1ca0:	40000c02 	.word	0x40000c02
    1ca4:	40000c00 	.word	0x40000c00
    1ca8:	000012b9 	.word	0x000012b9
    1cac:	00001b49 	.word	0x00001b49

00001cb0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1cb0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1cb2:	78d3      	ldrb	r3, [r2, #3]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d11e      	bne.n	1cf6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1cb8:	7813      	ldrb	r3, [r2, #0]
    1cba:	2b80      	cmp	r3, #128	; 0x80
    1cbc:	d004      	beq.n	1cc8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1cbe:	061b      	lsls	r3, r3, #24
    1cc0:	2480      	movs	r4, #128	; 0x80
    1cc2:	0264      	lsls	r4, r4, #9
    1cc4:	4323      	orrs	r3, r4
    1cc6:	e000      	b.n	1cca <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1cc8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cca:	7854      	ldrb	r4, [r2, #1]
    1ccc:	2502      	movs	r5, #2
    1cce:	43ac      	bics	r4, r5
    1cd0:	d10a      	bne.n	1ce8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cd2:	7894      	ldrb	r4, [r2, #2]
    1cd4:	2c00      	cmp	r4, #0
    1cd6:	d103      	bne.n	1ce0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cd8:	2480      	movs	r4, #128	; 0x80
    1cda:	02a4      	lsls	r4, r4, #10
    1cdc:	4323      	orrs	r3, r4
    1cde:	e002      	b.n	1ce6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ce0:	24c0      	movs	r4, #192	; 0xc0
    1ce2:	02e4      	lsls	r4, r4, #11
    1ce4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ce6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ce8:	7854      	ldrb	r4, [r2, #1]
    1cea:	3c01      	subs	r4, #1
    1cec:	2c01      	cmp	r4, #1
    1cee:	d804      	bhi.n	1cfa <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cf0:	4c11      	ldr	r4, [pc, #68]	; (1d38 <_system_pinmux_config+0x88>)
    1cf2:	4023      	ands	r3, r4
    1cf4:	e001      	b.n	1cfa <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1cf6:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1cf8:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cfa:	040d      	lsls	r5, r1, #16
    1cfc:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cfe:	24a0      	movs	r4, #160	; 0xa0
    1d00:	05e4      	lsls	r4, r4, #23
    1d02:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d04:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d06:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d08:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d0a:	24d0      	movs	r4, #208	; 0xd0
    1d0c:	0624      	lsls	r4, r4, #24
    1d0e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d10:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d12:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d14:	78d4      	ldrb	r4, [r2, #3]
    1d16:	2c00      	cmp	r4, #0
    1d18:	d10c      	bne.n	1d34 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d1a:	035c      	lsls	r4, r3, #13
    1d1c:	d505      	bpl.n	1d2a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d1e:	7893      	ldrb	r3, [r2, #2]
    1d20:	2b01      	cmp	r3, #1
    1d22:	d101      	bne.n	1d28 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1d24:	6181      	str	r1, [r0, #24]
    1d26:	e000      	b.n	1d2a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1d28:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d2a:	7853      	ldrb	r3, [r2, #1]
    1d2c:	3b01      	subs	r3, #1
    1d2e:	2b01      	cmp	r3, #1
    1d30:	d800      	bhi.n	1d34 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1d32:	6081      	str	r1, [r0, #8]
		}
	}
}
    1d34:	bd30      	pop	{r4, r5, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	fffbffff 	.word	0xfffbffff

00001d3c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d3c:	b508      	push	{r3, lr}
    1d3e:	1c03      	adds	r3, r0, #0
    1d40:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d42:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1d44:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d46:	2900      	cmp	r1, #0
    1d48:	d103      	bne.n	1d52 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d4a:	0958      	lsrs	r0, r3, #5
    1d4c:	01c0      	lsls	r0, r0, #7
    1d4e:	4904      	ldr	r1, [pc, #16]	; (1d60 <system_pinmux_pin_set_config+0x24>)
    1d50:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d52:	211f      	movs	r1, #31
    1d54:	400b      	ands	r3, r1
    1d56:	2101      	movs	r1, #1
    1d58:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1d5a:	4b02      	ldr	r3, [pc, #8]	; (1d64 <system_pinmux_pin_set_config+0x28>)
    1d5c:	4798      	blx	r3
}
    1d5e:	bd08      	pop	{r3, pc}
    1d60:	41004400 	.word	0x41004400
    1d64:	00001cb1 	.word	0x00001cb1

00001d68 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d68:	4770      	bx	lr
    1d6a:	46c0      	nop			; (mov r8, r8)

00001d6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d6c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d6e:	4b05      	ldr	r3, [pc, #20]	; (1d84 <system_init+0x18>)
    1d70:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d72:	4b05      	ldr	r3, [pc, #20]	; (1d88 <system_init+0x1c>)
    1d74:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <system_init+0x20>)
    1d78:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <system_init+0x24>)
    1d7c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <system_init+0x28>)
    1d80:	4798      	blx	r3
}
    1d82:	bd08      	pop	{r3, pc}
    1d84:	00001995 	.word	0x00001995
    1d88:	00001275 	.word	0x00001275
    1d8c:	00001d69 	.word	0x00001d69
    1d90:	00001d69 	.word	0x00001d69
    1d94:	00001d69 	.word	0x00001d69

00001d98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d98:	e7fe      	b.n	1d98 <Dummy_Handler>
    1d9a:	46c0      	nop			; (mov r8, r8)

00001d9c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1d9c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1d9e:	4b2c      	ldr	r3, [pc, #176]	; (1e50 <Reset_Handler+0xb4>)
    1da0:	4a2c      	ldr	r2, [pc, #176]	; (1e54 <Reset_Handler+0xb8>)
    1da2:	429a      	cmp	r2, r3
    1da4:	d003      	beq.n	1dae <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1da6:	4b2c      	ldr	r3, [pc, #176]	; (1e58 <Reset_Handler+0xbc>)
    1da8:	4a29      	ldr	r2, [pc, #164]	; (1e50 <Reset_Handler+0xb4>)
    1daa:	429a      	cmp	r2, r3
    1dac:	d304      	bcc.n	1db8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1dae:	4b2b      	ldr	r3, [pc, #172]	; (1e5c <Reset_Handler+0xc0>)
    1db0:	4a2b      	ldr	r2, [pc, #172]	; (1e60 <Reset_Handler+0xc4>)
    1db2:	429a      	cmp	r2, r3
    1db4:	d310      	bcc.n	1dd8 <Reset_Handler+0x3c>
    1db6:	e01b      	b.n	1df0 <Reset_Handler+0x54>
    1db8:	4b2a      	ldr	r3, [pc, #168]	; (1e64 <Reset_Handler+0xc8>)
    1dba:	4827      	ldr	r0, [pc, #156]	; (1e58 <Reset_Handler+0xbc>)
    1dbc:	3003      	adds	r0, #3
    1dbe:	1ac0      	subs	r0, r0, r3
    1dc0:	0880      	lsrs	r0, r0, #2
    1dc2:	3001      	adds	r0, #1
    1dc4:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1dc6:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1dc8:	4921      	ldr	r1, [pc, #132]	; (1e50 <Reset_Handler+0xb4>)
    1dca:	4a22      	ldr	r2, [pc, #136]	; (1e54 <Reset_Handler+0xb8>)
    1dcc:	58d4      	ldr	r4, [r2, r3]
    1dce:	50cc      	str	r4, [r1, r3]
    1dd0:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1dd2:	4283      	cmp	r3, r0
    1dd4:	d1fa      	bne.n	1dcc <Reset_Handler+0x30>
    1dd6:	e7ea      	b.n	1dae <Reset_Handler+0x12>
    1dd8:	4b21      	ldr	r3, [pc, #132]	; (1e60 <Reset_Handler+0xc4>)
    1dda:	1d1a      	adds	r2, r3, #4
    1ddc:	491f      	ldr	r1, [pc, #124]	; (1e5c <Reset_Handler+0xc0>)
    1dde:	3103      	adds	r1, #3
    1de0:	1a89      	subs	r1, r1, r2
    1de2:	0889      	lsrs	r1, r1, #2
    1de4:	0089      	lsls	r1, r1, #2
    1de6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1de8:	2100      	movs	r1, #0
    1dea:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1dec:	4293      	cmp	r3, r2
    1dee:	d1fc      	bne.n	1dea <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1df0:	4b1d      	ldr	r3, [pc, #116]	; (1e68 <Reset_Handler+0xcc>)
    1df2:	21ff      	movs	r1, #255	; 0xff
    1df4:	4a1d      	ldr	r2, [pc, #116]	; (1e6c <Reset_Handler+0xd0>)
    1df6:	438a      	bics	r2, r1
    1df8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1dfa:	2102      	movs	r1, #2
    1dfc:	2390      	movs	r3, #144	; 0x90
    1dfe:	005b      	lsls	r3, r3, #1
    1e00:	4a1b      	ldr	r2, [pc, #108]	; (1e70 <Reset_Handler+0xd4>)
    1e02:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e04:	4b1b      	ldr	r3, [pc, #108]	; (1e74 <Reset_Handler+0xd8>)
    1e06:	78d8      	ldrb	r0, [r3, #3]
    1e08:	2103      	movs	r1, #3
    1e0a:	4388      	bics	r0, r1
    1e0c:	2202      	movs	r2, #2
    1e0e:	4310      	orrs	r0, r2
    1e10:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e12:	78dd      	ldrb	r5, [r3, #3]
    1e14:	240c      	movs	r4, #12
    1e16:	43a5      	bics	r5, r4
    1e18:	2008      	movs	r0, #8
    1e1a:	4305      	orrs	r5, r0
    1e1c:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e1e:	4b16      	ldr	r3, [pc, #88]	; (1e78 <Reset_Handler+0xdc>)
    1e20:	7b9e      	ldrb	r6, [r3, #14]
    1e22:	2530      	movs	r5, #48	; 0x30
    1e24:	43ae      	bics	r6, r5
    1e26:	2520      	movs	r5, #32
    1e28:	4335      	orrs	r5, r6
    1e2a:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e2c:	7b9d      	ldrb	r5, [r3, #14]
    1e2e:	43a5      	bics	r5, r4
    1e30:	4328      	orrs	r0, r5
    1e32:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e34:	7b98      	ldrb	r0, [r3, #14]
    1e36:	4388      	bics	r0, r1
    1e38:	4302      	orrs	r2, r0
    1e3a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e3c:	4b0f      	ldr	r3, [pc, #60]	; (1e7c <Reset_Handler+0xe0>)
    1e3e:	6859      	ldr	r1, [r3, #4]
    1e40:	2280      	movs	r2, #128	; 0x80
    1e42:	430a      	orrs	r2, r1
    1e44:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1e46:	4b0e      	ldr	r3, [pc, #56]	; (1e80 <Reset_Handler+0xe4>)
    1e48:	4798      	blx	r3

        /* Branch to main function */
        main();
    1e4a:	4b0e      	ldr	r3, [pc, #56]	; (1e84 <Reset_Handler+0xe8>)
    1e4c:	4798      	blx	r3
    1e4e:	e7fe      	b.n	1e4e <Reset_Handler+0xb2>
    1e50:	20000000 	.word	0x20000000
    1e54:	00007194 	.word	0x00007194
    1e58:	200000a8 	.word	0x200000a8
    1e5c:	200001d0 	.word	0x200001d0
    1e60:	200000a8 	.word	0x200000a8
    1e64:	20000004 	.word	0x20000004
    1e68:	e000ed00 	.word	0xe000ed00
    1e6c:	00000000 	.word	0x00000000
    1e70:	41007000 	.word	0x41007000
    1e74:	41005000 	.word	0x41005000
    1e78:	41004800 	.word	0x41004800
    1e7c:	41004000 	.word	0x41004000
    1e80:	00002331 	.word	0x00002331
    1e84:	00002051 	.word	0x00002051

00001e88 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8a:	4647      	mov	r7, r8
    1e8c:	b480      	push	{r7}
    1e8e:	1c0c      	adds	r4, r1, #0
    1e90:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1e92:	2800      	cmp	r0, #0
    1e94:	d10c      	bne.n	1eb0 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    1e96:	2a00      	cmp	r2, #0
    1e98:	dd0d      	ble.n	1eb6 <_read+0x2e>
    1e9a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1e9c:	4e09      	ldr	r6, [pc, #36]	; (1ec4 <_read+0x3c>)
    1e9e:	4d0a      	ldr	r5, [pc, #40]	; (1ec8 <_read+0x40>)
    1ea0:	6830      	ldr	r0, [r6, #0]
    1ea2:	1c21      	adds	r1, r4, #0
    1ea4:	682b      	ldr	r3, [r5, #0]
    1ea6:	4798      	blx	r3
		ptr++;
    1ea8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1eaa:	42bc      	cmp	r4, r7
    1eac:	d1f8      	bne.n	1ea0 <_read+0x18>
    1eae:	e004      	b.n	1eba <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1eb0:	2001      	movs	r0, #1
    1eb2:	4240      	negs	r0, r0
    1eb4:	e002      	b.n	1ebc <_read+0x34>
	}

	for (; len > 0; --len) {
    1eb6:	2000      	movs	r0, #0
    1eb8:	e000      	b.n	1ebc <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1eba:	4640      	mov	r0, r8
	}
	return nChars;
}
    1ebc:	bc04      	pop	{r2}
    1ebe:	4690      	mov	r8, r2
    1ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	2000012c 	.word	0x2000012c
    1ec8:	20000124 	.word	0x20000124

00001ecc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ece:	4647      	mov	r7, r8
    1ed0:	b480      	push	{r7}
    1ed2:	1c0e      	adds	r6, r1, #0
    1ed4:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1ed6:	3801      	subs	r0, #1
    1ed8:	2802      	cmp	r0, #2
    1eda:	d810      	bhi.n	1efe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1edc:	2a00      	cmp	r2, #0
    1ede:	d011      	beq.n	1f04 <_write+0x38>
    1ee0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1ee2:	4b0d      	ldr	r3, [pc, #52]	; (1f18 <_write+0x4c>)
    1ee4:	4698      	mov	r8, r3
    1ee6:	4f0d      	ldr	r7, [pc, #52]	; (1f1c <_write+0x50>)
    1ee8:	4643      	mov	r3, r8
    1eea:	6818      	ldr	r0, [r3, #0]
    1eec:	5d31      	ldrb	r1, [r6, r4]
    1eee:	683b      	ldr	r3, [r7, #0]
    1ef0:	4798      	blx	r3
    1ef2:	2800      	cmp	r0, #0
    1ef4:	db08      	blt.n	1f08 <_write+0x3c>
			return -1;
		}
		++nChars;
    1ef6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1ef8:	42a5      	cmp	r5, r4
    1efa:	d1f5      	bne.n	1ee8 <_write+0x1c>
    1efc:	e007      	b.n	1f0e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1efe:	2001      	movs	r0, #1
    1f00:	4240      	negs	r0, r0
    1f02:	e005      	b.n	1f10 <_write+0x44>
	}

	for (; len != 0; --len) {
    1f04:	2000      	movs	r0, #0
    1f06:	e003      	b.n	1f10 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1f08:	2001      	movs	r0, #1
    1f0a:	4240      	negs	r0, r0
    1f0c:	e000      	b.n	1f10 <_write+0x44>
		}
		++nChars;
    1f0e:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    1f10:	bc04      	pop	{r2}
    1f12:	4690      	mov	r8, r2
    1f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	2000012c 	.word	0x2000012c
    1f1c:	20000128 	.word	0x20000128

00001f20 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1f20:	4b06      	ldr	r3, [pc, #24]	; (1f3c <_sbrk+0x1c>)
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	2b00      	cmp	r3, #0
    1f26:	d102      	bne.n	1f2e <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1f28:	4a05      	ldr	r2, [pc, #20]	; (1f40 <_sbrk+0x20>)
    1f2a:	4b04      	ldr	r3, [pc, #16]	; (1f3c <_sbrk+0x1c>)
    1f2c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1f2e:	4a03      	ldr	r2, [pc, #12]	; (1f3c <_sbrk+0x1c>)
    1f30:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    1f32:	1818      	adds	r0, r3, r0
    1f34:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1f36:	1c18      	adds	r0, r3, #0
    1f38:	4770      	bx	lr
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	200000fc 	.word	0x200000fc
    1f40:	200021d0 	.word	0x200021d0

00001f44 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1f44:	2001      	movs	r0, #1
}
    1f46:	4240      	negs	r0, r0
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			; (mov r8, r8)

00001f4c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1f4c:	2380      	movs	r3, #128	; 0x80
    1f4e:	019b      	lsls	r3, r3, #6
    1f50:	604b      	str	r3, [r1, #4]

	return 0;
}
    1f52:	2000      	movs	r0, #0
    1f54:	4770      	bx	lr
    1f56:	46c0      	nop			; (mov r8, r8)

00001f58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1f58:	2001      	movs	r0, #1
    1f5a:	4770      	bx	lr

00001f5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1f5c:	2000      	movs	r0, #0
    1f5e:	4770      	bx	lr

00001f60 <adc_complete_callback>:
{
	//compute the average
	uint32_t avg = 0;
	for(uint8_t i=0;i<4;i++)
	{
		avg += adc_buffer[i];
    1f60:	4b05      	ldr	r3, [pc, #20]	; (1f78 <adc_complete_callback+0x18>)
    1f62:	8819      	ldrh	r1, [r3, #0]
    1f64:	885a      	ldrh	r2, [r3, #2]
    1f66:	188a      	adds	r2, r1, r2
    1f68:	8899      	ldrh	r1, [r3, #4]
    1f6a:	1852      	adds	r2, r2, r1
    1f6c:	88db      	ldrh	r3, [r3, #6]
    1f6e:	18d2      	adds	r2, r2, r3
	}
	
	avg >>= 2;
    1f70:	0892      	lsrs	r2, r2, #2
	
	adc_avg = avg;
    1f72:	4b02      	ldr	r3, [pc, #8]	; (1f7c <adc_complete_callback+0x1c>)
    1f74:	801a      	strh	r2, [r3, #0]
	
	//do something with the average
}
    1f76:	4770      	bx	lr
    1f78:	20000164 	.word	0x20000164
    1f7c:	20000100 	.word	0x20000100

00001f80 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1f80:	b570      	push	{r4, r5, r6, lr}
    1f82:	b082      	sub	sp, #8
    1f84:	1c05      	adds	r5, r0, #0
    1f86:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1f88:	2200      	movs	r2, #0
    1f8a:	466b      	mov	r3, sp
    1f8c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1f8e:	4c06      	ldr	r4, [pc, #24]	; (1fa8 <usart_serial_getchar+0x28>)
    1f90:	1c28      	adds	r0, r5, #0
    1f92:	4669      	mov	r1, sp
    1f94:	3106      	adds	r1, #6
    1f96:	47a0      	blx	r4
    1f98:	2800      	cmp	r0, #0
    1f9a:	d1f9      	bne.n	1f90 <usart_serial_getchar+0x10>

	*c = temp;
    1f9c:	466b      	mov	r3, sp
    1f9e:	3306      	adds	r3, #6
    1fa0:	881b      	ldrh	r3, [r3, #0]
    1fa2:	7033      	strb	r3, [r6, #0]
}
    1fa4:	b002      	add	sp, #8
    1fa6:	bd70      	pop	{r4, r5, r6, pc}
    1fa8:	0000160d 	.word	0x0000160d

00001fac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1fac:	b570      	push	{r4, r5, r6, lr}
    1fae:	1c06      	adds	r6, r0, #0
    1fb0:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    1fb2:	4c03      	ldr	r4, [pc, #12]	; (1fc0 <usart_serial_putchar+0x14>)
    1fb4:	1c30      	adds	r0, r6, #0
    1fb6:	1c29      	adds	r1, r5, #0
    1fb8:	47a0      	blx	r4
    1fba:	2800      	cmp	r0, #0
    1fbc:	d1fa      	bne.n	1fb4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
    1fc0:	000015e1 	.word	0x000015e1

00001fc4 <configure_adc>:

void configure_adc(void)
{
    1fc4:	b510      	push	{r4, lr}
    1fc6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    1fc8:	4668      	mov	r0, sp
    1fca:	4b19      	ldr	r3, [pc, #100]	; (2030 <STACK_SIZE+0x30>)
    1fcc:	4798      	blx	r3
	
	config_adc.gain_factor = ADC_GAIN_FACTOR_1X;
    1fce:	2300      	movs	r3, #0
    1fd0:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    1fd2:	2280      	movs	r2, #128	; 0x80
    1fd4:	0052      	lsls	r2, r2, #1
    1fd6:	4669      	mov	r1, sp
    1fd8:	804a      	strh	r2, [r1, #2]
	//Select reference
	config_adc.reference = ADC_REFCTRL_REFSEL_AREFA;
    1fda:	2203      	movs	r2, #3
    1fdc:	704a      	strb	r2, [r1, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    1fde:	730b      	strb	r3, [r1, #12]
	config_adc.resolution = ADC_RESOLUTION_16BIT;
    1fe0:	2310      	movs	r3, #16
    1fe2:	710b      	strb	r3, [r1, #4]
	
	adc_init(&adc_instance, ADC, &config_adc);
    1fe4:	4c13      	ldr	r4, [pc, #76]	; (2034 <STACK_SIZE+0x34>)
    1fe6:	1c20      	adds	r0, r4, #0
    1fe8:	4913      	ldr	r1, [pc, #76]	; (2038 <STACK_SIZE+0x38>)
    1fea:	466a      	mov	r2, sp
    1fec:	4b13      	ldr	r3, [pc, #76]	; (203c <STACK_SIZE+0x3c>)
    1fee:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1ff0:	6823      	ldr	r3, [r4, #0]
    1ff2:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    1ff4:	b252      	sxtb	r2, r2
    1ff6:	2a00      	cmp	r2, #0
    1ff8:	dbfb      	blt.n	1ff2 <configure_adc+0x2e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ffa:	2180      	movs	r1, #128	; 0x80
    1ffc:	0409      	lsls	r1, r1, #16
    1ffe:	4a10      	ldr	r2, [pc, #64]	; (2040 <STACK_SIZE+0x40>)
    2000:	6011      	str	r1, [r2, #0]
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2002:	7819      	ldrb	r1, [r3, #0]
    2004:	2202      	movs	r2, #2
    2006:	430a      	orrs	r2, r1
    2008:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    200a:	4b0a      	ldr	r3, [pc, #40]	; (2034 <STACK_SIZE+0x34>)
    200c:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    200e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2010:	b25b      	sxtb	r3, r3
    2012:	2b00      	cmp	r3, #0
    2014:	dbfb      	blt.n	200e <STACK_SIZE+0xe>
	
	adc_enable(&adc_instance);
	
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    2016:	4c07      	ldr	r4, [pc, #28]	; (2034 <STACK_SIZE+0x34>)
    2018:	1c20      	adds	r0, r4, #0
    201a:	490a      	ldr	r1, [pc, #40]	; (2044 <STACK_SIZE+0x44>)
    201c:	2200      	movs	r2, #0
    201e:	4b0a      	ldr	r3, [pc, #40]	; (2048 <STACK_SIZE+0x48>)
    2020:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    2022:	7ee2      	ldrb	r2, [r4, #27]
    2024:	2301      	movs	r3, #1
    2026:	4313      	orrs	r3, r2
    2028:	76e3      	strb	r3, [r4, #27]
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
}
    202a:	b00c      	add	sp, #48	; 0x30
    202c:	bd10      	pop	{r4, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00000179 	.word	0x00000179
    2034:	200001ac 	.word	0x200001ac
    2038:	42004000 	.word	0x42004000
    203c:	000001c1 	.word	0x000001c1
    2040:	e000e100 	.word	0xe000e100
    2044:	00001f61 	.word	0x00001f61
    2048:	000006b5 	.word	0x000006b5
    204c:	00000000 	.word	0x00000000

00002050 <main>:

int main (void)
{
    2050:	b5f0      	push	{r4, r5, r6, r7, lr}
    2052:	465f      	mov	r7, fp
    2054:	4656      	mov	r6, sl
    2056:	464d      	mov	r5, r9
    2058:	4644      	mov	r4, r8
    205a:	b4f0      	push	{r4, r5, r6, r7}
    205c:	b093      	sub	sp, #76	; 0x4c
	
	system_init();
    205e:	4b8a      	ldr	r3, [pc, #552]	; (2288 <main+0x238>)
    2060:	4798      	blx	r3
	delay_init();
    2062:	4b8a      	ldr	r3, [pc, #552]	; (228c <main+0x23c>)
    2064:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2066:	2380      	movs	r3, #128	; 0x80
    2068:	05db      	lsls	r3, r3, #23
    206a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    206c:	2300      	movs	r3, #0
    206e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2070:	22ff      	movs	r2, #255	; 0xff
    2072:	4668      	mov	r0, sp
    2074:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    2076:	2200      	movs	r2, #0
    2078:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    207a:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    207c:	2196      	movs	r1, #150	; 0x96
    207e:	0189      	lsls	r1, r1, #6
    2080:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2082:	2101      	movs	r1, #1
    2084:	2024      	movs	r0, #36	; 0x24
    2086:	466c      	mov	r4, sp
    2088:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    208a:	2025      	movs	r0, #37	; 0x25
    208c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    208e:	2126      	movs	r1, #38	; 0x26
    2090:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2092:	2127      	movs	r1, #39	; 0x27
    2094:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2096:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    2098:	2188      	movs	r1, #136	; 0x88
    209a:	0349      	lsls	r1, r1, #13
    209c:	9103      	str	r1, [sp, #12]
	config->run_in_standby   = false;
    209e:	212c      	movs	r1, #44	; 0x2c
    20a0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    20a2:	212d      	movs	r1, #45	; 0x2d
    20a4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    20a6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    20a8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    20aa:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    20ac:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    20ae:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    20b0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    20b2:	2313      	movs	r3, #19
    20b4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    20b6:	7762      	strb	r2, [r4, #29]
static void init_uart0(void)
{
	struct usart_config uart_settings;
	usart_get_config_defaults(&uart_settings);
	uart_settings.mux_setting = USART_RX_1_TX_2_XCK_3;
	uart_settings.pinmux_pad0 = PINMUX_PA24C_SERCOM3_PAD2; // Tx
    20b8:	4b75      	ldr	r3, [pc, #468]	; (2290 <main+0x240>)
    20ba:	930c      	str	r3, [sp, #48]	; 0x30
	uart_settings.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; // Rx
    20bc:	4b75      	ldr	r3, [pc, #468]	; (2294 <main+0x244>)
    20be:	930d      	str	r3, [sp, #52]	; 0x34
	uart_settings.pinmux_pad2 = PINMUX_UNUSED;
    20c0:	2301      	movs	r3, #1
    20c2:	425b      	negs	r3, r3
    20c4:	930e      	str	r3, [sp, #56]	; 0x38
	uart_settings.pinmux_pad3 = PINMUX_UNUSED;
    20c6:	930f      	str	r3, [sp, #60]	; 0x3c
	uart_settings.baudrate = 9600;
	while (usart_init(&usart_instance, SERCOM3, &uart_settings) != STATUS_OK){}
    20c8:	4e73      	ldr	r6, [pc, #460]	; (2298 <main+0x248>)
    20ca:	4d74      	ldr	r5, [pc, #464]	; (229c <main+0x24c>)
    20cc:	4c74      	ldr	r4, [pc, #464]	; (22a0 <main+0x250>)
    20ce:	1c30      	adds	r0, r6, #0
    20d0:	1c29      	adds	r1, r5, #0
    20d2:	466a      	mov	r2, sp
    20d4:	47a0      	blx	r4
    20d6:	2800      	cmp	r0, #0
    20d8:	d1f9      	bne.n	20ce <main+0x7e>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    20da:	4c6f      	ldr	r4, [pc, #444]	; (2298 <main+0x248>)
    20dc:	4b71      	ldr	r3, [pc, #452]	; (22a4 <main+0x254>)
    20de:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    20e0:	4a71      	ldr	r2, [pc, #452]	; (22a8 <main+0x258>)
    20e2:	4b72      	ldr	r3, [pc, #456]	; (22ac <main+0x25c>)
    20e4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    20e6:	4a72      	ldr	r2, [pc, #456]	; (22b0 <main+0x260>)
    20e8:	4b72      	ldr	r3, [pc, #456]	; (22b4 <main+0x264>)
    20ea:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    20ec:	1c20      	adds	r0, r4, #0
    20ee:	496b      	ldr	r1, [pc, #428]	; (229c <main+0x24c>)
    20f0:	466a      	mov	r2, sp
    20f2:	4b6b      	ldr	r3, [pc, #428]	; (22a0 <main+0x250>)
    20f4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    20f6:	4e70      	ldr	r6, [pc, #448]	; (22b8 <main+0x268>)
    20f8:	6833      	ldr	r3, [r6, #0]
    20fa:	6898      	ldr	r0, [r3, #8]
    20fc:	2100      	movs	r1, #0
    20fe:	4d6f      	ldr	r5, [pc, #444]	; (22bc <main+0x26c>)
    2100:	47a8      	blx	r5
	setbuf(stdin, NULL);
    2102:	6833      	ldr	r3, [r6, #0]
    2104:	6858      	ldr	r0, [r3, #4]
    2106:	2100      	movs	r1, #0
    2108:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    210a:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    210c:	1c28      	adds	r0, r5, #0
    210e:	4b6c      	ldr	r3, [pc, #432]	; (22c0 <main+0x270>)
    2110:	4798      	blx	r3
    2112:	221f      	movs	r2, #31
    2114:	4010      	ands	r0, r2
    2116:	2201      	movs	r2, #1
    2118:	4082      	lsls	r2, r0
    211a:	4b6a      	ldr	r3, [pc, #424]	; (22c4 <main+0x274>)
    211c:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    211e:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2120:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2122:	2a00      	cmp	r2, #0
    2124:	d1fc      	bne.n	2120 <main+0xd0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2126:	682a      	ldr	r2, [r5, #0]
    2128:	2302      	movs	r3, #2
    212a:	4313      	orrs	r3, r2
    212c:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    212e:	a911      	add	r1, sp, #68	; 0x44
    2130:	2501      	movs	r5, #1
    2132:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    2134:	2400      	movs	r4, #0
    2136:	708c      	strb	r4, [r1, #2]
	struct port_config pinconf;
		
	
	//led_sys
	port_get_config_defaults(&pinconf);
	pinconf.direction = PORT_PIN_DIR_OUTPUT;
    2138:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(LED_SYS, &pinconf);
    213a:	2002      	movs	r0, #2
    213c:	4f62      	ldr	r7, [pc, #392]	; (22c8 <main+0x278>)
    213e:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2140:	a910      	add	r1, sp, #64	; 0x40
    2142:	704c      	strb	r4, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2144:	70cc      	strb	r4, [r1, #3]
	/* Configure analog pins */
	struct system_pinmux_config config;
	system_pinmux_get_config_defaults(&config);
	
	/* Analog functions are all on MUX setting B */
	config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2146:	708c      	strb	r4, [r1, #2]
	config.mux_position = MUX_PA03B_DAC_VREFP;
    2148:	700d      	strb	r5, [r1, #0]
	
	system_pinmux_pin_set_config(PIN_PA03, &config);
    214a:	2003      	movs	r0, #3
    214c:	4b5f      	ldr	r3, [pc, #380]	; (22cc <main+0x27c>)
    214e:	4798      	blx	r3

	
	
	configure_adc();
    2150:	4b5f      	ldr	r3, [pc, #380]	; (22d0 <main+0x280>)
    2152:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2154:	4e5f      	ldr	r6, [pc, #380]	; (22d4 <main+0x284>)
    2156:	2309      	movs	r3, #9
    2158:	7033      	strb	r3, [r6, #0]
	slave->address_enabled = config->address_enabled;
    215a:	7074      	strb	r4, [r6, #1]
	slave->address         = config->address;
    215c:	70b4      	strb	r4, [r6, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    215e:	4669      	mov	r1, sp
    2160:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    2162:	708c      	strb	r4, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2164:	700d      	strb	r5, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2166:	2009      	movs	r0, #9
    2168:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    216a:	7833      	ldrb	r3, [r6, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    216c:	0959      	lsrs	r1, r3, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    216e:	09d8      	lsrs	r0, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2170:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2172:	2800      	cmp	r0, #0
    2174:	d102      	bne.n	217c <main+0x12c>
		return &(ports[port_index]->Group[group_index]);
    2176:	01ca      	lsls	r2, r1, #7
    2178:	4c57      	ldr	r4, [pc, #348]	; (22d8 <main+0x288>)
    217a:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    217c:	271f      	movs	r7, #31
    217e:	403b      	ands	r3, r7
    2180:	2401      	movs	r4, #1
    2182:	1c20      	adds	r0, r4, #0
    2184:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2186:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2188:	4669      	mov	r1, sp
    218a:	700c      	strb	r4, [r1, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    218c:	2300      	movs	r3, #0
    218e:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2190:	9302      	str	r3, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_E;	//do pad 1, di pad 0
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	0252      	lsls	r2, r2, #9
    2196:	9203      	str	r2, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2198:	740b      	strb	r3, [r1, #16]
	config->run_in_standby   = false;
    219a:	744b      	strb	r3, [r1, #17]
	config->receiver_enable  = true;
    219c:	748c      	strb	r4, [r1, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    219e:	74cc      	strb	r4, [r1, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    21a0:	750b      	strb	r3, [r1, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    21a2:	2224      	movs	r2, #36	; 0x24
    21a4:	548b      	strb	r3, [r1, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    21a6:	9307      	str	r3, [sp, #28]
    21a8:	9308      	str	r3, [sp, #32]

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    21aa:	4b4c      	ldr	r3, [pc, #304]	; (22dc <main+0x28c>)
    21ac:	9306      	str	r3, [sp, #24]
	spi_get_config_defaults(&config_spi_master);
	
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
	
	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = PINMUX_UNUSED;
    21ae:	2301      	movs	r3, #1
    21b0:	425b      	negs	r3, r3
    21b2:	930a      	str	r3, [sp, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    21b4:	930b      	str	r3, [sp, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
    21b6:	4b4a      	ldr	r3, [pc, #296]	; (22e0 <main+0x290>)
    21b8:	930c      	str	r3, [sp, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
    21ba:	4b4a      	ldr	r3, [pc, #296]	; (22e4 <main+0x294>)
    21bc:	930d      	str	r3, [sp, #52]	; 0x34
	
	spi_init(&spi_master_instance, SERCOM0, &config_spi_master);
    21be:	4e4a      	ldr	r6, [pc, #296]	; (22e8 <main+0x298>)
    21c0:	1c30      	adds	r0, r6, #0
    21c2:	494a      	ldr	r1, [pc, #296]	; (22ec <main+0x29c>)
    21c4:	466a      	mov	r2, sp
    21c6:	4b4a      	ldr	r3, [pc, #296]	; (22f0 <main+0x2a0>)
    21c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21ca:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    21cc:	1c28      	adds	r0, r5, #0
    21ce:	4b3c      	ldr	r3, [pc, #240]	; (22c0 <main+0x270>)
    21d0:	4798      	blx	r3
    21d2:	4007      	ands	r7, r0
    21d4:	40bc      	lsls	r4, r7
    21d6:	4b3b      	ldr	r3, [pc, #236]	; (22c4 <main+0x274>)
    21d8:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21da:	6833      	ldr	r3, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    21dc:	69da      	ldr	r2, [r3, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    21de:	2a00      	cmp	r2, #0
    21e0:	d1fc      	bne.n	21dc <main+0x18c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    21e2:	682a      	ldr	r2, [r5, #0]
    21e4:	2302      	movs	r3, #2
    21e6:	4313      	orrs	r3, r2
    21e8:	602b      	str	r3, [r5, #0]
		//if(!port_pin_get_input_level(BUTTON_0_PIN)) {
// 			spi_select_slave(&spi_master_instance, &slave, true);
// 			spi_write_buffer_wait(&spi_master_instance, buffer, BUF_LENGTH);
// 			spi_select_slave(&spi_master_instance, &slave, false);
			
			for (int i = 0; i < 8; i++)
    21ea:	2600      	movs	r6, #0
				spi_write_buffer_wait(&spi_master_instance, &buf, 1);
				spi_select_slave(&spi_master_instance, &slave, false);
				delay_ms(500);
			}
			
			printf("woo!!\n\r");
    21ec:	4a41      	ldr	r2, [pc, #260]	; (22f4 <main+0x2a4>)
    21ee:	4693      	mov	fp, r2
			adc_read_buffer_job(&adc_instance,adc_buffer,4);
			
			port_pin_set_output_level(LED_SYS, true);
			delay_ms(100);
			
			printf("Read adc value is %f\n\r", (float)adc_avg/UINT16_MAX*3.3);
    21f0:	4b41      	ldr	r3, [pc, #260]	; (22f8 <main+0x2a8>)
    21f2:	469a      	mov	sl, r3
    21f4:	e01a      	b.n	222c <main+0x1dc>
// 			spi_write_buffer_wait(&spi_master_instance, buffer, BUF_LENGTH);
// 			spi_select_slave(&spi_master_instance, &slave, false);
			
			for (int i = 0; i < 8; i++)
			{
				spi_select_slave(&spi_master_instance, &slave, true);
    21f6:	4f3c      	ldr	r7, [pc, #240]	; (22e8 <main+0x298>)
    21f8:	4c36      	ldr	r4, [pc, #216]	; (22d4 <main+0x284>)
    21fa:	46a1      	mov	r9, r4
    21fc:	1c38      	adds	r0, r7, #0
    21fe:	1c21      	adds	r1, r4, #0
    2200:	2201      	movs	r2, #1
    2202:	4b3e      	ldr	r3, [pc, #248]	; (22fc <main+0x2ac>)
    2204:	4698      	mov	r8, r3
    2206:	4798      	blx	r3
				uint8_t buf;
				buf = 1 << i;
    2208:	2301      	movs	r3, #1
    220a:	40b3      	lsls	r3, r6
    220c:	466c      	mov	r4, sp
    220e:	7023      	strb	r3, [r4, #0]
				spi_write_buffer_wait(&spi_master_instance, &buf, 1);
    2210:	1c38      	adds	r0, r7, #0
    2212:	4669      	mov	r1, sp
    2214:	2201      	movs	r2, #1
    2216:	4b3a      	ldr	r3, [pc, #232]	; (2300 <main+0x2b0>)
    2218:	4798      	blx	r3
				spi_select_slave(&spi_master_instance, &slave, false);
    221a:	1c38      	adds	r0, r7, #0
    221c:	4649      	mov	r1, r9
    221e:	2200      	movs	r2, #0
    2220:	47c0      	blx	r8
				delay_ms(500);
    2222:	20fa      	movs	r0, #250	; 0xfa
    2224:	0040      	lsls	r0, r0, #1
    2226:	4b37      	ldr	r3, [pc, #220]	; (2304 <main+0x2b4>)
    2228:	4798      	blx	r3
		//if(!port_pin_get_input_level(BUTTON_0_PIN)) {
// 			spi_select_slave(&spi_master_instance, &slave, true);
// 			spi_write_buffer_wait(&spi_master_instance, buffer, BUF_LENGTH);
// 			spi_select_slave(&spi_master_instance, &slave, false);
			
			for (int i = 0; i < 8; i++)
    222a:	3601      	adds	r6, #1
    222c:	2e07      	cmp	r6, #7
    222e:	dde2      	ble.n	21f6 <main+0x1a6>
				spi_write_buffer_wait(&spi_master_instance, &buf, 1);
				spi_select_slave(&spi_master_instance, &slave, false);
				delay_ms(500);
			}
			
			printf("woo!!\n\r");
    2230:	4658      	mov	r0, fp
    2232:	4935      	ldr	r1, [pc, #212]	; (2308 <main+0x2b8>)
    2234:	4689      	mov	r9, r1
    2236:	4788      	blx	r1
			adc_read_buffer_job(&adc_instance,adc_buffer,4);
    2238:	4834      	ldr	r0, [pc, #208]	; (230c <main+0x2bc>)
    223a:	4935      	ldr	r1, [pc, #212]	; (2310 <main+0x2c0>)
    223c:	2204      	movs	r2, #4
    223e:	4b35      	ldr	r3, [pc, #212]	; (2314 <main+0x2c4>)
    2240:	4798      	blx	r3
    2242:	4f25      	ldr	r7, [pc, #148]	; (22d8 <main+0x288>)
    2244:	2204      	movs	r2, #4
    2246:	4690      	mov	r8, r2
    2248:	61ba      	str	r2, [r7, #24]
			
			port_pin_set_output_level(LED_SYS, true);
			delay_ms(100);
    224a:	2064      	movs	r0, #100	; 0x64
    224c:	4e2d      	ldr	r6, [pc, #180]	; (2304 <main+0x2b4>)
    224e:	47b0      	blx	r6
			
			printf("Read adc value is %f\n\r", (float)adc_avg/UINT16_MAX*3.3);
    2250:	4b31      	ldr	r3, [pc, #196]	; (2318 <main+0x2c8>)
    2252:	8818      	ldrh	r0, [r3, #0]
    2254:	4b31      	ldr	r3, [pc, #196]	; (231c <main+0x2cc>)
    2256:	4798      	blx	r3
    2258:	4651      	mov	r1, sl
    225a:	4b31      	ldr	r3, [pc, #196]	; (2320 <main+0x2d0>)
    225c:	4798      	blx	r3
    225e:	4b31      	ldr	r3, [pc, #196]	; (2324 <main+0x2d4>)
    2260:	4798      	blx	r3
    2262:	4b08      	ldr	r3, [pc, #32]	; (2284 <main+0x234>)
    2264:	4a06      	ldr	r2, [pc, #24]	; (2280 <main+0x230>)
    2266:	4c30      	ldr	r4, [pc, #192]	; (2328 <main+0x2d8>)
    2268:	47a0      	blx	r4
    226a:	1c02      	adds	r2, r0, #0
    226c:	1c0b      	adds	r3, r1, #0
    226e:	482f      	ldr	r0, [pc, #188]	; (232c <main+0x2dc>)
    2270:	47c8      	blx	r9
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2272:	4640      	mov	r0, r8
    2274:	6178      	str	r0, [r7, #20]
			
			port_pin_set_output_level(LED_SYS, false);
			delay_ms(100);
    2276:	2064      	movs	r0, #100	; 0x64
    2278:	47b0      	blx	r6
		//if(!port_pin_get_input_level(BUTTON_0_PIN)) {
// 			spi_select_slave(&spi_master_instance, &slave, true);
// 			spi_write_buffer_wait(&spi_master_instance, buffer, BUF_LENGTH);
// 			spi_select_slave(&spi_master_instance, &slave, false);
			
			for (int i = 0; i < 8; i++)
    227a:	2600      	movs	r6, #0
			
			port_pin_set_output_level(LED_SYS, false);
			delay_ms(100);
			
		//}
	}
    227c:	e7d6      	b.n	222c <main+0x1dc>
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	66666666 	.word	0x66666666
    2284:	400a6666 	.word	0x400a6666
    2288:	00001d6d 	.word	0x00001d6d
    228c:	00000111 	.word	0x00000111
    2290:	00180002 	.word	0x00180002
    2294:	00170002 	.word	0x00170002
    2298:	20000130 	.word	0x20000130
    229c:	42001400 	.word	0x42001400
    22a0:	000012e9 	.word	0x000012e9
    22a4:	2000012c 	.word	0x2000012c
    22a8:	00001fad 	.word	0x00001fad
    22ac:	20000128 	.word	0x20000128
    22b0:	00001f81 	.word	0x00001f81
    22b4:	20000124 	.word	0x20000124
    22b8:	2000006c 	.word	0x2000006c
    22bc:	000023d5 	.word	0x000023d5
    22c0:	00001209 	.word	0x00001209
    22c4:	e000e100 	.word	0xe000e100
    22c8:	00000715 	.word	0x00000715
    22cc:	00001d3d 	.word	0x00001d3d
    22d0:	00001fc5 	.word	0x00001fc5
    22d4:	200001a8 	.word	0x200001a8
    22d8:	41004400 	.word	0x41004400
    22dc:	000186a0 	.word	0x000186a0
    22e0:	000a0002 	.word	0x000a0002
    22e4:	000b0002 	.word	0x000b0002
    22e8:	2000016c 	.word	0x2000016c
    22ec:	42000800 	.word	0x42000800
    22f0:	00000aad 	.word	0x00000aad
    22f4:	00006ed0 	.word	0x00006ed0
    22f8:	477fff00 	.word	0x477fff00
    22fc:	00000cc5 	.word	0x00000cc5
    2300:	00000db1 	.word	0x00000db1
    2304:	0000014d 	.word	0x0000014d
    2308:	000023a1 	.word	0x000023a1
    230c:	200001ac 	.word	0x200001ac
    2310:	20000164 	.word	0x20000164
    2314:	000006c9 	.word	0x000006c9
    2318:	20000100 	.word	0x20000100
    231c:	00004fe5 	.word	0x00004fe5
    2320:	00004d99 	.word	0x00004d99
    2324:	00006c71 	.word	0x00006c71
    2328:	00005f9d 	.word	0x00005f9d
    232c:	00006ed8 	.word	0x00006ed8

00002330 <__libc_init_array>:
    2330:	b570      	push	{r4, r5, r6, lr}
    2332:	4b0e      	ldr	r3, [pc, #56]	; (236c <__libc_init_array+0x3c>)
    2334:	4d0e      	ldr	r5, [pc, #56]	; (2370 <__libc_init_array+0x40>)
    2336:	2400      	movs	r4, #0
    2338:	1aed      	subs	r5, r5, r3
    233a:	10ad      	asrs	r5, r5, #2
    233c:	1c1e      	adds	r6, r3, #0
    233e:	42ac      	cmp	r4, r5
    2340:	d004      	beq.n	234c <__libc_init_array+0x1c>
    2342:	00a3      	lsls	r3, r4, #2
    2344:	58f3      	ldr	r3, [r6, r3]
    2346:	4798      	blx	r3
    2348:	3401      	adds	r4, #1
    234a:	e7f8      	b.n	233e <__libc_init_array+0xe>
    234c:	f004 ff12 	bl	7174 <_init>
    2350:	4b08      	ldr	r3, [pc, #32]	; (2374 <__libc_init_array+0x44>)
    2352:	4d09      	ldr	r5, [pc, #36]	; (2378 <__libc_init_array+0x48>)
    2354:	2400      	movs	r4, #0
    2356:	1aed      	subs	r5, r5, r3
    2358:	10ad      	asrs	r5, r5, #2
    235a:	1c1e      	adds	r6, r3, #0
    235c:	42ac      	cmp	r4, r5
    235e:	d004      	beq.n	236a <__libc_init_array+0x3a>
    2360:	00a3      	lsls	r3, r4, #2
    2362:	58f3      	ldr	r3, [r6, r3]
    2364:	4798      	blx	r3
    2366:	3401      	adds	r4, #1
    2368:	e7f8      	b.n	235c <__libc_init_array+0x2c>
    236a:	bd70      	pop	{r4, r5, r6, pc}
    236c:	00007180 	.word	0x00007180
    2370:	00007180 	.word	0x00007180
    2374:	00007180 	.word	0x00007180
    2378:	00007184 	.word	0x00007184

0000237c <memcpy>:
    237c:	b510      	push	{r4, lr}
    237e:	2300      	movs	r3, #0
    2380:	4293      	cmp	r3, r2
    2382:	d003      	beq.n	238c <memcpy+0x10>
    2384:	5ccc      	ldrb	r4, [r1, r3]
    2386:	54c4      	strb	r4, [r0, r3]
    2388:	3301      	adds	r3, #1
    238a:	e7f9      	b.n	2380 <memcpy+0x4>
    238c:	bd10      	pop	{r4, pc}

0000238e <memset>:
    238e:	1c03      	adds	r3, r0, #0
    2390:	1882      	adds	r2, r0, r2
    2392:	4293      	cmp	r3, r2
    2394:	d002      	beq.n	239c <memset+0xe>
    2396:	7019      	strb	r1, [r3, #0]
    2398:	3301      	adds	r3, #1
    239a:	e7fa      	b.n	2392 <memset+0x4>
    239c:	4770      	bx	lr
	...

000023a0 <iprintf>:
    23a0:	b40f      	push	{r0, r1, r2, r3}
    23a2:	4b0b      	ldr	r3, [pc, #44]	; (23d0 <iprintf+0x30>)
    23a4:	b513      	push	{r0, r1, r4, lr}
    23a6:	681c      	ldr	r4, [r3, #0]
    23a8:	2c00      	cmp	r4, #0
    23aa:	d005      	beq.n	23b8 <iprintf+0x18>
    23ac:	69a3      	ldr	r3, [r4, #24]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d102      	bne.n	23b8 <iprintf+0x18>
    23b2:	1c20      	adds	r0, r4, #0
    23b4:	f001 fe62 	bl	407c <__sinit>
    23b8:	ab05      	add	r3, sp, #20
    23ba:	68a1      	ldr	r1, [r4, #8]
    23bc:	1c20      	adds	r0, r4, #0
    23be:	9a04      	ldr	r2, [sp, #16]
    23c0:	9301      	str	r3, [sp, #4]
    23c2:	f000 f8bf 	bl	2544 <_vfiprintf_r>
    23c6:	bc16      	pop	{r1, r2, r4}
    23c8:	bc08      	pop	{r3}
    23ca:	b004      	add	sp, #16
    23cc:	4718      	bx	r3
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	2000006c 	.word	0x2000006c

000023d4 <setbuf>:
    23d4:	b508      	push	{r3, lr}
    23d6:	424a      	negs	r2, r1
    23d8:	414a      	adcs	r2, r1
    23da:	2380      	movs	r3, #128	; 0x80
    23dc:	0052      	lsls	r2, r2, #1
    23de:	00db      	lsls	r3, r3, #3
    23e0:	f000 f802 	bl	23e8 <setvbuf>
    23e4:	bd08      	pop	{r3, pc}
	...

000023e8 <setvbuf>:
    23e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23ea:	1c1e      	adds	r6, r3, #0
    23ec:	4b3c      	ldr	r3, [pc, #240]	; (24e0 <setvbuf+0xf8>)
    23ee:	1c04      	adds	r4, r0, #0
    23f0:	681d      	ldr	r5, [r3, #0]
    23f2:	1c0f      	adds	r7, r1, #0
    23f4:	9201      	str	r2, [sp, #4]
    23f6:	2d00      	cmp	r5, #0
    23f8:	d005      	beq.n	2406 <setvbuf+0x1e>
    23fa:	69aa      	ldr	r2, [r5, #24]
    23fc:	2a00      	cmp	r2, #0
    23fe:	d102      	bne.n	2406 <setvbuf+0x1e>
    2400:	1c28      	adds	r0, r5, #0
    2402:	f001 fe3b 	bl	407c <__sinit>
    2406:	4b37      	ldr	r3, [pc, #220]	; (24e4 <setvbuf+0xfc>)
    2408:	429c      	cmp	r4, r3
    240a:	d101      	bne.n	2410 <setvbuf+0x28>
    240c:	686c      	ldr	r4, [r5, #4]
    240e:	e008      	b.n	2422 <setvbuf+0x3a>
    2410:	4b35      	ldr	r3, [pc, #212]	; (24e8 <setvbuf+0x100>)
    2412:	429c      	cmp	r4, r3
    2414:	d101      	bne.n	241a <setvbuf+0x32>
    2416:	68ac      	ldr	r4, [r5, #8]
    2418:	e003      	b.n	2422 <setvbuf+0x3a>
    241a:	4b34      	ldr	r3, [pc, #208]	; (24ec <setvbuf+0x104>)
    241c:	429c      	cmp	r4, r3
    241e:	d100      	bne.n	2422 <setvbuf+0x3a>
    2420:	68ec      	ldr	r4, [r5, #12]
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	2b02      	cmp	r3, #2
    2426:	d857      	bhi.n	24d8 <setvbuf+0xf0>
    2428:	2e00      	cmp	r6, #0
    242a:	db55      	blt.n	24d8 <setvbuf+0xf0>
    242c:	1c28      	adds	r0, r5, #0
    242e:	1c21      	adds	r1, r4, #0
    2430:	f001 fda4 	bl	3f7c <_fflush_r>
    2434:	2300      	movs	r3, #0
    2436:	6063      	str	r3, [r4, #4]
    2438:	61a3      	str	r3, [r4, #24]
    243a:	89a3      	ldrh	r3, [r4, #12]
    243c:	061a      	lsls	r2, r3, #24
    243e:	d503      	bpl.n	2448 <setvbuf+0x60>
    2440:	1c28      	adds	r0, r5, #0
    2442:	6921      	ldr	r1, [r4, #16]
    2444:	f002 f9f0 	bl	4828 <_free_r>
    2448:	89a3      	ldrh	r3, [r4, #12]
    244a:	2283      	movs	r2, #131	; 0x83
    244c:	4393      	bics	r3, r2
    244e:	81a3      	strh	r3, [r4, #12]
    2450:	9b01      	ldr	r3, [sp, #4]
    2452:	2b02      	cmp	r3, #2
    2454:	d013      	beq.n	247e <setvbuf+0x96>
    2456:	2f00      	cmp	r7, #0
    2458:	d125      	bne.n	24a6 <setvbuf+0xbe>
    245a:	2e00      	cmp	r6, #0
    245c:	d101      	bne.n	2462 <setvbuf+0x7a>
    245e:	2680      	movs	r6, #128	; 0x80
    2460:	00f6      	lsls	r6, r6, #3
    2462:	1c30      	adds	r0, r6, #0
    2464:	f001 fece 	bl	4204 <malloc>
    2468:	1e07      	subs	r7, r0, #0
    246a:	d118      	bne.n	249e <setvbuf+0xb6>
    246c:	2080      	movs	r0, #128	; 0x80
    246e:	00c0      	lsls	r0, r0, #3
    2470:	f001 fec8 	bl	4204 <malloc>
    2474:	1e07      	subs	r7, r0, #0
    2476:	d110      	bne.n	249a <setvbuf+0xb2>
    2478:	2001      	movs	r0, #1
    247a:	4240      	negs	r0, r0
    247c:	e000      	b.n	2480 <setvbuf+0x98>
    247e:	2000      	movs	r0, #0
    2480:	89a3      	ldrh	r3, [r4, #12]
    2482:	2202      	movs	r2, #2
    2484:	4313      	orrs	r3, r2
    2486:	81a3      	strh	r3, [r4, #12]
    2488:	2300      	movs	r3, #0
    248a:	60a3      	str	r3, [r4, #8]
    248c:	1c23      	adds	r3, r4, #0
    248e:	3347      	adds	r3, #71	; 0x47
    2490:	6023      	str	r3, [r4, #0]
    2492:	6123      	str	r3, [r4, #16]
    2494:	2301      	movs	r3, #1
    2496:	6163      	str	r3, [r4, #20]
    2498:	e020      	b.n	24dc <setvbuf+0xf4>
    249a:	2680      	movs	r6, #128	; 0x80
    249c:	00f6      	lsls	r6, r6, #3
    249e:	89a3      	ldrh	r3, [r4, #12]
    24a0:	2280      	movs	r2, #128	; 0x80
    24a2:	4313      	orrs	r3, r2
    24a4:	81a3      	strh	r3, [r4, #12]
    24a6:	9a01      	ldr	r2, [sp, #4]
    24a8:	2a01      	cmp	r2, #1
    24aa:	d104      	bne.n	24b6 <setvbuf+0xce>
    24ac:	89a3      	ldrh	r3, [r4, #12]
    24ae:	4313      	orrs	r3, r2
    24b0:	81a3      	strh	r3, [r4, #12]
    24b2:	4273      	negs	r3, r6
    24b4:	61a3      	str	r3, [r4, #24]
    24b6:	4b0e      	ldr	r3, [pc, #56]	; (24f0 <setvbuf+0x108>)
    24b8:	2000      	movs	r0, #0
    24ba:	62ab      	str	r3, [r5, #40]	; 0x28
    24bc:	89a3      	ldrh	r3, [r4, #12]
    24be:	6027      	str	r7, [r4, #0]
    24c0:	6127      	str	r7, [r4, #16]
    24c2:	6166      	str	r6, [r4, #20]
    24c4:	071a      	lsls	r2, r3, #28
    24c6:	d509      	bpl.n	24dc <setvbuf+0xf4>
    24c8:	2203      	movs	r2, #3
    24ca:	4013      	ands	r3, r2
    24cc:	425a      	negs	r2, r3
    24ce:	4153      	adcs	r3, r2
    24d0:	425b      	negs	r3, r3
    24d2:	401e      	ands	r6, r3
    24d4:	60a6      	str	r6, [r4, #8]
    24d6:	e001      	b.n	24dc <setvbuf+0xf4>
    24d8:	2001      	movs	r0, #1
    24da:	4240      	negs	r0, r0
    24dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	2000006c 	.word	0x2000006c
    24e4:	00006f4c 	.word	0x00006f4c
    24e8:	00006f6c 	.word	0x00006f6c
    24ec:	00006f8c 	.word	0x00006f8c
    24f0:	00003fd5 	.word	0x00003fd5

000024f4 <__sfputc_r>:
    24f4:	6893      	ldr	r3, [r2, #8]
    24f6:	b510      	push	{r4, lr}
    24f8:	3b01      	subs	r3, #1
    24fa:	6093      	str	r3, [r2, #8]
    24fc:	2b00      	cmp	r3, #0
    24fe:	da05      	bge.n	250c <__sfputc_r+0x18>
    2500:	6994      	ldr	r4, [r2, #24]
    2502:	42a3      	cmp	r3, r4
    2504:	db08      	blt.n	2518 <__sfputc_r+0x24>
    2506:	b2cb      	uxtb	r3, r1
    2508:	2b0a      	cmp	r3, #10
    250a:	d005      	beq.n	2518 <__sfputc_r+0x24>
    250c:	6813      	ldr	r3, [r2, #0]
    250e:	1c58      	adds	r0, r3, #1
    2510:	6010      	str	r0, [r2, #0]
    2512:	7019      	strb	r1, [r3, #0]
    2514:	b2c8      	uxtb	r0, r1
    2516:	e001      	b.n	251c <__sfputc_r+0x28>
    2518:	f000 fd74 	bl	3004 <__swbuf_r>
    251c:	bd10      	pop	{r4, pc}

0000251e <__sfputs_r>:
    251e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2520:	1c06      	adds	r6, r0, #0
    2522:	1c0f      	adds	r7, r1, #0
    2524:	1c14      	adds	r4, r2, #0
    2526:	18d5      	adds	r5, r2, r3
    2528:	42ac      	cmp	r4, r5
    252a:	d008      	beq.n	253e <__sfputs_r+0x20>
    252c:	7821      	ldrb	r1, [r4, #0]
    252e:	1c30      	adds	r0, r6, #0
    2530:	1c3a      	adds	r2, r7, #0
    2532:	f7ff ffdf 	bl	24f4 <__sfputc_r>
    2536:	3401      	adds	r4, #1
    2538:	1c43      	adds	r3, r0, #1
    253a:	d1f5      	bne.n	2528 <__sfputs_r+0xa>
    253c:	e000      	b.n	2540 <__sfputs_r+0x22>
    253e:	2000      	movs	r0, #0
    2540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002544 <_vfiprintf_r>:
    2544:	b5f0      	push	{r4, r5, r6, r7, lr}
    2546:	b09f      	sub	sp, #124	; 0x7c
    2548:	1c06      	adds	r6, r0, #0
    254a:	1c0f      	adds	r7, r1, #0
    254c:	9203      	str	r2, [sp, #12]
    254e:	9305      	str	r3, [sp, #20]
    2550:	2800      	cmp	r0, #0
    2552:	d004      	beq.n	255e <_vfiprintf_r+0x1a>
    2554:	6981      	ldr	r1, [r0, #24]
    2556:	2900      	cmp	r1, #0
    2558:	d101      	bne.n	255e <_vfiprintf_r+0x1a>
    255a:	f001 fd8f 	bl	407c <__sinit>
    255e:	4b75      	ldr	r3, [pc, #468]	; (2734 <_vfiprintf_r+0x1f0>)
    2560:	429f      	cmp	r7, r3
    2562:	d101      	bne.n	2568 <_vfiprintf_r+0x24>
    2564:	6877      	ldr	r7, [r6, #4]
    2566:	e008      	b.n	257a <_vfiprintf_r+0x36>
    2568:	4b73      	ldr	r3, [pc, #460]	; (2738 <_vfiprintf_r+0x1f4>)
    256a:	429f      	cmp	r7, r3
    256c:	d101      	bne.n	2572 <_vfiprintf_r+0x2e>
    256e:	68b7      	ldr	r7, [r6, #8]
    2570:	e003      	b.n	257a <_vfiprintf_r+0x36>
    2572:	4b72      	ldr	r3, [pc, #456]	; (273c <_vfiprintf_r+0x1f8>)
    2574:	429f      	cmp	r7, r3
    2576:	d100      	bne.n	257a <_vfiprintf_r+0x36>
    2578:	68f7      	ldr	r7, [r6, #12]
    257a:	89bb      	ldrh	r3, [r7, #12]
    257c:	071a      	lsls	r2, r3, #28
    257e:	d50a      	bpl.n	2596 <_vfiprintf_r+0x52>
    2580:	693b      	ldr	r3, [r7, #16]
    2582:	2b00      	cmp	r3, #0
    2584:	d007      	beq.n	2596 <_vfiprintf_r+0x52>
    2586:	ad06      	add	r5, sp, #24
    2588:	2300      	movs	r3, #0
    258a:	616b      	str	r3, [r5, #20]
    258c:	2320      	movs	r3, #32
    258e:	766b      	strb	r3, [r5, #25]
    2590:	2330      	movs	r3, #48	; 0x30
    2592:	76ab      	strb	r3, [r5, #26]
    2594:	e03b      	b.n	260e <_vfiprintf_r+0xca>
    2596:	1c30      	adds	r0, r6, #0
    2598:	1c39      	adds	r1, r7, #0
    259a:	f000 fd8b 	bl	30b4 <__swsetup_r>
    259e:	2800      	cmp	r0, #0
    25a0:	d0f1      	beq.n	2586 <_vfiprintf_r+0x42>
    25a2:	2001      	movs	r0, #1
    25a4:	4240      	negs	r0, r0
    25a6:	e0c2      	b.n	272e <_vfiprintf_r+0x1ea>
    25a8:	9a05      	ldr	r2, [sp, #20]
    25aa:	1d11      	adds	r1, r2, #4
    25ac:	6812      	ldr	r2, [r2, #0]
    25ae:	9105      	str	r1, [sp, #20]
    25b0:	2a00      	cmp	r2, #0
    25b2:	db76      	blt.n	26a2 <_vfiprintf_r+0x15e>
    25b4:	9209      	str	r2, [sp, #36]	; 0x24
    25b6:	3401      	adds	r4, #1
    25b8:	7823      	ldrb	r3, [r4, #0]
    25ba:	2b2e      	cmp	r3, #46	; 0x2e
    25bc:	d100      	bne.n	25c0 <_vfiprintf_r+0x7c>
    25be:	e081      	b.n	26c4 <_vfiprintf_r+0x180>
    25c0:	7821      	ldrb	r1, [r4, #0]
    25c2:	485f      	ldr	r0, [pc, #380]	; (2740 <_vfiprintf_r+0x1fc>)
    25c4:	2203      	movs	r2, #3
    25c6:	f001 fe27 	bl	4218 <memchr>
    25ca:	2800      	cmp	r0, #0
    25cc:	d007      	beq.n	25de <_vfiprintf_r+0x9a>
    25ce:	495c      	ldr	r1, [pc, #368]	; (2740 <_vfiprintf_r+0x1fc>)
    25d0:	682a      	ldr	r2, [r5, #0]
    25d2:	1a43      	subs	r3, r0, r1
    25d4:	2040      	movs	r0, #64	; 0x40
    25d6:	4098      	lsls	r0, r3
    25d8:	4310      	orrs	r0, r2
    25da:	6028      	str	r0, [r5, #0]
    25dc:	3401      	adds	r4, #1
    25de:	7821      	ldrb	r1, [r4, #0]
    25e0:	1c63      	adds	r3, r4, #1
    25e2:	4858      	ldr	r0, [pc, #352]	; (2744 <_vfiprintf_r+0x200>)
    25e4:	2206      	movs	r2, #6
    25e6:	9303      	str	r3, [sp, #12]
    25e8:	7629      	strb	r1, [r5, #24]
    25ea:	f001 fe15 	bl	4218 <memchr>
    25ee:	2800      	cmp	r0, #0
    25f0:	d100      	bne.n	25f4 <_vfiprintf_r+0xb0>
    25f2:	e08a      	b.n	270a <_vfiprintf_r+0x1c6>
    25f4:	4b54      	ldr	r3, [pc, #336]	; (2748 <_vfiprintf_r+0x204>)
    25f6:	2b00      	cmp	r3, #0
    25f8:	d17e      	bne.n	26f8 <_vfiprintf_r+0x1b4>
    25fa:	9b05      	ldr	r3, [sp, #20]
    25fc:	2207      	movs	r2, #7
    25fe:	3307      	adds	r3, #7
    2600:	4393      	bics	r3, r2
    2602:	3308      	adds	r3, #8
    2604:	9305      	str	r3, [sp, #20]
    2606:	696a      	ldr	r2, [r5, #20]
    2608:	9904      	ldr	r1, [sp, #16]
    260a:	1853      	adds	r3, r2, r1
    260c:	616b      	str	r3, [r5, #20]
    260e:	9c03      	ldr	r4, [sp, #12]
    2610:	7823      	ldrb	r3, [r4, #0]
    2612:	2b00      	cmp	r3, #0
    2614:	d104      	bne.n	2620 <_vfiprintf_r+0xdc>
    2616:	9903      	ldr	r1, [sp, #12]
    2618:	1a61      	subs	r1, r4, r1
    261a:	9102      	str	r1, [sp, #8]
    261c:	d010      	beq.n	2640 <_vfiprintf_r+0xfc>
    261e:	e003      	b.n	2628 <_vfiprintf_r+0xe4>
    2620:	2b25      	cmp	r3, #37	; 0x25
    2622:	d0f8      	beq.n	2616 <_vfiprintf_r+0xd2>
    2624:	3401      	adds	r4, #1
    2626:	e7f3      	b.n	2610 <_vfiprintf_r+0xcc>
    2628:	1c30      	adds	r0, r6, #0
    262a:	1c39      	adds	r1, r7, #0
    262c:	9a03      	ldr	r2, [sp, #12]
    262e:	9b02      	ldr	r3, [sp, #8]
    2630:	f7ff ff75 	bl	251e <__sfputs_r>
    2634:	3001      	adds	r0, #1
    2636:	d075      	beq.n	2724 <_vfiprintf_r+0x1e0>
    2638:	696a      	ldr	r2, [r5, #20]
    263a:	9902      	ldr	r1, [sp, #8]
    263c:	1853      	adds	r3, r2, r1
    263e:	616b      	str	r3, [r5, #20]
    2640:	7823      	ldrb	r3, [r4, #0]
    2642:	2b00      	cmp	r3, #0
    2644:	d06e      	beq.n	2724 <_vfiprintf_r+0x1e0>
    2646:	2201      	movs	r2, #1
    2648:	4252      	negs	r2, r2
    264a:	606a      	str	r2, [r5, #4]
    264c:	466a      	mov	r2, sp
    264e:	2300      	movs	r3, #0
    2650:	325b      	adds	r2, #91	; 0x5b
    2652:	3401      	adds	r4, #1
    2654:	602b      	str	r3, [r5, #0]
    2656:	60eb      	str	r3, [r5, #12]
    2658:	60ab      	str	r3, [r5, #8]
    265a:	7013      	strb	r3, [r2, #0]
    265c:	65ab      	str	r3, [r5, #88]	; 0x58
    265e:	7821      	ldrb	r1, [r4, #0]
    2660:	483a      	ldr	r0, [pc, #232]	; (274c <_vfiprintf_r+0x208>)
    2662:	2205      	movs	r2, #5
    2664:	f001 fdd8 	bl	4218 <memchr>
    2668:	2800      	cmp	r0, #0
    266a:	d008      	beq.n	267e <_vfiprintf_r+0x13a>
    266c:	4a37      	ldr	r2, [pc, #220]	; (274c <_vfiprintf_r+0x208>)
    266e:	3401      	adds	r4, #1
    2670:	1a83      	subs	r3, r0, r2
    2672:	2001      	movs	r0, #1
    2674:	4098      	lsls	r0, r3
    2676:	682b      	ldr	r3, [r5, #0]
    2678:	4318      	orrs	r0, r3
    267a:	6028      	str	r0, [r5, #0]
    267c:	e7ef      	b.n	265e <_vfiprintf_r+0x11a>
    267e:	682b      	ldr	r3, [r5, #0]
    2680:	06d9      	lsls	r1, r3, #27
    2682:	d503      	bpl.n	268c <_vfiprintf_r+0x148>
    2684:	466a      	mov	r2, sp
    2686:	2120      	movs	r1, #32
    2688:	325b      	adds	r2, #91	; 0x5b
    268a:	7011      	strb	r1, [r2, #0]
    268c:	071a      	lsls	r2, r3, #28
    268e:	d503      	bpl.n	2698 <_vfiprintf_r+0x154>
    2690:	466a      	mov	r2, sp
    2692:	212b      	movs	r1, #43	; 0x2b
    2694:	325b      	adds	r2, #91	; 0x5b
    2696:	7011      	strb	r1, [r2, #0]
    2698:	7822      	ldrb	r2, [r4, #0]
    269a:	2a2a      	cmp	r2, #42	; 0x2a
    269c:	d084      	beq.n	25a8 <_vfiprintf_r+0x64>
    269e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    26a0:	e005      	b.n	26ae <_vfiprintf_r+0x16a>
    26a2:	4252      	negs	r2, r2
    26a4:	60ea      	str	r2, [r5, #12]
    26a6:	2202      	movs	r2, #2
    26a8:	4313      	orrs	r3, r2
    26aa:	602b      	str	r3, [r5, #0]
    26ac:	e783      	b.n	25b6 <_vfiprintf_r+0x72>
    26ae:	7822      	ldrb	r2, [r4, #0]
    26b0:	3a30      	subs	r2, #48	; 0x30
    26b2:	2a09      	cmp	r2, #9
    26b4:	d804      	bhi.n	26c0 <_vfiprintf_r+0x17c>
    26b6:	210a      	movs	r1, #10
    26b8:	434b      	muls	r3, r1
    26ba:	3401      	adds	r4, #1
    26bc:	189b      	adds	r3, r3, r2
    26be:	e7f6      	b.n	26ae <_vfiprintf_r+0x16a>
    26c0:	9309      	str	r3, [sp, #36]	; 0x24
    26c2:	e779      	b.n	25b8 <_vfiprintf_r+0x74>
    26c4:	7863      	ldrb	r3, [r4, #1]
    26c6:	2b2a      	cmp	r3, #42	; 0x2a
    26c8:	d109      	bne.n	26de <_vfiprintf_r+0x19a>
    26ca:	9b05      	ldr	r3, [sp, #20]
    26cc:	3402      	adds	r4, #2
    26ce:	1d1a      	adds	r2, r3, #4
    26d0:	681b      	ldr	r3, [r3, #0]
    26d2:	9205      	str	r2, [sp, #20]
    26d4:	2b00      	cmp	r3, #0
    26d6:	da0d      	bge.n	26f4 <_vfiprintf_r+0x1b0>
    26d8:	2301      	movs	r3, #1
    26da:	425b      	negs	r3, r3
    26dc:	e00a      	b.n	26f4 <_vfiprintf_r+0x1b0>
    26de:	3401      	adds	r4, #1
    26e0:	2300      	movs	r3, #0
    26e2:	7822      	ldrb	r2, [r4, #0]
    26e4:	3a30      	subs	r2, #48	; 0x30
    26e6:	2a09      	cmp	r2, #9
    26e8:	d804      	bhi.n	26f4 <_vfiprintf_r+0x1b0>
    26ea:	210a      	movs	r1, #10
    26ec:	434b      	muls	r3, r1
    26ee:	3401      	adds	r4, #1
    26f0:	189b      	adds	r3, r3, r2
    26f2:	e7f6      	b.n	26e2 <_vfiprintf_r+0x19e>
    26f4:	9307      	str	r3, [sp, #28]
    26f6:	e763      	b.n	25c0 <_vfiprintf_r+0x7c>
    26f8:	ab05      	add	r3, sp, #20
    26fa:	9300      	str	r3, [sp, #0]
    26fc:	1c30      	adds	r0, r6, #0
    26fe:	1c29      	adds	r1, r5, #0
    2700:	1c3a      	adds	r2, r7, #0
    2702:	4b13      	ldr	r3, [pc, #76]	; (2750 <_vfiprintf_r+0x20c>)
    2704:	f000 f8c8 	bl	2898 <_printf_float>
    2708:	e007      	b.n	271a <_vfiprintf_r+0x1d6>
    270a:	ab05      	add	r3, sp, #20
    270c:	9300      	str	r3, [sp, #0]
    270e:	1c30      	adds	r0, r6, #0
    2710:	1c29      	adds	r1, r5, #0
    2712:	1c3a      	adds	r2, r7, #0
    2714:	4b0e      	ldr	r3, [pc, #56]	; (2750 <_vfiprintf_r+0x20c>)
    2716:	f000 fb5f 	bl	2dd8 <_printf_i>
    271a:	9004      	str	r0, [sp, #16]
    271c:	9904      	ldr	r1, [sp, #16]
    271e:	3101      	adds	r1, #1
    2720:	d000      	beq.n	2724 <_vfiprintf_r+0x1e0>
    2722:	e770      	b.n	2606 <_vfiprintf_r+0xc2>
    2724:	89bb      	ldrh	r3, [r7, #12]
    2726:	065a      	lsls	r2, r3, #25
    2728:	d500      	bpl.n	272c <_vfiprintf_r+0x1e8>
    272a:	e73a      	b.n	25a2 <_vfiprintf_r+0x5e>
    272c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    272e:	b01f      	add	sp, #124	; 0x7c
    2730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	00006f4c 	.word	0x00006f4c
    2738:	00006f6c 	.word	0x00006f6c
    273c:	00006f8c 	.word	0x00006f8c
    2740:	00006efe 	.word	0x00006efe
    2744:	00006f02 	.word	0x00006f02
    2748:	00002899 	.word	0x00002899
    274c:	00006ef8 	.word	0x00006ef8
    2750:	0000251f 	.word	0x0000251f
    2754:	00000000 	.word	0x00000000

00002758 <__cvt>:
    2758:	b5f0      	push	{r4, r5, r6, r7, lr}
    275a:	b08b      	sub	sp, #44	; 0x2c
    275c:	1c16      	adds	r6, r2, #0
    275e:	1c1c      	adds	r4, r3, #0
    2760:	9912      	ldr	r1, [sp, #72]	; 0x48
    2762:	d504      	bpl.n	276e <__cvt+0x16>
    2764:	2280      	movs	r2, #128	; 0x80
    2766:	0612      	lsls	r2, r2, #24
    2768:	18a4      	adds	r4, r4, r2
    276a:	232d      	movs	r3, #45	; 0x2d
    276c:	e000      	b.n	2770 <__cvt+0x18>
    276e:	2300      	movs	r3, #0
    2770:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2772:	700b      	strb	r3, [r1, #0]
    2774:	2320      	movs	r3, #32
    2776:	439f      	bics	r7, r3
    2778:	2f46      	cmp	r7, #70	; 0x46
    277a:	d008      	beq.n	278e <__cvt+0x36>
    277c:	1c3a      	adds	r2, r7, #0
    277e:	3a45      	subs	r2, #69	; 0x45
    2780:	4251      	negs	r1, r2
    2782:	414a      	adcs	r2, r1
    2784:	9910      	ldr	r1, [sp, #64]	; 0x40
    2786:	2302      	movs	r3, #2
    2788:	1889      	adds	r1, r1, r2
    278a:	9110      	str	r1, [sp, #64]	; 0x40
    278c:	e000      	b.n	2790 <__cvt+0x38>
    278e:	2303      	movs	r3, #3
    2790:	9300      	str	r3, [sp, #0]
    2792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2794:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2796:	9302      	str	r3, [sp, #8]
    2798:	ab08      	add	r3, sp, #32
    279a:	9303      	str	r3, [sp, #12]
    279c:	ab09      	add	r3, sp, #36	; 0x24
    279e:	9201      	str	r2, [sp, #4]
    27a0:	9304      	str	r3, [sp, #16]
    27a2:	1c32      	adds	r2, r6, #0
    27a4:	1c23      	adds	r3, r4, #0
    27a6:	f000 fd83 	bl	32b0 <_dtoa_r>
    27aa:	1c05      	adds	r5, r0, #0
    27ac:	2f47      	cmp	r7, #71	; 0x47
    27ae:	d102      	bne.n	27b6 <__cvt+0x5e>
    27b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    27b2:	07c9      	lsls	r1, r1, #31
    27b4:	d52c      	bpl.n	2810 <__cvt+0xb8>
    27b6:	9910      	ldr	r1, [sp, #64]	; 0x40
    27b8:	1869      	adds	r1, r5, r1
    27ba:	9107      	str	r1, [sp, #28]
    27bc:	2f46      	cmp	r7, #70	; 0x46
    27be:	d114      	bne.n	27ea <__cvt+0x92>
    27c0:	782b      	ldrb	r3, [r5, #0]
    27c2:	2b30      	cmp	r3, #48	; 0x30
    27c4:	d10c      	bne.n	27e0 <__cvt+0x88>
    27c6:	1c30      	adds	r0, r6, #0
    27c8:	1c21      	adds	r1, r4, #0
    27ca:	4b16      	ldr	r3, [pc, #88]	; (2824 <__cvt+0xcc>)
    27cc:	4a14      	ldr	r2, [pc, #80]	; (2820 <__cvt+0xc8>)
    27ce:	f002 fa93 	bl	4cf8 <__aeabi_dcmpeq>
    27d2:	2800      	cmp	r0, #0
    27d4:	d104      	bne.n	27e0 <__cvt+0x88>
    27d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    27d8:	2301      	movs	r3, #1
    27da:	9913      	ldr	r1, [sp, #76]	; 0x4c
    27dc:	1a9b      	subs	r3, r3, r2
    27de:	600b      	str	r3, [r1, #0]
    27e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    27e2:	9907      	ldr	r1, [sp, #28]
    27e4:	6813      	ldr	r3, [r2, #0]
    27e6:	18c9      	adds	r1, r1, r3
    27e8:	9107      	str	r1, [sp, #28]
    27ea:	1c30      	adds	r0, r6, #0
    27ec:	1c21      	adds	r1, r4, #0
    27ee:	4b0d      	ldr	r3, [pc, #52]	; (2824 <__cvt+0xcc>)
    27f0:	4a0b      	ldr	r2, [pc, #44]	; (2820 <__cvt+0xc8>)
    27f2:	f002 fa81 	bl	4cf8 <__aeabi_dcmpeq>
    27f6:	2800      	cmp	r0, #0
    27f8:	d001      	beq.n	27fe <__cvt+0xa6>
    27fa:	9a07      	ldr	r2, [sp, #28]
    27fc:	9209      	str	r2, [sp, #36]	; 0x24
    27fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2800:	9907      	ldr	r1, [sp, #28]
    2802:	428b      	cmp	r3, r1
    2804:	d204      	bcs.n	2810 <__cvt+0xb8>
    2806:	1c5a      	adds	r2, r3, #1
    2808:	9209      	str	r2, [sp, #36]	; 0x24
    280a:	2230      	movs	r2, #48	; 0x30
    280c:	701a      	strb	r2, [r3, #0]
    280e:	e7f6      	b.n	27fe <__cvt+0xa6>
    2810:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2812:	1c28      	adds	r0, r5, #0
    2814:	1b5a      	subs	r2, r3, r5
    2816:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2818:	601a      	str	r2, [r3, #0]
    281a:	b00b      	add	sp, #44	; 0x2c
    281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    281e:	46c0      	nop			; (mov r8, r8)
	...

00002828 <__exponent>:
    2828:	b5f0      	push	{r4, r5, r6, r7, lr}
    282a:	232b      	movs	r3, #43	; 0x2b
    282c:	b085      	sub	sp, #20
    282e:	1c05      	adds	r5, r0, #0
    2830:	1c0c      	adds	r4, r1, #0
    2832:	7002      	strb	r2, [r0, #0]
    2834:	1c86      	adds	r6, r0, #2
    2836:	2900      	cmp	r1, #0
    2838:	da01      	bge.n	283e <__exponent+0x16>
    283a:	424c      	negs	r4, r1
    283c:	232d      	movs	r3, #45	; 0x2d
    283e:	706b      	strb	r3, [r5, #1]
    2840:	2c09      	cmp	r4, #9
    2842:	dd1e      	ble.n	2882 <__exponent+0x5a>
    2844:	466f      	mov	r7, sp
    2846:	370e      	adds	r7, #14
    2848:	1c20      	adds	r0, r4, #0
    284a:	210a      	movs	r1, #10
    284c:	9701      	str	r7, [sp, #4]
    284e:	f002 fa37 	bl	4cc0 <__aeabi_idivmod>
    2852:	3130      	adds	r1, #48	; 0x30
    2854:	7039      	strb	r1, [r7, #0]
    2856:	1c20      	adds	r0, r4, #0
    2858:	210a      	movs	r1, #10
    285a:	f002 f9db 	bl	4c14 <__aeabi_idiv>
    285e:	3f01      	subs	r7, #1
    2860:	1e04      	subs	r4, r0, #0
    2862:	2c09      	cmp	r4, #9
    2864:	dcf0      	bgt.n	2848 <__exponent+0x20>
    2866:	9b01      	ldr	r3, [sp, #4]
    2868:	3430      	adds	r4, #48	; 0x30
    286a:	3b01      	subs	r3, #1
    286c:	701c      	strb	r4, [r3, #0]
    286e:	466a      	mov	r2, sp
    2870:	320f      	adds	r2, #15
    2872:	1c30      	adds	r0, r6, #0
    2874:	4293      	cmp	r3, r2
    2876:	d209      	bcs.n	288c <__exponent+0x64>
    2878:	781a      	ldrb	r2, [r3, #0]
    287a:	3301      	adds	r3, #1
    287c:	7032      	strb	r2, [r6, #0]
    287e:	3601      	adds	r6, #1
    2880:	e7f5      	b.n	286e <__exponent+0x46>
    2882:	2330      	movs	r3, #48	; 0x30
    2884:	18e4      	adds	r4, r4, r3
    2886:	7033      	strb	r3, [r6, #0]
    2888:	1cb0      	adds	r0, r6, #2
    288a:	7074      	strb	r4, [r6, #1]
    288c:	1b40      	subs	r0, r0, r5
    288e:	b005      	add	sp, #20
    2890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2892:	0000      	movs	r0, r0
    2894:	0000      	movs	r0, r0
	...

00002898 <_printf_float>:
    2898:	b5f0      	push	{r4, r5, r6, r7, lr}
    289a:	b093      	sub	sp, #76	; 0x4c
    289c:	1c0c      	adds	r4, r1, #0
    289e:	920a      	str	r2, [sp, #40]	; 0x28
    28a0:	930b      	str	r3, [sp, #44]	; 0x2c
    28a2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    28a4:	1c05      	adds	r5, r0, #0
    28a6:	f001 fc59 	bl	415c <_localeconv_r>
    28aa:	6800      	ldr	r0, [r0, #0]
    28ac:	900c      	str	r0, [sp, #48]	; 0x30
    28ae:	f002 f8df 	bl	4a70 <strlen>
    28b2:	2300      	movs	r3, #0
    28b4:	9310      	str	r3, [sp, #64]	; 0x40
    28b6:	6833      	ldr	r3, [r6, #0]
    28b8:	2207      	movs	r2, #7
    28ba:	3307      	adds	r3, #7
    28bc:	4393      	bics	r3, r2
    28be:	1c1a      	adds	r2, r3, #0
    28c0:	3208      	adds	r2, #8
    28c2:	900d      	str	r0, [sp, #52]	; 0x34
    28c4:	7e27      	ldrb	r7, [r4, #24]
    28c6:	6818      	ldr	r0, [r3, #0]
    28c8:	6859      	ldr	r1, [r3, #4]
    28ca:	6032      	str	r2, [r6, #0]
    28cc:	64a0      	str	r0, [r4, #72]	; 0x48
    28ce:	64e1      	str	r1, [r4, #76]	; 0x4c
    28d0:	f002 f846 	bl	4960 <__fpclassifyd>
    28d4:	2801      	cmp	r0, #1
    28d6:	d119      	bne.n	290c <_printf_float+0x74>
    28d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    28da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    28dc:	4bb9      	ldr	r3, [pc, #740]	; (2bc4 <_printf_float+0x32c>)
    28de:	4ab8      	ldr	r2, [pc, #736]	; (2bc0 <_printf_float+0x328>)
    28e0:	f002 fa10 	bl	4d04 <__aeabi_dcmplt>
    28e4:	2800      	cmp	r0, #0
    28e6:	d003      	beq.n	28f0 <_printf_float+0x58>
    28e8:	1c23      	adds	r3, r4, #0
    28ea:	222d      	movs	r2, #45	; 0x2d
    28ec:	3343      	adds	r3, #67	; 0x43
    28ee:	701a      	strb	r2, [r3, #0]
    28f0:	2f47      	cmp	r7, #71	; 0x47
    28f2:	d801      	bhi.n	28f8 <_printf_float+0x60>
    28f4:	4eb4      	ldr	r6, [pc, #720]	; (2bc8 <_printf_float+0x330>)
    28f6:	e000      	b.n	28fa <_printf_float+0x62>
    28f8:	4eb4      	ldr	r6, [pc, #720]	; (2bcc <_printf_float+0x334>)
    28fa:	2303      	movs	r3, #3
    28fc:	6820      	ldr	r0, [r4, #0]
    28fe:	6123      	str	r3, [r4, #16]
    2900:	2304      	movs	r3, #4
    2902:	4398      	bics	r0, r3
    2904:	2100      	movs	r1, #0
    2906:	6020      	str	r0, [r4, #0]
    2908:	9109      	str	r1, [sp, #36]	; 0x24
    290a:	e091      	b.n	2a30 <_printf_float+0x198>
    290c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    290e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    2910:	f002 f826 	bl	4960 <__fpclassifyd>
    2914:	6823      	ldr	r3, [r4, #0]
    2916:	2800      	cmp	r0, #0
    2918:	d10c      	bne.n	2934 <_printf_float+0x9c>
    291a:	2f47      	cmp	r7, #71	; 0x47
    291c:	d801      	bhi.n	2922 <_printf_float+0x8a>
    291e:	4eac      	ldr	r6, [pc, #688]	; (2bd0 <_printf_float+0x338>)
    2920:	e000      	b.n	2924 <_printf_float+0x8c>
    2922:	4eac      	ldr	r6, [pc, #688]	; (2bd4 <_printf_float+0x33c>)
    2924:	2203      	movs	r2, #3
    2926:	6122      	str	r2, [r4, #16]
    2928:	2204      	movs	r2, #4
    292a:	4393      	bics	r3, r2
    292c:	2200      	movs	r2, #0
    292e:	6023      	str	r3, [r4, #0]
    2930:	9209      	str	r2, [sp, #36]	; 0x24
    2932:	e07d      	b.n	2a30 <_printf_float+0x198>
    2934:	6862      	ldr	r2, [r4, #4]
    2936:	1c56      	adds	r6, r2, #1
    2938:	d101      	bne.n	293e <_printf_float+0xa6>
    293a:	2206      	movs	r2, #6
    293c:	e007      	b.n	294e <_printf_float+0xb6>
    293e:	2120      	movs	r1, #32
    2940:	1c38      	adds	r0, r7, #0
    2942:	4388      	bics	r0, r1
    2944:	2847      	cmp	r0, #71	; 0x47
    2946:	d103      	bne.n	2950 <_printf_float+0xb8>
    2948:	2a00      	cmp	r2, #0
    294a:	d101      	bne.n	2950 <_printf_float+0xb8>
    294c:	2201      	movs	r2, #1
    294e:	6062      	str	r2, [r4, #4]
    2950:	2280      	movs	r2, #128	; 0x80
    2952:	00d2      	lsls	r2, r2, #3
    2954:	4313      	orrs	r3, r2
    2956:	6023      	str	r3, [r4, #0]
    2958:	9301      	str	r3, [sp, #4]
    295a:	466b      	mov	r3, sp
    295c:	333b      	adds	r3, #59	; 0x3b
    295e:	9302      	str	r3, [sp, #8]
    2960:	ab0f      	add	r3, sp, #60	; 0x3c
    2962:	6861      	ldr	r1, [r4, #4]
    2964:	9303      	str	r3, [sp, #12]
    2966:	ab10      	add	r3, sp, #64	; 0x40
    2968:	9305      	str	r3, [sp, #20]
    296a:	2300      	movs	r3, #0
    296c:	9100      	str	r1, [sp, #0]
    296e:	9306      	str	r3, [sp, #24]
    2970:	9704      	str	r7, [sp, #16]
    2972:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2974:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2976:	1c28      	adds	r0, r5, #0
    2978:	f7ff feee 	bl	2758 <__cvt>
    297c:	2320      	movs	r3, #32
    297e:	1c3a      	adds	r2, r7, #0
    2980:	1c06      	adds	r6, r0, #0
    2982:	439a      	bics	r2, r3
    2984:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2986:	2a47      	cmp	r2, #71	; 0x47
    2988:	d107      	bne.n	299a <_printf_float+0x102>
    298a:	1ccb      	adds	r3, r1, #3
    298c:	db02      	blt.n	2994 <_printf_float+0xfc>
    298e:	6860      	ldr	r0, [r4, #4]
    2990:	4281      	cmp	r1, r0
    2992:	dd2e      	ble.n	29f2 <_printf_float+0x15a>
    2994:	3f02      	subs	r7, #2
    2996:	b2ff      	uxtb	r7, r7
    2998:	e001      	b.n	299e <_printf_float+0x106>
    299a:	2f65      	cmp	r7, #101	; 0x65
    299c:	d812      	bhi.n	29c4 <_printf_float+0x12c>
    299e:	1c20      	adds	r0, r4, #0
    29a0:	3901      	subs	r1, #1
    29a2:	1c3a      	adds	r2, r7, #0
    29a4:	3050      	adds	r0, #80	; 0x50
    29a6:	910f      	str	r1, [sp, #60]	; 0x3c
    29a8:	f7ff ff3e 	bl	2828 <__exponent>
    29ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    29ae:	9009      	str	r0, [sp, #36]	; 0x24
    29b0:	18c2      	adds	r2, r0, r3
    29b2:	6122      	str	r2, [r4, #16]
    29b4:	2b01      	cmp	r3, #1
    29b6:	dc02      	bgt.n	29be <_printf_float+0x126>
    29b8:	6821      	ldr	r1, [r4, #0]
    29ba:	07c9      	lsls	r1, r1, #31
    29bc:	d52f      	bpl.n	2a1e <_printf_float+0x186>
    29be:	3201      	adds	r2, #1
    29c0:	6122      	str	r2, [r4, #16]
    29c2:	e02c      	b.n	2a1e <_printf_float+0x186>
    29c4:	2f66      	cmp	r7, #102	; 0x66
    29c6:	d115      	bne.n	29f4 <_printf_float+0x15c>
    29c8:	6863      	ldr	r3, [r4, #4]
    29ca:	2900      	cmp	r1, #0
    29cc:	dd08      	ble.n	29e0 <_printf_float+0x148>
    29ce:	6121      	str	r1, [r4, #16]
    29d0:	2b00      	cmp	r3, #0
    29d2:	d102      	bne.n	29da <_printf_float+0x142>
    29d4:	6822      	ldr	r2, [r4, #0]
    29d6:	07d2      	lsls	r2, r2, #31
    29d8:	d51d      	bpl.n	2a16 <_printf_float+0x17e>
    29da:	3301      	adds	r3, #1
    29dc:	18c9      	adds	r1, r1, r3
    29de:	e011      	b.n	2a04 <_printf_float+0x16c>
    29e0:	2b00      	cmp	r3, #0
    29e2:	d103      	bne.n	29ec <_printf_float+0x154>
    29e4:	6820      	ldr	r0, [r4, #0]
    29e6:	2201      	movs	r2, #1
    29e8:	4210      	tst	r0, r2
    29ea:	d000      	beq.n	29ee <_printf_float+0x156>
    29ec:	1c9a      	adds	r2, r3, #2
    29ee:	6122      	str	r2, [r4, #16]
    29f0:	e011      	b.n	2a16 <_printf_float+0x17e>
    29f2:	2767      	movs	r7, #103	; 0x67
    29f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    29f6:	4291      	cmp	r1, r2
    29f8:	db06      	blt.n	2a08 <_printf_float+0x170>
    29fa:	6822      	ldr	r2, [r4, #0]
    29fc:	6121      	str	r1, [r4, #16]
    29fe:	07d2      	lsls	r2, r2, #31
    2a00:	d509      	bpl.n	2a16 <_printf_float+0x17e>
    2a02:	3101      	adds	r1, #1
    2a04:	6121      	str	r1, [r4, #16]
    2a06:	e006      	b.n	2a16 <_printf_float+0x17e>
    2a08:	2301      	movs	r3, #1
    2a0a:	2900      	cmp	r1, #0
    2a0c:	dc01      	bgt.n	2a12 <_printf_float+0x17a>
    2a0e:	2302      	movs	r3, #2
    2a10:	1a5b      	subs	r3, r3, r1
    2a12:	18d3      	adds	r3, r2, r3
    2a14:	6123      	str	r3, [r4, #16]
    2a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2a18:	2000      	movs	r0, #0
    2a1a:	65a3      	str	r3, [r4, #88]	; 0x58
    2a1c:	9009      	str	r0, [sp, #36]	; 0x24
    2a1e:	466b      	mov	r3, sp
    2a20:	333b      	adds	r3, #59	; 0x3b
    2a22:	781b      	ldrb	r3, [r3, #0]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d003      	beq.n	2a30 <_printf_float+0x198>
    2a28:	1c23      	adds	r3, r4, #0
    2a2a:	222d      	movs	r2, #45	; 0x2d
    2a2c:	3343      	adds	r3, #67	; 0x43
    2a2e:	701a      	strb	r2, [r3, #0]
    2a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2a32:	1c28      	adds	r0, r5, #0
    2a34:	9100      	str	r1, [sp, #0]
    2a36:	aa11      	add	r2, sp, #68	; 0x44
    2a38:	1c21      	adds	r1, r4, #0
    2a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2a3c:	f000 f958 	bl	2cf0 <_printf_common>
    2a40:	3001      	adds	r0, #1
    2a42:	d102      	bne.n	2a4a <_printf_float+0x1b2>
    2a44:	2001      	movs	r0, #1
    2a46:	4240      	negs	r0, r0
    2a48:	e14c      	b.n	2ce4 <_printf_float+0x44c>
    2a4a:	6822      	ldr	r2, [r4, #0]
    2a4c:	0553      	lsls	r3, r2, #21
    2a4e:	d404      	bmi.n	2a5a <_printf_float+0x1c2>
    2a50:	1c28      	adds	r0, r5, #0
    2a52:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a54:	1c32      	adds	r2, r6, #0
    2a56:	6923      	ldr	r3, [r4, #16]
    2a58:	e067      	b.n	2b2a <_printf_float+0x292>
    2a5a:	2f65      	cmp	r7, #101	; 0x65
    2a5c:	d800      	bhi.n	2a60 <_printf_float+0x1c8>
    2a5e:	e0e0      	b.n	2c22 <_printf_float+0x38a>
    2a60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    2a62:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    2a64:	4b57      	ldr	r3, [pc, #348]	; (2bc4 <_printf_float+0x32c>)
    2a66:	4a56      	ldr	r2, [pc, #344]	; (2bc0 <_printf_float+0x328>)
    2a68:	f002 f946 	bl	4cf8 <__aeabi_dcmpeq>
    2a6c:	2800      	cmp	r0, #0
    2a6e:	d02b      	beq.n	2ac8 <_printf_float+0x230>
    2a70:	1c28      	adds	r0, r5, #0
    2a72:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a74:	4a58      	ldr	r2, [pc, #352]	; (2bd8 <_printf_float+0x340>)
    2a76:	2301      	movs	r3, #1
    2a78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2a7a:	47b0      	blx	r6
    2a7c:	3001      	adds	r0, #1
    2a7e:	d0e1      	beq.n	2a44 <_printf_float+0x1ac>
    2a80:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2a82:	9810      	ldr	r0, [sp, #64]	; 0x40
    2a84:	4287      	cmp	r7, r0
    2a86:	db07      	blt.n	2a98 <_printf_float+0x200>
    2a88:	6821      	ldr	r1, [r4, #0]
    2a8a:	07c9      	lsls	r1, r1, #31
    2a8c:	d404      	bmi.n	2a98 <_printf_float+0x200>
    2a8e:	6827      	ldr	r7, [r4, #0]
    2a90:	07bf      	lsls	r7, r7, #30
    2a92:	d500      	bpl.n	2a96 <_printf_float+0x1fe>
    2a94:	e10e      	b.n	2cb4 <_printf_float+0x41c>
    2a96:	e113      	b.n	2cc0 <_printf_float+0x428>
    2a98:	1c28      	adds	r0, r5, #0
    2a9a:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2aa0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2aa2:	47b0      	blx	r6
    2aa4:	3001      	adds	r0, #1
    2aa6:	d0cd      	beq.n	2a44 <_printf_float+0x1ac>
    2aa8:	2600      	movs	r6, #0
    2aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2aac:	3b01      	subs	r3, #1
    2aae:	429e      	cmp	r6, r3
    2ab0:	daed      	bge.n	2a8e <_printf_float+0x1f6>
    2ab2:	1c22      	adds	r2, r4, #0
    2ab4:	1c28      	adds	r0, r5, #0
    2ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
    2ab8:	321a      	adds	r2, #26
    2aba:	2301      	movs	r3, #1
    2abc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2abe:	47b8      	blx	r7
    2ac0:	3001      	adds	r0, #1
    2ac2:	d0bf      	beq.n	2a44 <_printf_float+0x1ac>
    2ac4:	3601      	adds	r6, #1
    2ac6:	e7f0      	b.n	2aaa <_printf_float+0x212>
    2ac8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2aca:	2800      	cmp	r0, #0
    2acc:	dc30      	bgt.n	2b30 <_printf_float+0x298>
    2ace:	1c28      	adds	r0, r5, #0
    2ad0:	990a      	ldr	r1, [sp, #40]	; 0x28
    2ad2:	4a41      	ldr	r2, [pc, #260]	; (2bd8 <_printf_float+0x340>)
    2ad4:	2301      	movs	r3, #1
    2ad6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2ad8:	47b8      	blx	r7
    2ada:	3001      	adds	r0, #1
    2adc:	d0b2      	beq.n	2a44 <_printf_float+0x1ac>
    2ade:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d105      	bne.n	2af0 <_printf_float+0x258>
    2ae4:	9910      	ldr	r1, [sp, #64]	; 0x40
    2ae6:	2900      	cmp	r1, #0
    2ae8:	d102      	bne.n	2af0 <_printf_float+0x258>
    2aea:	6822      	ldr	r2, [r4, #0]
    2aec:	07d2      	lsls	r2, r2, #31
    2aee:	d5ce      	bpl.n	2a8e <_printf_float+0x1f6>
    2af0:	1c28      	adds	r0, r5, #0
    2af2:	990a      	ldr	r1, [sp, #40]	; 0x28
    2af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2af8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2afa:	47b8      	blx	r7
    2afc:	3001      	adds	r0, #1
    2afe:	d0a1      	beq.n	2a44 <_printf_float+0x1ac>
    2b00:	2700      	movs	r7, #0
    2b02:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2b04:	9709      	str	r7, [sp, #36]	; 0x24
    2b06:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2b08:	4243      	negs	r3, r0
    2b0a:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b0c:	1c28      	adds	r0, r5, #0
    2b0e:	429f      	cmp	r7, r3
    2b10:	da09      	bge.n	2b26 <_printf_float+0x28e>
    2b12:	1c22      	adds	r2, r4, #0
    2b14:	321a      	adds	r2, #26
    2b16:	2301      	movs	r3, #1
    2b18:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b1a:	47b8      	blx	r7
    2b1c:	3001      	adds	r0, #1
    2b1e:	d091      	beq.n	2a44 <_printf_float+0x1ac>
    2b20:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2b22:	3701      	adds	r7, #1
    2b24:	e7ed      	b.n	2b02 <_printf_float+0x26a>
    2b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b28:	1c32      	adds	r2, r6, #0
    2b2a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2b2c:	47b0      	blx	r6
    2b2e:	e0b5      	b.n	2c9c <_printf_float+0x404>
    2b30:	9f10      	ldr	r7, [sp, #64]	; 0x40
    2b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2b34:	9708      	str	r7, [sp, #32]
    2b36:	429f      	cmp	r7, r3
    2b38:	dd00      	ble.n	2b3c <_printf_float+0x2a4>
    2b3a:	9308      	str	r3, [sp, #32]
    2b3c:	9f08      	ldr	r7, [sp, #32]
    2b3e:	2f00      	cmp	r7, #0
    2b40:	dc01      	bgt.n	2b46 <_printf_float+0x2ae>
    2b42:	2700      	movs	r7, #0
    2b44:	e014      	b.n	2b70 <_printf_float+0x2d8>
    2b46:	1c28      	adds	r0, r5, #0
    2b48:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b4a:	1c32      	adds	r2, r6, #0
    2b4c:	9b08      	ldr	r3, [sp, #32]
    2b4e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b50:	47b8      	blx	r7
    2b52:	3001      	adds	r0, #1
    2b54:	d1f5      	bne.n	2b42 <_printf_float+0x2aa>
    2b56:	e775      	b.n	2a44 <_printf_float+0x1ac>
    2b58:	1c22      	adds	r2, r4, #0
    2b5a:	1c28      	adds	r0, r5, #0
    2b5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b5e:	321a      	adds	r2, #26
    2b60:	2301      	movs	r3, #1
    2b62:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2b64:	47b8      	blx	r7
    2b66:	3001      	adds	r0, #1
    2b68:	d100      	bne.n	2b6c <_printf_float+0x2d4>
    2b6a:	e76b      	b.n	2a44 <_printf_float+0x1ac>
    2b6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2b6e:	3701      	adds	r7, #1
    2b70:	9709      	str	r7, [sp, #36]	; 0x24
    2b72:	9f08      	ldr	r7, [sp, #32]
    2b74:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2b76:	43fa      	mvns	r2, r7
    2b78:	17d2      	asrs	r2, r2, #31
    2b7a:	403a      	ands	r2, r7
    2b7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2b7e:	1a9a      	subs	r2, r3, r2
    2b80:	4297      	cmp	r7, r2
    2b82:	dbe9      	blt.n	2b58 <_printf_float+0x2c0>
    2b84:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2b86:	9910      	ldr	r1, [sp, #64]	; 0x40
    2b88:	18f3      	adds	r3, r6, r3
    2b8a:	9309      	str	r3, [sp, #36]	; 0x24
    2b8c:	4288      	cmp	r0, r1
    2b8e:	db0e      	blt.n	2bae <_printf_float+0x316>
    2b90:	6822      	ldr	r2, [r4, #0]
    2b92:	07d2      	lsls	r2, r2, #31
    2b94:	d40b      	bmi.n	2bae <_printf_float+0x316>
    2b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b98:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2b9a:	18f6      	adds	r6, r6, r3
    2b9c:	1bdb      	subs	r3, r3, r7
    2b9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2ba0:	1bf6      	subs	r6, r6, r7
    2ba2:	429e      	cmp	r6, r3
    2ba4:	dd00      	ble.n	2ba8 <_printf_float+0x310>
    2ba6:	1c1e      	adds	r6, r3, #0
    2ba8:	2e00      	cmp	r6, #0
    2baa:	dc17      	bgt.n	2bdc <_printf_float+0x344>
    2bac:	e01f      	b.n	2bee <_printf_float+0x356>
    2bae:	1c28      	adds	r0, r5, #0
    2bb0:	990a      	ldr	r1, [sp, #40]	; 0x28
    2bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2bb6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2bb8:	47b8      	blx	r7
    2bba:	3001      	adds	r0, #1
    2bbc:	d1eb      	bne.n	2b96 <_printf_float+0x2fe>
    2bbe:	e741      	b.n	2a44 <_printf_float+0x1ac>
	...
    2bc8:	00006f09 	.word	0x00006f09
    2bcc:	00006f0d 	.word	0x00006f0d
    2bd0:	00006f11 	.word	0x00006f11
    2bd4:	00006f15 	.word	0x00006f15
    2bd8:	00006f19 	.word	0x00006f19
    2bdc:	1c28      	adds	r0, r5, #0
    2bde:	990a      	ldr	r1, [sp, #40]	; 0x28
    2be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2be2:	1c33      	adds	r3, r6, #0
    2be4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2be6:	47b8      	blx	r7
    2be8:	3001      	adds	r0, #1
    2bea:	d100      	bne.n	2bee <_printf_float+0x356>
    2bec:	e72a      	b.n	2a44 <_printf_float+0x1ac>
    2bee:	2700      	movs	r7, #0
    2bf0:	e00b      	b.n	2c0a <_printf_float+0x372>
    2bf2:	1c22      	adds	r2, r4, #0
    2bf4:	1c28      	adds	r0, r5, #0
    2bf6:	990a      	ldr	r1, [sp, #40]	; 0x28
    2bf8:	321a      	adds	r2, #26
    2bfa:	2301      	movs	r3, #1
    2bfc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2bfe:	47b8      	blx	r7
    2c00:	3001      	adds	r0, #1
    2c02:	d100      	bne.n	2c06 <_printf_float+0x36e>
    2c04:	e71e      	b.n	2a44 <_printf_float+0x1ac>
    2c06:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2c08:	3701      	adds	r7, #1
    2c0a:	9709      	str	r7, [sp, #36]	; 0x24
    2c0c:	9810      	ldr	r0, [sp, #64]	; 0x40
    2c0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2c10:	43f3      	mvns	r3, r6
    2c12:	17db      	asrs	r3, r3, #31
    2c14:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2c16:	1a42      	subs	r2, r0, r1
    2c18:	4033      	ands	r3, r6
    2c1a:	1ad3      	subs	r3, r2, r3
    2c1c:	429f      	cmp	r7, r3
    2c1e:	dbe8      	blt.n	2bf2 <_printf_float+0x35a>
    2c20:	e735      	b.n	2a8e <_printf_float+0x1f6>
    2c22:	9810      	ldr	r0, [sp, #64]	; 0x40
    2c24:	2801      	cmp	r0, #1
    2c26:	dc02      	bgt.n	2c2e <_printf_float+0x396>
    2c28:	2301      	movs	r3, #1
    2c2a:	421a      	tst	r2, r3
    2c2c:	d03a      	beq.n	2ca4 <_printf_float+0x40c>
    2c2e:	1c28      	adds	r0, r5, #0
    2c30:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c32:	1c32      	adds	r2, r6, #0
    2c34:	2301      	movs	r3, #1
    2c36:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2c38:	47b8      	blx	r7
    2c3a:	3001      	adds	r0, #1
    2c3c:	d100      	bne.n	2c40 <_printf_float+0x3a8>
    2c3e:	e701      	b.n	2a44 <_printf_float+0x1ac>
    2c40:	1c28      	adds	r0, r5, #0
    2c42:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2c48:	47b8      	blx	r7
    2c4a:	3001      	adds	r0, #1
    2c4c:	d100      	bne.n	2c50 <_printf_float+0x3b8>
    2c4e:	e6f9      	b.n	2a44 <_printf_float+0x1ac>
    2c50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    2c52:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    2c54:	4b25      	ldr	r3, [pc, #148]	; (2cec <_printf_float+0x454>)
    2c56:	4a24      	ldr	r2, [pc, #144]	; (2ce8 <_printf_float+0x450>)
    2c58:	f002 f84e 	bl	4cf8 <__aeabi_dcmpeq>
    2c5c:	2800      	cmp	r0, #0
    2c5e:	d001      	beq.n	2c64 <_printf_float+0x3cc>
    2c60:	2600      	movs	r6, #0
    2c62:	e010      	b.n	2c86 <_printf_float+0x3ee>
    2c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2c66:	1c72      	adds	r2, r6, #1
    2c68:	3b01      	subs	r3, #1
    2c6a:	1c28      	adds	r0, r5, #0
    2c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c6e:	e01c      	b.n	2caa <_printf_float+0x412>
    2c70:	1c22      	adds	r2, r4, #0
    2c72:	1c28      	adds	r0, r5, #0
    2c74:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c76:	321a      	adds	r2, #26
    2c78:	2301      	movs	r3, #1
    2c7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2c7c:	47b8      	blx	r7
    2c7e:	3001      	adds	r0, #1
    2c80:	d100      	bne.n	2c84 <_printf_float+0x3ec>
    2c82:	e6df      	b.n	2a44 <_printf_float+0x1ac>
    2c84:	3601      	adds	r6, #1
    2c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2c88:	3b01      	subs	r3, #1
    2c8a:	429e      	cmp	r6, r3
    2c8c:	dbf0      	blt.n	2c70 <_printf_float+0x3d8>
    2c8e:	1c22      	adds	r2, r4, #0
    2c90:	1c28      	adds	r0, r5, #0
    2c92:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c94:	3250      	adds	r2, #80	; 0x50
    2c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c98:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2c9a:	47b8      	blx	r7
    2c9c:	3001      	adds	r0, #1
    2c9e:	d000      	beq.n	2ca2 <_printf_float+0x40a>
    2ca0:	e6f5      	b.n	2a8e <_printf_float+0x1f6>
    2ca2:	e6cf      	b.n	2a44 <_printf_float+0x1ac>
    2ca4:	990a      	ldr	r1, [sp, #40]	; 0x28
    2ca6:	1c28      	adds	r0, r5, #0
    2ca8:	1c32      	adds	r2, r6, #0
    2caa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2cac:	47b0      	blx	r6
    2cae:	3001      	adds	r0, #1
    2cb0:	d1ed      	bne.n	2c8e <_printf_float+0x3f6>
    2cb2:	e6c7      	b.n	2a44 <_printf_float+0x1ac>
    2cb4:	2600      	movs	r6, #0
    2cb6:	68e0      	ldr	r0, [r4, #12]
    2cb8:	9911      	ldr	r1, [sp, #68]	; 0x44
    2cba:	1a43      	subs	r3, r0, r1
    2cbc:	429e      	cmp	r6, r3
    2cbe:	db05      	blt.n	2ccc <_printf_float+0x434>
    2cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2cc2:	68e0      	ldr	r0, [r4, #12]
    2cc4:	4298      	cmp	r0, r3
    2cc6:	da0d      	bge.n	2ce4 <_printf_float+0x44c>
    2cc8:	1c18      	adds	r0, r3, #0
    2cca:	e00b      	b.n	2ce4 <_printf_float+0x44c>
    2ccc:	1c22      	adds	r2, r4, #0
    2cce:	1c28      	adds	r0, r5, #0
    2cd0:	990a      	ldr	r1, [sp, #40]	; 0x28
    2cd2:	3219      	adds	r2, #25
    2cd4:	2301      	movs	r3, #1
    2cd6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2cd8:	47b8      	blx	r7
    2cda:	3001      	adds	r0, #1
    2cdc:	d100      	bne.n	2ce0 <_printf_float+0x448>
    2cde:	e6b1      	b.n	2a44 <_printf_float+0x1ac>
    2ce0:	3601      	adds	r6, #1
    2ce2:	e7e8      	b.n	2cb6 <_printf_float+0x41e>
    2ce4:	b013      	add	sp, #76	; 0x4c
    2ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00002cf0 <_printf_common>:
    2cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cf2:	1c15      	adds	r5, r2, #0
    2cf4:	9301      	str	r3, [sp, #4]
    2cf6:	690a      	ldr	r2, [r1, #16]
    2cf8:	688b      	ldr	r3, [r1, #8]
    2cfa:	1c06      	adds	r6, r0, #0
    2cfc:	1c0c      	adds	r4, r1, #0
    2cfe:	4293      	cmp	r3, r2
    2d00:	da00      	bge.n	2d04 <_printf_common+0x14>
    2d02:	1c13      	adds	r3, r2, #0
    2d04:	1c22      	adds	r2, r4, #0
    2d06:	602b      	str	r3, [r5, #0]
    2d08:	3243      	adds	r2, #67	; 0x43
    2d0a:	7812      	ldrb	r2, [r2, #0]
    2d0c:	2a00      	cmp	r2, #0
    2d0e:	d001      	beq.n	2d14 <_printf_common+0x24>
    2d10:	3301      	adds	r3, #1
    2d12:	602b      	str	r3, [r5, #0]
    2d14:	6820      	ldr	r0, [r4, #0]
    2d16:	0680      	lsls	r0, r0, #26
    2d18:	d502      	bpl.n	2d20 <_printf_common+0x30>
    2d1a:	682b      	ldr	r3, [r5, #0]
    2d1c:	3302      	adds	r3, #2
    2d1e:	602b      	str	r3, [r5, #0]
    2d20:	6821      	ldr	r1, [r4, #0]
    2d22:	2706      	movs	r7, #6
    2d24:	400f      	ands	r7, r1
    2d26:	d01f      	beq.n	2d68 <_printf_common+0x78>
    2d28:	1c23      	adds	r3, r4, #0
    2d2a:	3343      	adds	r3, #67	; 0x43
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	1e5a      	subs	r2, r3, #1
    2d30:	4193      	sbcs	r3, r2
    2d32:	6822      	ldr	r2, [r4, #0]
    2d34:	0692      	lsls	r2, r2, #26
    2d36:	d51f      	bpl.n	2d78 <_printf_common+0x88>
    2d38:	18e1      	adds	r1, r4, r3
    2d3a:	3140      	adds	r1, #64	; 0x40
    2d3c:	2030      	movs	r0, #48	; 0x30
    2d3e:	70c8      	strb	r0, [r1, #3]
    2d40:	1c21      	adds	r1, r4, #0
    2d42:	1c5a      	adds	r2, r3, #1
    2d44:	3145      	adds	r1, #69	; 0x45
    2d46:	7809      	ldrb	r1, [r1, #0]
    2d48:	18a2      	adds	r2, r4, r2
    2d4a:	3240      	adds	r2, #64	; 0x40
    2d4c:	3302      	adds	r3, #2
    2d4e:	70d1      	strb	r1, [r2, #3]
    2d50:	e012      	b.n	2d78 <_printf_common+0x88>
    2d52:	1c22      	adds	r2, r4, #0
    2d54:	1c30      	adds	r0, r6, #0
    2d56:	9901      	ldr	r1, [sp, #4]
    2d58:	3219      	adds	r2, #25
    2d5a:	2301      	movs	r3, #1
    2d5c:	9f08      	ldr	r7, [sp, #32]
    2d5e:	47b8      	blx	r7
    2d60:	3001      	adds	r0, #1
    2d62:	d011      	beq.n	2d88 <_printf_common+0x98>
    2d64:	9f00      	ldr	r7, [sp, #0]
    2d66:	3701      	adds	r7, #1
    2d68:	9700      	str	r7, [sp, #0]
    2d6a:	68e0      	ldr	r0, [r4, #12]
    2d6c:	6829      	ldr	r1, [r5, #0]
    2d6e:	9f00      	ldr	r7, [sp, #0]
    2d70:	1a43      	subs	r3, r0, r1
    2d72:	429f      	cmp	r7, r3
    2d74:	dbed      	blt.n	2d52 <_printf_common+0x62>
    2d76:	e7d7      	b.n	2d28 <_printf_common+0x38>
    2d78:	1c22      	adds	r2, r4, #0
    2d7a:	1c30      	adds	r0, r6, #0
    2d7c:	9901      	ldr	r1, [sp, #4]
    2d7e:	3243      	adds	r2, #67	; 0x43
    2d80:	9f08      	ldr	r7, [sp, #32]
    2d82:	47b8      	blx	r7
    2d84:	3001      	adds	r0, #1
    2d86:	d102      	bne.n	2d8e <_printf_common+0x9e>
    2d88:	2001      	movs	r0, #1
    2d8a:	4240      	negs	r0, r0
    2d8c:	e023      	b.n	2dd6 <_printf_common+0xe6>
    2d8e:	6820      	ldr	r0, [r4, #0]
    2d90:	2106      	movs	r1, #6
    2d92:	682b      	ldr	r3, [r5, #0]
    2d94:	68e2      	ldr	r2, [r4, #12]
    2d96:	4001      	ands	r1, r0
    2d98:	2500      	movs	r5, #0
    2d9a:	2904      	cmp	r1, #4
    2d9c:	d103      	bne.n	2da6 <_printf_common+0xb6>
    2d9e:	1ad5      	subs	r5, r2, r3
    2da0:	43eb      	mvns	r3, r5
    2da2:	17db      	asrs	r3, r3, #31
    2da4:	401d      	ands	r5, r3
    2da6:	68a2      	ldr	r2, [r4, #8]
    2da8:	6923      	ldr	r3, [r4, #16]
    2daa:	429a      	cmp	r2, r3
    2dac:	dd01      	ble.n	2db2 <_printf_common+0xc2>
    2dae:	1ad3      	subs	r3, r2, r3
    2db0:	18ed      	adds	r5, r5, r3
    2db2:	2700      	movs	r7, #0
    2db4:	9700      	str	r7, [sp, #0]
    2db6:	9f00      	ldr	r7, [sp, #0]
    2db8:	42af      	cmp	r7, r5
    2dba:	da0b      	bge.n	2dd4 <_printf_common+0xe4>
    2dbc:	1c22      	adds	r2, r4, #0
    2dbe:	1c30      	adds	r0, r6, #0
    2dc0:	9901      	ldr	r1, [sp, #4]
    2dc2:	321a      	adds	r2, #26
    2dc4:	2301      	movs	r3, #1
    2dc6:	9f08      	ldr	r7, [sp, #32]
    2dc8:	47b8      	blx	r7
    2dca:	3001      	adds	r0, #1
    2dcc:	d0dc      	beq.n	2d88 <_printf_common+0x98>
    2dce:	9f00      	ldr	r7, [sp, #0]
    2dd0:	3701      	adds	r7, #1
    2dd2:	e7ef      	b.n	2db4 <_printf_common+0xc4>
    2dd4:	2000      	movs	r0, #0
    2dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002dd8 <_printf_i>:
    2dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dda:	1c0d      	adds	r5, r1, #0
    2ddc:	b08b      	sub	sp, #44	; 0x2c
    2dde:	3543      	adds	r5, #67	; 0x43
    2de0:	9206      	str	r2, [sp, #24]
    2de2:	9005      	str	r0, [sp, #20]
    2de4:	9307      	str	r3, [sp, #28]
    2de6:	9504      	str	r5, [sp, #16]
    2de8:	7e0b      	ldrb	r3, [r1, #24]
    2dea:	1c0c      	adds	r4, r1, #0
    2dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2dee:	2b6e      	cmp	r3, #110	; 0x6e
    2df0:	d100      	bne.n	2df4 <_printf_i+0x1c>
    2df2:	e0a7      	b.n	2f44 <_printf_i+0x16c>
    2df4:	d811      	bhi.n	2e1a <_printf_i+0x42>
    2df6:	2b63      	cmp	r3, #99	; 0x63
    2df8:	d022      	beq.n	2e40 <_printf_i+0x68>
    2dfa:	d809      	bhi.n	2e10 <_printf_i+0x38>
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d100      	bne.n	2e02 <_printf_i+0x2a>
    2e00:	e0b0      	b.n	2f64 <_printf_i+0x18c>
    2e02:	2b58      	cmp	r3, #88	; 0x58
    2e04:	d000      	beq.n	2e08 <_printf_i+0x30>
    2e06:	e0c0      	b.n	2f8a <_printf_i+0x1b2>
    2e08:	3145      	adds	r1, #69	; 0x45
    2e0a:	700b      	strb	r3, [r1, #0]
    2e0c:	4d7b      	ldr	r5, [pc, #492]	; (2ffc <_printf_i+0x224>)
    2e0e:	e04e      	b.n	2eae <_printf_i+0xd6>
    2e10:	2b64      	cmp	r3, #100	; 0x64
    2e12:	d01c      	beq.n	2e4e <_printf_i+0x76>
    2e14:	2b69      	cmp	r3, #105	; 0x69
    2e16:	d01a      	beq.n	2e4e <_printf_i+0x76>
    2e18:	e0b7      	b.n	2f8a <_printf_i+0x1b2>
    2e1a:	2b73      	cmp	r3, #115	; 0x73
    2e1c:	d100      	bne.n	2e20 <_printf_i+0x48>
    2e1e:	e0a5      	b.n	2f6c <_printf_i+0x194>
    2e20:	d809      	bhi.n	2e36 <_printf_i+0x5e>
    2e22:	2b6f      	cmp	r3, #111	; 0x6f
    2e24:	d029      	beq.n	2e7a <_printf_i+0xa2>
    2e26:	2b70      	cmp	r3, #112	; 0x70
    2e28:	d000      	beq.n	2e2c <_printf_i+0x54>
    2e2a:	e0ae      	b.n	2f8a <_printf_i+0x1b2>
    2e2c:	680e      	ldr	r6, [r1, #0]
    2e2e:	2320      	movs	r3, #32
    2e30:	4333      	orrs	r3, r6
    2e32:	600b      	str	r3, [r1, #0]
    2e34:	e036      	b.n	2ea4 <_printf_i+0xcc>
    2e36:	2b75      	cmp	r3, #117	; 0x75
    2e38:	d01f      	beq.n	2e7a <_printf_i+0xa2>
    2e3a:	2b78      	cmp	r3, #120	; 0x78
    2e3c:	d032      	beq.n	2ea4 <_printf_i+0xcc>
    2e3e:	e0a4      	b.n	2f8a <_printf_i+0x1b2>
    2e40:	6813      	ldr	r3, [r2, #0]
    2e42:	1c0d      	adds	r5, r1, #0
    2e44:	1d19      	adds	r1, r3, #4
    2e46:	3542      	adds	r5, #66	; 0x42
    2e48:	6011      	str	r1, [r2, #0]
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	e09f      	b.n	2f8e <_printf_i+0x1b6>
    2e4e:	6821      	ldr	r1, [r4, #0]
    2e50:	6813      	ldr	r3, [r2, #0]
    2e52:	060e      	lsls	r6, r1, #24
    2e54:	d503      	bpl.n	2e5e <_printf_i+0x86>
    2e56:	1d19      	adds	r1, r3, #4
    2e58:	6011      	str	r1, [r2, #0]
    2e5a:	681e      	ldr	r6, [r3, #0]
    2e5c:	e005      	b.n	2e6a <_printf_i+0x92>
    2e5e:	0648      	lsls	r0, r1, #25
    2e60:	d5f9      	bpl.n	2e56 <_printf_i+0x7e>
    2e62:	1d19      	adds	r1, r3, #4
    2e64:	6011      	str	r1, [r2, #0]
    2e66:	2100      	movs	r1, #0
    2e68:	5e5e      	ldrsh	r6, [r3, r1]
    2e6a:	4b64      	ldr	r3, [pc, #400]	; (2ffc <_printf_i+0x224>)
    2e6c:	2e00      	cmp	r6, #0
    2e6e:	da3b      	bge.n	2ee8 <_printf_i+0x110>
    2e70:	9d04      	ldr	r5, [sp, #16]
    2e72:	222d      	movs	r2, #45	; 0x2d
    2e74:	4276      	negs	r6, r6
    2e76:	702a      	strb	r2, [r5, #0]
    2e78:	e036      	b.n	2ee8 <_printf_i+0x110>
    2e7a:	6821      	ldr	r1, [r4, #0]
    2e7c:	6813      	ldr	r3, [r2, #0]
    2e7e:	060e      	lsls	r6, r1, #24
    2e80:	d503      	bpl.n	2e8a <_printf_i+0xb2>
    2e82:	1d19      	adds	r1, r3, #4
    2e84:	6011      	str	r1, [r2, #0]
    2e86:	681e      	ldr	r6, [r3, #0]
    2e88:	e004      	b.n	2e94 <_printf_i+0xbc>
    2e8a:	0648      	lsls	r0, r1, #25
    2e8c:	d5f9      	bpl.n	2e82 <_printf_i+0xaa>
    2e8e:	1d19      	adds	r1, r3, #4
    2e90:	881e      	ldrh	r6, [r3, #0]
    2e92:	6011      	str	r1, [r2, #0]
    2e94:	4b59      	ldr	r3, [pc, #356]	; (2ffc <_printf_i+0x224>)
    2e96:	7e22      	ldrb	r2, [r4, #24]
    2e98:	9303      	str	r3, [sp, #12]
    2e9a:	2708      	movs	r7, #8
    2e9c:	2a6f      	cmp	r2, #111	; 0x6f
    2e9e:	d01e      	beq.n	2ede <_printf_i+0x106>
    2ea0:	270a      	movs	r7, #10
    2ea2:	e01c      	b.n	2ede <_printf_i+0x106>
    2ea4:	1c23      	adds	r3, r4, #0
    2ea6:	2178      	movs	r1, #120	; 0x78
    2ea8:	3345      	adds	r3, #69	; 0x45
    2eaa:	4d55      	ldr	r5, [pc, #340]	; (3000 <_printf_i+0x228>)
    2eac:	7019      	strb	r1, [r3, #0]
    2eae:	6811      	ldr	r1, [r2, #0]
    2eb0:	6823      	ldr	r3, [r4, #0]
    2eb2:	1d08      	adds	r0, r1, #4
    2eb4:	9503      	str	r5, [sp, #12]
    2eb6:	6010      	str	r0, [r2, #0]
    2eb8:	061e      	lsls	r6, r3, #24
    2eba:	d501      	bpl.n	2ec0 <_printf_i+0xe8>
    2ebc:	680e      	ldr	r6, [r1, #0]
    2ebe:	e002      	b.n	2ec6 <_printf_i+0xee>
    2ec0:	0658      	lsls	r0, r3, #25
    2ec2:	d5fb      	bpl.n	2ebc <_printf_i+0xe4>
    2ec4:	880e      	ldrh	r6, [r1, #0]
    2ec6:	07d9      	lsls	r1, r3, #31
    2ec8:	d502      	bpl.n	2ed0 <_printf_i+0xf8>
    2eca:	2220      	movs	r2, #32
    2ecc:	4313      	orrs	r3, r2
    2ece:	6023      	str	r3, [r4, #0]
    2ed0:	2710      	movs	r7, #16
    2ed2:	2e00      	cmp	r6, #0
    2ed4:	d103      	bne.n	2ede <_printf_i+0x106>
    2ed6:	6822      	ldr	r2, [r4, #0]
    2ed8:	2320      	movs	r3, #32
    2eda:	439a      	bics	r2, r3
    2edc:	6022      	str	r2, [r4, #0]
    2ede:	1c23      	adds	r3, r4, #0
    2ee0:	2200      	movs	r2, #0
    2ee2:	3343      	adds	r3, #67	; 0x43
    2ee4:	701a      	strb	r2, [r3, #0]
    2ee6:	e001      	b.n	2eec <_printf_i+0x114>
    2ee8:	9303      	str	r3, [sp, #12]
    2eea:	270a      	movs	r7, #10
    2eec:	6863      	ldr	r3, [r4, #4]
    2eee:	60a3      	str	r3, [r4, #8]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	db03      	blt.n	2efc <_printf_i+0x124>
    2ef4:	6825      	ldr	r5, [r4, #0]
    2ef6:	2204      	movs	r2, #4
    2ef8:	4395      	bics	r5, r2
    2efa:	6025      	str	r5, [r4, #0]
    2efc:	2e00      	cmp	r6, #0
    2efe:	d102      	bne.n	2f06 <_printf_i+0x12e>
    2f00:	9d04      	ldr	r5, [sp, #16]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d00e      	beq.n	2f24 <_printf_i+0x14c>
    2f06:	9d04      	ldr	r5, [sp, #16]
    2f08:	1c30      	adds	r0, r6, #0
    2f0a:	1c39      	adds	r1, r7, #0
    2f0c:	f001 fe78 	bl	4c00 <__aeabi_uidivmod>
    2f10:	9803      	ldr	r0, [sp, #12]
    2f12:	3d01      	subs	r5, #1
    2f14:	5c43      	ldrb	r3, [r0, r1]
    2f16:	1c30      	adds	r0, r6, #0
    2f18:	702b      	strb	r3, [r5, #0]
    2f1a:	1c39      	adds	r1, r7, #0
    2f1c:	f001 fe2c 	bl	4b78 <__aeabi_uidiv>
    2f20:	1e06      	subs	r6, r0, #0
    2f22:	d1f1      	bne.n	2f08 <_printf_i+0x130>
    2f24:	2f08      	cmp	r7, #8
    2f26:	d109      	bne.n	2f3c <_printf_i+0x164>
    2f28:	6821      	ldr	r1, [r4, #0]
    2f2a:	07c9      	lsls	r1, r1, #31
    2f2c:	d506      	bpl.n	2f3c <_printf_i+0x164>
    2f2e:	6862      	ldr	r2, [r4, #4]
    2f30:	6923      	ldr	r3, [r4, #16]
    2f32:	429a      	cmp	r2, r3
    2f34:	dc02      	bgt.n	2f3c <_printf_i+0x164>
    2f36:	3d01      	subs	r5, #1
    2f38:	2330      	movs	r3, #48	; 0x30
    2f3a:	702b      	strb	r3, [r5, #0]
    2f3c:	9e04      	ldr	r6, [sp, #16]
    2f3e:	1b73      	subs	r3, r6, r5
    2f40:	6123      	str	r3, [r4, #16]
    2f42:	e02a      	b.n	2f9a <_printf_i+0x1c2>
    2f44:	6808      	ldr	r0, [r1, #0]
    2f46:	6813      	ldr	r3, [r2, #0]
    2f48:	6949      	ldr	r1, [r1, #20]
    2f4a:	0605      	lsls	r5, r0, #24
    2f4c:	d504      	bpl.n	2f58 <_printf_i+0x180>
    2f4e:	1d18      	adds	r0, r3, #4
    2f50:	6010      	str	r0, [r2, #0]
    2f52:	681b      	ldr	r3, [r3, #0]
    2f54:	6019      	str	r1, [r3, #0]
    2f56:	e005      	b.n	2f64 <_printf_i+0x18c>
    2f58:	0646      	lsls	r6, r0, #25
    2f5a:	d5f8      	bpl.n	2f4e <_printf_i+0x176>
    2f5c:	1d18      	adds	r0, r3, #4
    2f5e:	6010      	str	r0, [r2, #0]
    2f60:	681b      	ldr	r3, [r3, #0]
    2f62:	8019      	strh	r1, [r3, #0]
    2f64:	2300      	movs	r3, #0
    2f66:	6123      	str	r3, [r4, #16]
    2f68:	9d04      	ldr	r5, [sp, #16]
    2f6a:	e016      	b.n	2f9a <_printf_i+0x1c2>
    2f6c:	6813      	ldr	r3, [r2, #0]
    2f6e:	1d19      	adds	r1, r3, #4
    2f70:	6011      	str	r1, [r2, #0]
    2f72:	681d      	ldr	r5, [r3, #0]
    2f74:	1c28      	adds	r0, r5, #0
    2f76:	f001 fd7b 	bl	4a70 <strlen>
    2f7a:	6863      	ldr	r3, [r4, #4]
    2f7c:	6120      	str	r0, [r4, #16]
    2f7e:	4298      	cmp	r0, r3
    2f80:	d900      	bls.n	2f84 <_printf_i+0x1ac>
    2f82:	6123      	str	r3, [r4, #16]
    2f84:	6920      	ldr	r0, [r4, #16]
    2f86:	6060      	str	r0, [r4, #4]
    2f88:	e004      	b.n	2f94 <_printf_i+0x1bc>
    2f8a:	1c25      	adds	r5, r4, #0
    2f8c:	3542      	adds	r5, #66	; 0x42
    2f8e:	702b      	strb	r3, [r5, #0]
    2f90:	2301      	movs	r3, #1
    2f92:	6123      	str	r3, [r4, #16]
    2f94:	9e04      	ldr	r6, [sp, #16]
    2f96:	2300      	movs	r3, #0
    2f98:	7033      	strb	r3, [r6, #0]
    2f9a:	9e07      	ldr	r6, [sp, #28]
    2f9c:	9805      	ldr	r0, [sp, #20]
    2f9e:	9600      	str	r6, [sp, #0]
    2fa0:	1c21      	adds	r1, r4, #0
    2fa2:	aa09      	add	r2, sp, #36	; 0x24
    2fa4:	9b06      	ldr	r3, [sp, #24]
    2fa6:	f7ff fea3 	bl	2cf0 <_printf_common>
    2faa:	3001      	adds	r0, #1
    2fac:	d102      	bne.n	2fb4 <_printf_i+0x1dc>
    2fae:	2001      	movs	r0, #1
    2fb0:	4240      	negs	r0, r0
    2fb2:	e021      	b.n	2ff8 <_printf_i+0x220>
    2fb4:	1c2a      	adds	r2, r5, #0
    2fb6:	9805      	ldr	r0, [sp, #20]
    2fb8:	9906      	ldr	r1, [sp, #24]
    2fba:	6923      	ldr	r3, [r4, #16]
    2fbc:	9d07      	ldr	r5, [sp, #28]
    2fbe:	47a8      	blx	r5
    2fc0:	3001      	adds	r0, #1
    2fc2:	d0f4      	beq.n	2fae <_printf_i+0x1d6>
    2fc4:	6826      	ldr	r6, [r4, #0]
    2fc6:	07b6      	lsls	r6, r6, #30
    2fc8:	d405      	bmi.n	2fd6 <_printf_i+0x1fe>
    2fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fcc:	68e0      	ldr	r0, [r4, #12]
    2fce:	4298      	cmp	r0, r3
    2fd0:	da12      	bge.n	2ff8 <_printf_i+0x220>
    2fd2:	1c18      	adds	r0, r3, #0
    2fd4:	e010      	b.n	2ff8 <_printf_i+0x220>
    2fd6:	2500      	movs	r5, #0
    2fd8:	68e0      	ldr	r0, [r4, #12]
    2fda:	9909      	ldr	r1, [sp, #36]	; 0x24
    2fdc:	1a43      	subs	r3, r0, r1
    2fde:	429d      	cmp	r5, r3
    2fe0:	daf3      	bge.n	2fca <_printf_i+0x1f2>
    2fe2:	1c22      	adds	r2, r4, #0
    2fe4:	9805      	ldr	r0, [sp, #20]
    2fe6:	9906      	ldr	r1, [sp, #24]
    2fe8:	3219      	adds	r2, #25
    2fea:	2301      	movs	r3, #1
    2fec:	9e07      	ldr	r6, [sp, #28]
    2fee:	47b0      	blx	r6
    2ff0:	3001      	adds	r0, #1
    2ff2:	d0dc      	beq.n	2fae <_printf_i+0x1d6>
    2ff4:	3501      	adds	r5, #1
    2ff6:	e7ef      	b.n	2fd8 <_printf_i+0x200>
    2ff8:	b00b      	add	sp, #44	; 0x2c
    2ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ffc:	00006f1b 	.word	0x00006f1b
    3000:	00006f2c 	.word	0x00006f2c

00003004 <__swbuf_r>:
    3004:	b570      	push	{r4, r5, r6, lr}
    3006:	1c05      	adds	r5, r0, #0
    3008:	1c0e      	adds	r6, r1, #0
    300a:	1c14      	adds	r4, r2, #0
    300c:	2800      	cmp	r0, #0
    300e:	d004      	beq.n	301a <__swbuf_r+0x16>
    3010:	6982      	ldr	r2, [r0, #24]
    3012:	2a00      	cmp	r2, #0
    3014:	d101      	bne.n	301a <__swbuf_r+0x16>
    3016:	f001 f831 	bl	407c <__sinit>
    301a:	4b23      	ldr	r3, [pc, #140]	; (30a8 <__swbuf_r+0xa4>)
    301c:	429c      	cmp	r4, r3
    301e:	d101      	bne.n	3024 <__swbuf_r+0x20>
    3020:	686c      	ldr	r4, [r5, #4]
    3022:	e008      	b.n	3036 <__swbuf_r+0x32>
    3024:	4b21      	ldr	r3, [pc, #132]	; (30ac <__swbuf_r+0xa8>)
    3026:	429c      	cmp	r4, r3
    3028:	d101      	bne.n	302e <__swbuf_r+0x2a>
    302a:	68ac      	ldr	r4, [r5, #8]
    302c:	e003      	b.n	3036 <__swbuf_r+0x32>
    302e:	4b20      	ldr	r3, [pc, #128]	; (30b0 <__swbuf_r+0xac>)
    3030:	429c      	cmp	r4, r3
    3032:	d100      	bne.n	3036 <__swbuf_r+0x32>
    3034:	68ec      	ldr	r4, [r5, #12]
    3036:	69a3      	ldr	r3, [r4, #24]
    3038:	60a3      	str	r3, [r4, #8]
    303a:	89a3      	ldrh	r3, [r4, #12]
    303c:	071a      	lsls	r2, r3, #28
    303e:	d50a      	bpl.n	3056 <__swbuf_r+0x52>
    3040:	6923      	ldr	r3, [r4, #16]
    3042:	2b00      	cmp	r3, #0
    3044:	d007      	beq.n	3056 <__swbuf_r+0x52>
    3046:	6822      	ldr	r2, [r4, #0]
    3048:	6923      	ldr	r3, [r4, #16]
    304a:	b2f6      	uxtb	r6, r6
    304c:	1ad0      	subs	r0, r2, r3
    304e:	6962      	ldr	r2, [r4, #20]
    3050:	4290      	cmp	r0, r2
    3052:	db0f      	blt.n	3074 <__swbuf_r+0x70>
    3054:	e008      	b.n	3068 <__swbuf_r+0x64>
    3056:	1c28      	adds	r0, r5, #0
    3058:	1c21      	adds	r1, r4, #0
    305a:	f000 f82b 	bl	30b4 <__swsetup_r>
    305e:	2800      	cmp	r0, #0
    3060:	d0f1      	beq.n	3046 <__swbuf_r+0x42>
    3062:	2001      	movs	r0, #1
    3064:	4240      	negs	r0, r0
    3066:	e01d      	b.n	30a4 <__swbuf_r+0xa0>
    3068:	1c28      	adds	r0, r5, #0
    306a:	1c21      	adds	r1, r4, #0
    306c:	f000 ff86 	bl	3f7c <_fflush_r>
    3070:	2800      	cmp	r0, #0
    3072:	d1f6      	bne.n	3062 <__swbuf_r+0x5e>
    3074:	68a3      	ldr	r3, [r4, #8]
    3076:	3001      	adds	r0, #1
    3078:	3b01      	subs	r3, #1
    307a:	60a3      	str	r3, [r4, #8]
    307c:	6823      	ldr	r3, [r4, #0]
    307e:	1c5a      	adds	r2, r3, #1
    3080:	6022      	str	r2, [r4, #0]
    3082:	701e      	strb	r6, [r3, #0]
    3084:	6963      	ldr	r3, [r4, #20]
    3086:	4298      	cmp	r0, r3
    3088:	d005      	beq.n	3096 <__swbuf_r+0x92>
    308a:	89a3      	ldrh	r3, [r4, #12]
    308c:	1c30      	adds	r0, r6, #0
    308e:	07da      	lsls	r2, r3, #31
    3090:	d508      	bpl.n	30a4 <__swbuf_r+0xa0>
    3092:	2e0a      	cmp	r6, #10
    3094:	d106      	bne.n	30a4 <__swbuf_r+0xa0>
    3096:	1c28      	adds	r0, r5, #0
    3098:	1c21      	adds	r1, r4, #0
    309a:	f000 ff6f 	bl	3f7c <_fflush_r>
    309e:	2800      	cmp	r0, #0
    30a0:	d1df      	bne.n	3062 <__swbuf_r+0x5e>
    30a2:	1c30      	adds	r0, r6, #0
    30a4:	bd70      	pop	{r4, r5, r6, pc}
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	00006f4c 	.word	0x00006f4c
    30ac:	00006f6c 	.word	0x00006f6c
    30b0:	00006f8c 	.word	0x00006f8c

000030b4 <__swsetup_r>:
    30b4:	4b34      	ldr	r3, [pc, #208]	; (3188 <__swsetup_r+0xd4>)
    30b6:	b570      	push	{r4, r5, r6, lr}
    30b8:	681d      	ldr	r5, [r3, #0]
    30ba:	1c06      	adds	r6, r0, #0
    30bc:	1c0c      	adds	r4, r1, #0
    30be:	2d00      	cmp	r5, #0
    30c0:	d005      	beq.n	30ce <__swsetup_r+0x1a>
    30c2:	69a9      	ldr	r1, [r5, #24]
    30c4:	2900      	cmp	r1, #0
    30c6:	d102      	bne.n	30ce <__swsetup_r+0x1a>
    30c8:	1c28      	adds	r0, r5, #0
    30ca:	f000 ffd7 	bl	407c <__sinit>
    30ce:	4b2f      	ldr	r3, [pc, #188]	; (318c <__swsetup_r+0xd8>)
    30d0:	429c      	cmp	r4, r3
    30d2:	d101      	bne.n	30d8 <__swsetup_r+0x24>
    30d4:	686c      	ldr	r4, [r5, #4]
    30d6:	e008      	b.n	30ea <__swsetup_r+0x36>
    30d8:	4b2d      	ldr	r3, [pc, #180]	; (3190 <__swsetup_r+0xdc>)
    30da:	429c      	cmp	r4, r3
    30dc:	d101      	bne.n	30e2 <__swsetup_r+0x2e>
    30de:	68ac      	ldr	r4, [r5, #8]
    30e0:	e003      	b.n	30ea <__swsetup_r+0x36>
    30e2:	4b2c      	ldr	r3, [pc, #176]	; (3194 <__swsetup_r+0xe0>)
    30e4:	429c      	cmp	r4, r3
    30e6:	d100      	bne.n	30ea <__swsetup_r+0x36>
    30e8:	68ec      	ldr	r4, [r5, #12]
    30ea:	89a2      	ldrh	r2, [r4, #12]
    30ec:	b293      	uxth	r3, r2
    30ee:	0719      	lsls	r1, r3, #28
    30f0:	d421      	bmi.n	3136 <__swsetup_r+0x82>
    30f2:	06d9      	lsls	r1, r3, #27
    30f4:	d405      	bmi.n	3102 <__swsetup_r+0x4e>
    30f6:	2309      	movs	r3, #9
    30f8:	6033      	str	r3, [r6, #0]
    30fa:	2340      	movs	r3, #64	; 0x40
    30fc:	431a      	orrs	r2, r3
    30fe:	81a2      	strh	r2, [r4, #12]
    3100:	e03f      	b.n	3182 <__swsetup_r+0xce>
    3102:	075a      	lsls	r2, r3, #29
    3104:	d513      	bpl.n	312e <__swsetup_r+0x7a>
    3106:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3108:	2900      	cmp	r1, #0
    310a:	d008      	beq.n	311e <__swsetup_r+0x6a>
    310c:	1c23      	adds	r3, r4, #0
    310e:	3344      	adds	r3, #68	; 0x44
    3110:	4299      	cmp	r1, r3
    3112:	d002      	beq.n	311a <__swsetup_r+0x66>
    3114:	1c30      	adds	r0, r6, #0
    3116:	f001 fb87 	bl	4828 <_free_r>
    311a:	2300      	movs	r3, #0
    311c:	6363      	str	r3, [r4, #52]	; 0x34
    311e:	89a3      	ldrh	r3, [r4, #12]
    3120:	2224      	movs	r2, #36	; 0x24
    3122:	4393      	bics	r3, r2
    3124:	81a3      	strh	r3, [r4, #12]
    3126:	2300      	movs	r3, #0
    3128:	6063      	str	r3, [r4, #4]
    312a:	6923      	ldr	r3, [r4, #16]
    312c:	6023      	str	r3, [r4, #0]
    312e:	89a3      	ldrh	r3, [r4, #12]
    3130:	2208      	movs	r2, #8
    3132:	4313      	orrs	r3, r2
    3134:	81a3      	strh	r3, [r4, #12]
    3136:	6921      	ldr	r1, [r4, #16]
    3138:	2900      	cmp	r1, #0
    313a:	d10b      	bne.n	3154 <__swsetup_r+0xa0>
    313c:	89a3      	ldrh	r3, [r4, #12]
    313e:	22a0      	movs	r2, #160	; 0xa0
    3140:	0092      	lsls	r2, r2, #2
    3142:	401a      	ands	r2, r3
    3144:	2380      	movs	r3, #128	; 0x80
    3146:	009b      	lsls	r3, r3, #2
    3148:	429a      	cmp	r2, r3
    314a:	d003      	beq.n	3154 <__swsetup_r+0xa0>
    314c:	1c30      	adds	r0, r6, #0
    314e:	1c21      	adds	r1, r4, #0
    3150:	f001 f808 	bl	4164 <__smakebuf_r>
    3154:	89a3      	ldrh	r3, [r4, #12]
    3156:	2201      	movs	r2, #1
    3158:	401a      	ands	r2, r3
    315a:	d005      	beq.n	3168 <__swsetup_r+0xb4>
    315c:	6961      	ldr	r1, [r4, #20]
    315e:	2200      	movs	r2, #0
    3160:	60a2      	str	r2, [r4, #8]
    3162:	424a      	negs	r2, r1
    3164:	61a2      	str	r2, [r4, #24]
    3166:	e003      	b.n	3170 <__swsetup_r+0xbc>
    3168:	0799      	lsls	r1, r3, #30
    316a:	d400      	bmi.n	316e <__swsetup_r+0xba>
    316c:	6962      	ldr	r2, [r4, #20]
    316e:	60a2      	str	r2, [r4, #8]
    3170:	6922      	ldr	r2, [r4, #16]
    3172:	2000      	movs	r0, #0
    3174:	4282      	cmp	r2, r0
    3176:	d106      	bne.n	3186 <__swsetup_r+0xd2>
    3178:	0619      	lsls	r1, r3, #24
    317a:	d504      	bpl.n	3186 <__swsetup_r+0xd2>
    317c:	2240      	movs	r2, #64	; 0x40
    317e:	4313      	orrs	r3, r2
    3180:	81a3      	strh	r3, [r4, #12]
    3182:	2001      	movs	r0, #1
    3184:	4240      	negs	r0, r0
    3186:	bd70      	pop	{r4, r5, r6, pc}
    3188:	2000006c 	.word	0x2000006c
    318c:	00006f4c 	.word	0x00006f4c
    3190:	00006f6c 	.word	0x00006f6c
    3194:	00006f8c 	.word	0x00006f8c

00003198 <quorem>:
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	b089      	sub	sp, #36	; 0x24
    319c:	9106      	str	r1, [sp, #24]
    319e:	690b      	ldr	r3, [r1, #16]
    31a0:	6901      	ldr	r1, [r0, #16]
    31a2:	1c05      	adds	r5, r0, #0
    31a4:	2600      	movs	r6, #0
    31a6:	4299      	cmp	r1, r3
    31a8:	db7f      	blt.n	32aa <quorem+0x112>
    31aa:	9c06      	ldr	r4, [sp, #24]
    31ac:	1e5f      	subs	r7, r3, #1
    31ae:	3414      	adds	r4, #20
    31b0:	9404      	str	r4, [sp, #16]
    31b2:	9904      	ldr	r1, [sp, #16]
    31b4:	00bc      	lsls	r4, r7, #2
    31b6:	1909      	adds	r1, r1, r4
    31b8:	1c02      	adds	r2, r0, #0
    31ba:	680b      	ldr	r3, [r1, #0]
    31bc:	3214      	adds	r2, #20
    31be:	9105      	str	r1, [sp, #20]
    31c0:	1914      	adds	r4, r2, r4
    31c2:	1c19      	adds	r1, r3, #0
    31c4:	3101      	adds	r1, #1
    31c6:	6820      	ldr	r0, [r4, #0]
    31c8:	9203      	str	r2, [sp, #12]
    31ca:	f001 fcd5 	bl	4b78 <__aeabi_uidiv>
    31ce:	9002      	str	r0, [sp, #8]
    31d0:	42b0      	cmp	r0, r6
    31d2:	d038      	beq.n	3246 <quorem+0xae>
    31d4:	9904      	ldr	r1, [sp, #16]
    31d6:	9b03      	ldr	r3, [sp, #12]
    31d8:	468c      	mov	ip, r1
    31da:	9601      	str	r6, [sp, #4]
    31dc:	9607      	str	r6, [sp, #28]
    31de:	4662      	mov	r2, ip
    31e0:	3204      	adds	r2, #4
    31e2:	4694      	mov	ip, r2
    31e4:	3a04      	subs	r2, #4
    31e6:	ca40      	ldmia	r2!, {r6}
    31e8:	9902      	ldr	r1, [sp, #8]
    31ea:	b2b0      	uxth	r0, r6
    31ec:	4348      	muls	r0, r1
    31ee:	0c31      	lsrs	r1, r6, #16
    31f0:	9e02      	ldr	r6, [sp, #8]
    31f2:	9a01      	ldr	r2, [sp, #4]
    31f4:	4371      	muls	r1, r6
    31f6:	1810      	adds	r0, r2, r0
    31f8:	0c02      	lsrs	r2, r0, #16
    31fa:	1851      	adds	r1, r2, r1
    31fc:	0c0a      	lsrs	r2, r1, #16
    31fe:	9201      	str	r2, [sp, #4]
    3200:	681a      	ldr	r2, [r3, #0]
    3202:	b280      	uxth	r0, r0
    3204:	b296      	uxth	r6, r2
    3206:	9a07      	ldr	r2, [sp, #28]
    3208:	b289      	uxth	r1, r1
    320a:	18b6      	adds	r6, r6, r2
    320c:	1a30      	subs	r0, r6, r0
    320e:	681e      	ldr	r6, [r3, #0]
    3210:	0c32      	lsrs	r2, r6, #16
    3212:	1a52      	subs	r2, r2, r1
    3214:	1406      	asrs	r6, r0, #16
    3216:	1992      	adds	r2, r2, r6
    3218:	1411      	asrs	r1, r2, #16
    321a:	b280      	uxth	r0, r0
    321c:	0412      	lsls	r2, r2, #16
    321e:	9e05      	ldr	r6, [sp, #20]
    3220:	4310      	orrs	r0, r2
    3222:	9107      	str	r1, [sp, #28]
    3224:	c301      	stmia	r3!, {r0}
    3226:	4566      	cmp	r6, ip
    3228:	d2d9      	bcs.n	31de <quorem+0x46>
    322a:	6821      	ldr	r1, [r4, #0]
    322c:	2900      	cmp	r1, #0
    322e:	d10a      	bne.n	3246 <quorem+0xae>
    3230:	9e03      	ldr	r6, [sp, #12]
    3232:	3c04      	subs	r4, #4
    3234:	42b4      	cmp	r4, r6
    3236:	d801      	bhi.n	323c <quorem+0xa4>
    3238:	612f      	str	r7, [r5, #16]
    323a:	e004      	b.n	3246 <quorem+0xae>
    323c:	6821      	ldr	r1, [r4, #0]
    323e:	2900      	cmp	r1, #0
    3240:	d1fa      	bne.n	3238 <quorem+0xa0>
    3242:	3f01      	subs	r7, #1
    3244:	e7f4      	b.n	3230 <quorem+0x98>
    3246:	1c28      	adds	r0, r5, #0
    3248:	9906      	ldr	r1, [sp, #24]
    324a:	f001 fa05 	bl	4658 <__mcmp>
    324e:	2800      	cmp	r0, #0
    3250:	db2a      	blt.n	32a8 <quorem+0x110>
    3252:	9c02      	ldr	r4, [sp, #8]
    3254:	9a03      	ldr	r2, [sp, #12]
    3256:	3401      	adds	r4, #1
    3258:	9b04      	ldr	r3, [sp, #16]
    325a:	9402      	str	r4, [sp, #8]
    325c:	2400      	movs	r4, #0
    325e:	6811      	ldr	r1, [r2, #0]
    3260:	cb40      	ldmia	r3!, {r6}
    3262:	b288      	uxth	r0, r1
    3264:	1900      	adds	r0, r0, r4
    3266:	6814      	ldr	r4, [r2, #0]
    3268:	b2b1      	uxth	r1, r6
    326a:	1a40      	subs	r0, r0, r1
    326c:	0c36      	lsrs	r6, r6, #16
    326e:	0c21      	lsrs	r1, r4, #16
    3270:	1b89      	subs	r1, r1, r6
    3272:	1404      	asrs	r4, r0, #16
    3274:	1909      	adds	r1, r1, r4
    3276:	140c      	asrs	r4, r1, #16
    3278:	b280      	uxth	r0, r0
    327a:	0409      	lsls	r1, r1, #16
    327c:	9e05      	ldr	r6, [sp, #20]
    327e:	4301      	orrs	r1, r0
    3280:	c202      	stmia	r2!, {r1}
    3282:	429e      	cmp	r6, r3
    3284:	d2eb      	bcs.n	325e <quorem+0xc6>
    3286:	9c03      	ldr	r4, [sp, #12]
    3288:	00bb      	lsls	r3, r7, #2
    328a:	18e3      	adds	r3, r4, r3
    328c:	681e      	ldr	r6, [r3, #0]
    328e:	2e00      	cmp	r6, #0
    3290:	d10a      	bne.n	32a8 <quorem+0x110>
    3292:	9c03      	ldr	r4, [sp, #12]
    3294:	3b04      	subs	r3, #4
    3296:	42a3      	cmp	r3, r4
    3298:	d801      	bhi.n	329e <quorem+0x106>
    329a:	612f      	str	r7, [r5, #16]
    329c:	e004      	b.n	32a8 <quorem+0x110>
    329e:	681e      	ldr	r6, [r3, #0]
    32a0:	2e00      	cmp	r6, #0
    32a2:	d1fa      	bne.n	329a <quorem+0x102>
    32a4:	3f01      	subs	r7, #1
    32a6:	e7f4      	b.n	3292 <quorem+0xfa>
    32a8:	9e02      	ldr	r6, [sp, #8]
    32aa:	1c30      	adds	r0, r6, #0
    32ac:	b009      	add	sp, #36	; 0x24
    32ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032b0 <_dtoa_r>:
    32b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    32b4:	b09b      	sub	sp, #108	; 0x6c
    32b6:	9007      	str	r0, [sp, #28]
    32b8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    32ba:	9204      	str	r2, [sp, #16]
    32bc:	9305      	str	r3, [sp, #20]
    32be:	2c00      	cmp	r4, #0
    32c0:	d108      	bne.n	32d4 <_dtoa_r+0x24>
    32c2:	2010      	movs	r0, #16
    32c4:	f000 ff9e 	bl	4204 <malloc>
    32c8:	9907      	ldr	r1, [sp, #28]
    32ca:	6248      	str	r0, [r1, #36]	; 0x24
    32cc:	6044      	str	r4, [r0, #4]
    32ce:	6084      	str	r4, [r0, #8]
    32d0:	6004      	str	r4, [r0, #0]
    32d2:	60c4      	str	r4, [r0, #12]
    32d4:	9c07      	ldr	r4, [sp, #28]
    32d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32d8:	6819      	ldr	r1, [r3, #0]
    32da:	2900      	cmp	r1, #0
    32dc:	d00a      	beq.n	32f4 <_dtoa_r+0x44>
    32de:	685b      	ldr	r3, [r3, #4]
    32e0:	2201      	movs	r2, #1
    32e2:	409a      	lsls	r2, r3
    32e4:	604b      	str	r3, [r1, #4]
    32e6:	608a      	str	r2, [r1, #8]
    32e8:	1c20      	adds	r0, r4, #0
    32ea:	f000 ffd8 	bl	429e <_Bfree>
    32ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32f0:	2200      	movs	r2, #0
    32f2:	601a      	str	r2, [r3, #0]
    32f4:	9805      	ldr	r0, [sp, #20]
    32f6:	2800      	cmp	r0, #0
    32f8:	da05      	bge.n	3306 <_dtoa_r+0x56>
    32fa:	2301      	movs	r3, #1
    32fc:	602b      	str	r3, [r5, #0]
    32fe:	0043      	lsls	r3, r0, #1
    3300:	085b      	lsrs	r3, r3, #1
    3302:	9305      	str	r3, [sp, #20]
    3304:	e001      	b.n	330a <_dtoa_r+0x5a>
    3306:	2300      	movs	r3, #0
    3308:	602b      	str	r3, [r5, #0]
    330a:	9e05      	ldr	r6, [sp, #20]
    330c:	4bbe      	ldr	r3, [pc, #760]	; (3608 <_dtoa_r+0x358>)
    330e:	1c32      	adds	r2, r6, #0
    3310:	401a      	ands	r2, r3
    3312:	429a      	cmp	r2, r3
    3314:	d118      	bne.n	3348 <_dtoa_r+0x98>
    3316:	4bbd      	ldr	r3, [pc, #756]	; (360c <_dtoa_r+0x35c>)
    3318:	9c22      	ldr	r4, [sp, #136]	; 0x88
    331a:	9d04      	ldr	r5, [sp, #16]
    331c:	6023      	str	r3, [r4, #0]
    331e:	2d00      	cmp	r5, #0
    3320:	d101      	bne.n	3326 <_dtoa_r+0x76>
    3322:	0336      	lsls	r6, r6, #12
    3324:	d001      	beq.n	332a <_dtoa_r+0x7a>
    3326:	48ba      	ldr	r0, [pc, #744]	; (3610 <_dtoa_r+0x360>)
    3328:	e000      	b.n	332c <_dtoa_r+0x7c>
    332a:	48ba      	ldr	r0, [pc, #744]	; (3614 <_dtoa_r+0x364>)
    332c:	9c24      	ldr	r4, [sp, #144]	; 0x90
    332e:	2c00      	cmp	r4, #0
    3330:	d101      	bne.n	3336 <_dtoa_r+0x86>
    3332:	f000 fd93 	bl	3e5c <_dtoa_r+0xbac>
    3336:	78c2      	ldrb	r2, [r0, #3]
    3338:	1cc3      	adds	r3, r0, #3
    333a:	2a00      	cmp	r2, #0
    333c:	d000      	beq.n	3340 <_dtoa_r+0x90>
    333e:	3305      	adds	r3, #5
    3340:	9d24      	ldr	r5, [sp, #144]	; 0x90
    3342:	602b      	str	r3, [r5, #0]
    3344:	f000 fd8a 	bl	3e5c <_dtoa_r+0xbac>
    3348:	9c04      	ldr	r4, [sp, #16]
    334a:	9d05      	ldr	r5, [sp, #20]
    334c:	4ba5      	ldr	r3, [pc, #660]	; (35e4 <_dtoa_r+0x334>)
    334e:	4aa4      	ldr	r2, [pc, #656]	; (35e0 <_dtoa_r+0x330>)
    3350:	1c20      	adds	r0, r4, #0
    3352:	1c29      	adds	r1, r5, #0
    3354:	f001 fcd0 	bl	4cf8 <__aeabi_dcmpeq>
    3358:	1e07      	subs	r7, r0, #0
    335a:	d00c      	beq.n	3376 <_dtoa_r+0xc6>
    335c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    335e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    3360:	2301      	movs	r3, #1
    3362:	6023      	str	r3, [r4, #0]
    3364:	2d00      	cmp	r5, #0
    3366:	d101      	bne.n	336c <_dtoa_r+0xbc>
    3368:	f000 fd75 	bl	3e56 <_dtoa_r+0xba6>
    336c:	48aa      	ldr	r0, [pc, #680]	; (3618 <_dtoa_r+0x368>)
    336e:	6028      	str	r0, [r5, #0]
    3370:	3801      	subs	r0, #1
    3372:	f000 fd73 	bl	3e5c <_dtoa_r+0xbac>
    3376:	ab19      	add	r3, sp, #100	; 0x64
    3378:	9300      	str	r3, [sp, #0]
    337a:	ab18      	add	r3, sp, #96	; 0x60
    337c:	9301      	str	r3, [sp, #4]
    337e:	9807      	ldr	r0, [sp, #28]
    3380:	1c2b      	adds	r3, r5, #0
    3382:	1c22      	adds	r2, r4, #0
    3384:	f001 f9ea 	bl	475c <__d2b>
    3388:	0073      	lsls	r3, r6, #1
    338a:	900a      	str	r0, [sp, #40]	; 0x28
    338c:	0d5b      	lsrs	r3, r3, #21
    338e:	d009      	beq.n	33a4 <_dtoa_r+0xf4>
    3390:	1c20      	adds	r0, r4, #0
    3392:	4ca2      	ldr	r4, [pc, #648]	; (361c <_dtoa_r+0x36c>)
    3394:	032a      	lsls	r2, r5, #12
    3396:	0b12      	lsrs	r2, r2, #12
    3398:	1c21      	adds	r1, r4, #0
    339a:	4311      	orrs	r1, r2
    339c:	4aa0      	ldr	r2, [pc, #640]	; (3620 <_dtoa_r+0x370>)
    339e:	9716      	str	r7, [sp, #88]	; 0x58
    33a0:	189e      	adds	r6, r3, r2
    33a2:	e01b      	b.n	33dc <_dtoa_r+0x12c>
    33a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    33a6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    33a8:	191d      	adds	r5, r3, r4
    33aa:	4b9e      	ldr	r3, [pc, #632]	; (3624 <_dtoa_r+0x374>)
    33ac:	429d      	cmp	r5, r3
    33ae:	db09      	blt.n	33c4 <_dtoa_r+0x114>
    33b0:	499d      	ldr	r1, [pc, #628]	; (3628 <_dtoa_r+0x378>)
    33b2:	9a04      	ldr	r2, [sp, #16]
    33b4:	4b9d      	ldr	r3, [pc, #628]	; (362c <_dtoa_r+0x37c>)
    33b6:	1868      	adds	r0, r5, r1
    33b8:	40c2      	lsrs	r2, r0
    33ba:	1b5b      	subs	r3, r3, r5
    33bc:	1c10      	adds	r0, r2, #0
    33be:	409e      	lsls	r6, r3
    33c0:	4330      	orrs	r0, r6
    33c2:	e004      	b.n	33ce <_dtoa_r+0x11e>
    33c4:	489a      	ldr	r0, [pc, #616]	; (3630 <_dtoa_r+0x380>)
    33c6:	9b04      	ldr	r3, [sp, #16]
    33c8:	1b40      	subs	r0, r0, r5
    33ca:	4083      	lsls	r3, r0
    33cc:	1c18      	adds	r0, r3, #0
    33ce:	f003 fc1b 	bl	6c08 <__aeabi_ui2d>
    33d2:	4c98      	ldr	r4, [pc, #608]	; (3634 <_dtoa_r+0x384>)
    33d4:	1e6e      	subs	r6, r5, #1
    33d6:	2501      	movs	r5, #1
    33d8:	1909      	adds	r1, r1, r4
    33da:	9516      	str	r5, [sp, #88]	; 0x58
    33dc:	4a82      	ldr	r2, [pc, #520]	; (35e8 <_dtoa_r+0x338>)
    33de:	4b83      	ldr	r3, [pc, #524]	; (35ec <_dtoa_r+0x33c>)
    33e0:	f003 f86c 	bl	64bc <__aeabi_dsub>
    33e4:	4a82      	ldr	r2, [pc, #520]	; (35f0 <_dtoa_r+0x340>)
    33e6:	4b83      	ldr	r3, [pc, #524]	; (35f4 <_dtoa_r+0x344>)
    33e8:	f002 fdd8 	bl	5f9c <__aeabi_dmul>
    33ec:	4a82      	ldr	r2, [pc, #520]	; (35f8 <_dtoa_r+0x348>)
    33ee:	4b83      	ldr	r3, [pc, #524]	; (35fc <_dtoa_r+0x34c>)
    33f0:	f001 fe48 	bl	5084 <__aeabi_dadd>
    33f4:	1c04      	adds	r4, r0, #0
    33f6:	1c30      	adds	r0, r6, #0
    33f8:	1c0d      	adds	r5, r1, #0
    33fa:	f003 fbc7 	bl	6b8c <__aeabi_i2d>
    33fe:	4a80      	ldr	r2, [pc, #512]	; (3600 <_dtoa_r+0x350>)
    3400:	4b80      	ldr	r3, [pc, #512]	; (3604 <_dtoa_r+0x354>)
    3402:	f002 fdcb 	bl	5f9c <__aeabi_dmul>
    3406:	1c02      	adds	r2, r0, #0
    3408:	1c0b      	adds	r3, r1, #0
    340a:	1c20      	adds	r0, r4, #0
    340c:	1c29      	adds	r1, r5, #0
    340e:	f001 fe39 	bl	5084 <__aeabi_dadd>
    3412:	1c04      	adds	r4, r0, #0
    3414:	1c0d      	adds	r5, r1, #0
    3416:	f003 fb85 	bl	6b24 <__aeabi_d2iz>
    341a:	4b72      	ldr	r3, [pc, #456]	; (35e4 <_dtoa_r+0x334>)
    341c:	4a70      	ldr	r2, [pc, #448]	; (35e0 <_dtoa_r+0x330>)
    341e:	9006      	str	r0, [sp, #24]
    3420:	1c29      	adds	r1, r5, #0
    3422:	1c20      	adds	r0, r4, #0
    3424:	f001 fc6e 	bl	4d04 <__aeabi_dcmplt>
    3428:	2800      	cmp	r0, #0
    342a:	d00d      	beq.n	3448 <_dtoa_r+0x198>
    342c:	9806      	ldr	r0, [sp, #24]
    342e:	f003 fbad 	bl	6b8c <__aeabi_i2d>
    3432:	1c0b      	adds	r3, r1, #0
    3434:	1c02      	adds	r2, r0, #0
    3436:	1c29      	adds	r1, r5, #0
    3438:	1c20      	adds	r0, r4, #0
    343a:	f001 fc5d 	bl	4cf8 <__aeabi_dcmpeq>
    343e:	9c06      	ldr	r4, [sp, #24]
    3440:	4243      	negs	r3, r0
    3442:	4143      	adcs	r3, r0
    3444:	1ae4      	subs	r4, r4, r3
    3446:	9406      	str	r4, [sp, #24]
    3448:	9c06      	ldr	r4, [sp, #24]
    344a:	2501      	movs	r5, #1
    344c:	9513      	str	r5, [sp, #76]	; 0x4c
    344e:	2c16      	cmp	r4, #22
    3450:	d810      	bhi.n	3474 <_dtoa_r+0x1c4>
    3452:	4a79      	ldr	r2, [pc, #484]	; (3638 <_dtoa_r+0x388>)
    3454:	00e3      	lsls	r3, r4, #3
    3456:	18d3      	adds	r3, r2, r3
    3458:	6818      	ldr	r0, [r3, #0]
    345a:	6859      	ldr	r1, [r3, #4]
    345c:	9a04      	ldr	r2, [sp, #16]
    345e:	9b05      	ldr	r3, [sp, #20]
    3460:	f001 fc64 	bl	4d2c <__aeabi_dcmpgt>
    3464:	2800      	cmp	r0, #0
    3466:	d004      	beq.n	3472 <_dtoa_r+0x1c2>
    3468:	3c01      	subs	r4, #1
    346a:	2500      	movs	r5, #0
    346c:	9406      	str	r4, [sp, #24]
    346e:	9513      	str	r5, [sp, #76]	; 0x4c
    3470:	e000      	b.n	3474 <_dtoa_r+0x1c4>
    3472:	9013      	str	r0, [sp, #76]	; 0x4c
    3474:	9818      	ldr	r0, [sp, #96]	; 0x60
    3476:	2400      	movs	r4, #0
    3478:	1b86      	subs	r6, r0, r6
    347a:	1c35      	adds	r5, r6, #0
    347c:	9402      	str	r4, [sp, #8]
    347e:	3d01      	subs	r5, #1
    3480:	9509      	str	r5, [sp, #36]	; 0x24
    3482:	d504      	bpl.n	348e <_dtoa_r+0x1de>
    3484:	9c09      	ldr	r4, [sp, #36]	; 0x24
    3486:	2500      	movs	r5, #0
    3488:	4264      	negs	r4, r4
    348a:	9402      	str	r4, [sp, #8]
    348c:	9509      	str	r5, [sp, #36]	; 0x24
    348e:	9c06      	ldr	r4, [sp, #24]
    3490:	2c00      	cmp	r4, #0
    3492:	db06      	blt.n	34a2 <_dtoa_r+0x1f2>
    3494:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3496:	9412      	str	r4, [sp, #72]	; 0x48
    3498:	192d      	adds	r5, r5, r4
    349a:	2400      	movs	r4, #0
    349c:	9509      	str	r5, [sp, #36]	; 0x24
    349e:	940d      	str	r4, [sp, #52]	; 0x34
    34a0:	e007      	b.n	34b2 <_dtoa_r+0x202>
    34a2:	9c06      	ldr	r4, [sp, #24]
    34a4:	9d02      	ldr	r5, [sp, #8]
    34a6:	1b2d      	subs	r5, r5, r4
    34a8:	9502      	str	r5, [sp, #8]
    34aa:	4265      	negs	r5, r4
    34ac:	2400      	movs	r4, #0
    34ae:	950d      	str	r5, [sp, #52]	; 0x34
    34b0:	9412      	str	r4, [sp, #72]	; 0x48
    34b2:	9d20      	ldr	r5, [sp, #128]	; 0x80
    34b4:	2401      	movs	r4, #1
    34b6:	2d09      	cmp	r5, #9
    34b8:	d824      	bhi.n	3504 <_dtoa_r+0x254>
    34ba:	2d05      	cmp	r5, #5
    34bc:	dd02      	ble.n	34c4 <_dtoa_r+0x214>
    34be:	3d04      	subs	r5, #4
    34c0:	9520      	str	r5, [sp, #128]	; 0x80
    34c2:	2400      	movs	r4, #0
    34c4:	9820      	ldr	r0, [sp, #128]	; 0x80
    34c6:	3802      	subs	r0, #2
    34c8:	2803      	cmp	r0, #3
    34ca:	d823      	bhi.n	3514 <_dtoa_r+0x264>
    34cc:	f001 fb4a 	bl	4b64 <__gnu_thumb1_case_uqi>
    34d0:	04020e06 	.word	0x04020e06
    34d4:	2501      	movs	r5, #1
    34d6:	e002      	b.n	34de <_dtoa_r+0x22e>
    34d8:	2501      	movs	r5, #1
    34da:	e008      	b.n	34ee <_dtoa_r+0x23e>
    34dc:	2500      	movs	r5, #0
    34de:	9510      	str	r5, [sp, #64]	; 0x40
    34e0:	9d21      	ldr	r5, [sp, #132]	; 0x84
    34e2:	2d00      	cmp	r5, #0
    34e4:	dd1f      	ble.n	3526 <_dtoa_r+0x276>
    34e6:	950c      	str	r5, [sp, #48]	; 0x30
    34e8:	9508      	str	r5, [sp, #32]
    34ea:	e009      	b.n	3500 <_dtoa_r+0x250>
    34ec:	2500      	movs	r5, #0
    34ee:	9510      	str	r5, [sp, #64]	; 0x40
    34f0:	9806      	ldr	r0, [sp, #24]
    34f2:	9d21      	ldr	r5, [sp, #132]	; 0x84
    34f4:	182d      	adds	r5, r5, r0
    34f6:	950c      	str	r5, [sp, #48]	; 0x30
    34f8:	3501      	adds	r5, #1
    34fa:	9508      	str	r5, [sp, #32]
    34fc:	2d00      	cmp	r5, #0
    34fe:	dd18      	ble.n	3532 <_dtoa_r+0x282>
    3500:	1c2b      	adds	r3, r5, #0
    3502:	e017      	b.n	3534 <_dtoa_r+0x284>
    3504:	4263      	negs	r3, r4
    3506:	2500      	movs	r5, #0
    3508:	930c      	str	r3, [sp, #48]	; 0x30
    350a:	9308      	str	r3, [sp, #32]
    350c:	9520      	str	r5, [sp, #128]	; 0x80
    350e:	9410      	str	r4, [sp, #64]	; 0x40
    3510:	2312      	movs	r3, #18
    3512:	e006      	b.n	3522 <_dtoa_r+0x272>
    3514:	2501      	movs	r5, #1
    3516:	426b      	negs	r3, r5
    3518:	9510      	str	r5, [sp, #64]	; 0x40
    351a:	930c      	str	r3, [sp, #48]	; 0x30
    351c:	9308      	str	r3, [sp, #32]
    351e:	2500      	movs	r5, #0
    3520:	2312      	movs	r3, #18
    3522:	9521      	str	r5, [sp, #132]	; 0x84
    3524:	e006      	b.n	3534 <_dtoa_r+0x284>
    3526:	2501      	movs	r5, #1
    3528:	950c      	str	r5, [sp, #48]	; 0x30
    352a:	9508      	str	r5, [sp, #32]
    352c:	1c2b      	adds	r3, r5, #0
    352e:	9521      	str	r5, [sp, #132]	; 0x84
    3530:	e000      	b.n	3534 <_dtoa_r+0x284>
    3532:	2301      	movs	r3, #1
    3534:	9807      	ldr	r0, [sp, #28]
    3536:	2200      	movs	r2, #0
    3538:	6a45      	ldr	r5, [r0, #36]	; 0x24
    353a:	606a      	str	r2, [r5, #4]
    353c:	2204      	movs	r2, #4
    353e:	1c10      	adds	r0, r2, #0
    3540:	3014      	adds	r0, #20
    3542:	6869      	ldr	r1, [r5, #4]
    3544:	4298      	cmp	r0, r3
    3546:	d803      	bhi.n	3550 <_dtoa_r+0x2a0>
    3548:	3101      	adds	r1, #1
    354a:	6069      	str	r1, [r5, #4]
    354c:	0052      	lsls	r2, r2, #1
    354e:	e7f6      	b.n	353e <_dtoa_r+0x28e>
    3550:	9807      	ldr	r0, [sp, #28]
    3552:	f000 fe6c 	bl	422e <_Balloc>
    3556:	6028      	str	r0, [r5, #0]
    3558:	9d07      	ldr	r5, [sp, #28]
    355a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    355c:	9d08      	ldr	r5, [sp, #32]
    355e:	681b      	ldr	r3, [r3, #0]
    3560:	930b      	str	r3, [sp, #44]	; 0x2c
    3562:	2d0e      	cmp	r5, #14
    3564:	d900      	bls.n	3568 <_dtoa_r+0x2b8>
    3566:	e187      	b.n	3878 <_dtoa_r+0x5c8>
    3568:	2c00      	cmp	r4, #0
    356a:	d100      	bne.n	356e <_dtoa_r+0x2be>
    356c:	e184      	b.n	3878 <_dtoa_r+0x5c8>
    356e:	9c04      	ldr	r4, [sp, #16]
    3570:	9d05      	ldr	r5, [sp, #20]
    3572:	9414      	str	r4, [sp, #80]	; 0x50
    3574:	9515      	str	r5, [sp, #84]	; 0x54
    3576:	9d06      	ldr	r5, [sp, #24]
    3578:	2d00      	cmp	r5, #0
    357a:	dd61      	ble.n	3640 <_dtoa_r+0x390>
    357c:	1c2a      	adds	r2, r5, #0
    357e:	230f      	movs	r3, #15
    3580:	401a      	ands	r2, r3
    3582:	492d      	ldr	r1, [pc, #180]	; (3638 <_dtoa_r+0x388>)
    3584:	00d2      	lsls	r2, r2, #3
    3586:	188a      	adds	r2, r1, r2
    3588:	6814      	ldr	r4, [r2, #0]
    358a:	6855      	ldr	r5, [r2, #4]
    358c:	940e      	str	r4, [sp, #56]	; 0x38
    358e:	950f      	str	r5, [sp, #60]	; 0x3c
    3590:	9d06      	ldr	r5, [sp, #24]
    3592:	4c2a      	ldr	r4, [pc, #168]	; (363c <_dtoa_r+0x38c>)
    3594:	112f      	asrs	r7, r5, #4
    3596:	2502      	movs	r5, #2
    3598:	06f8      	lsls	r0, r7, #27
    359a:	d517      	bpl.n	35cc <_dtoa_r+0x31c>
    359c:	401f      	ands	r7, r3
    359e:	9814      	ldr	r0, [sp, #80]	; 0x50
    35a0:	9915      	ldr	r1, [sp, #84]	; 0x54
    35a2:	6a22      	ldr	r2, [r4, #32]
    35a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    35a6:	f002 f88f 	bl	56c8 <__aeabi_ddiv>
    35aa:	2503      	movs	r5, #3
    35ac:	9004      	str	r0, [sp, #16]
    35ae:	9105      	str	r1, [sp, #20]
    35b0:	e00c      	b.n	35cc <_dtoa_r+0x31c>
    35b2:	07f9      	lsls	r1, r7, #31
    35b4:	d508      	bpl.n	35c8 <_dtoa_r+0x318>
    35b6:	980e      	ldr	r0, [sp, #56]	; 0x38
    35b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    35ba:	6822      	ldr	r2, [r4, #0]
    35bc:	6863      	ldr	r3, [r4, #4]
    35be:	f002 fced 	bl	5f9c <__aeabi_dmul>
    35c2:	900e      	str	r0, [sp, #56]	; 0x38
    35c4:	910f      	str	r1, [sp, #60]	; 0x3c
    35c6:	3501      	adds	r5, #1
    35c8:	107f      	asrs	r7, r7, #1
    35ca:	3408      	adds	r4, #8
    35cc:	2f00      	cmp	r7, #0
    35ce:	d1f0      	bne.n	35b2 <_dtoa_r+0x302>
    35d0:	9804      	ldr	r0, [sp, #16]
    35d2:	9905      	ldr	r1, [sp, #20]
    35d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    35d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    35d8:	f002 f876 	bl	56c8 <__aeabi_ddiv>
    35dc:	e04e      	b.n	367c <_dtoa_r+0x3cc>
    35de:	46c0      	nop			; (mov r8, r8)
	...
    35ec:	3ff80000 	.word	0x3ff80000
    35f0:	636f4361 	.word	0x636f4361
    35f4:	3fd287a7 	.word	0x3fd287a7
    35f8:	8b60c8b3 	.word	0x8b60c8b3
    35fc:	3fc68a28 	.word	0x3fc68a28
    3600:	509f79fb 	.word	0x509f79fb
    3604:	3fd34413 	.word	0x3fd34413
    3608:	7ff00000 	.word	0x7ff00000
    360c:	0000270f 	.word	0x0000270f
    3610:	00006f46 	.word	0x00006f46
    3614:	00006f3d 	.word	0x00006f3d
    3618:	00006f1a 	.word	0x00006f1a
    361c:	3ff00000 	.word	0x3ff00000
    3620:	fffffc01 	.word	0xfffffc01
    3624:	fffffbef 	.word	0xfffffbef
    3628:	00000412 	.word	0x00000412
    362c:	fffffc0e 	.word	0xfffffc0e
    3630:	fffffbee 	.word	0xfffffbee
    3634:	fe100000 	.word	0xfe100000
    3638:	00006fb8 	.word	0x00006fb8
    363c:	00007080 	.word	0x00007080
    3640:	9c06      	ldr	r4, [sp, #24]
    3642:	2502      	movs	r5, #2
    3644:	4267      	negs	r7, r4
    3646:	2f00      	cmp	r7, #0
    3648:	d01a      	beq.n	3680 <_dtoa_r+0x3d0>
    364a:	230f      	movs	r3, #15
    364c:	403b      	ands	r3, r7
    364e:	4acc      	ldr	r2, [pc, #816]	; (3980 <_dtoa_r+0x6d0>)
    3650:	00db      	lsls	r3, r3, #3
    3652:	18d3      	adds	r3, r2, r3
    3654:	9814      	ldr	r0, [sp, #80]	; 0x50
    3656:	9915      	ldr	r1, [sp, #84]	; 0x54
    3658:	681a      	ldr	r2, [r3, #0]
    365a:	685b      	ldr	r3, [r3, #4]
    365c:	f002 fc9e 	bl	5f9c <__aeabi_dmul>
    3660:	4ec8      	ldr	r6, [pc, #800]	; (3984 <_dtoa_r+0x6d4>)
    3662:	113f      	asrs	r7, r7, #4
    3664:	2f00      	cmp	r7, #0
    3666:	d009      	beq.n	367c <_dtoa_r+0x3cc>
    3668:	07fa      	lsls	r2, r7, #31
    366a:	d504      	bpl.n	3676 <_dtoa_r+0x3c6>
    366c:	6832      	ldr	r2, [r6, #0]
    366e:	6873      	ldr	r3, [r6, #4]
    3670:	3501      	adds	r5, #1
    3672:	f002 fc93 	bl	5f9c <__aeabi_dmul>
    3676:	107f      	asrs	r7, r7, #1
    3678:	3608      	adds	r6, #8
    367a:	e7f3      	b.n	3664 <_dtoa_r+0x3b4>
    367c:	9004      	str	r0, [sp, #16]
    367e:	9105      	str	r1, [sp, #20]
    3680:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    3682:	2c00      	cmp	r4, #0
    3684:	d01e      	beq.n	36c4 <_dtoa_r+0x414>
    3686:	9e04      	ldr	r6, [sp, #16]
    3688:	9f05      	ldr	r7, [sp, #20]
    368a:	4bb4      	ldr	r3, [pc, #720]	; (395c <_dtoa_r+0x6ac>)
    368c:	4ab2      	ldr	r2, [pc, #712]	; (3958 <_dtoa_r+0x6a8>)
    368e:	1c30      	adds	r0, r6, #0
    3690:	1c39      	adds	r1, r7, #0
    3692:	f001 fb37 	bl	4d04 <__aeabi_dcmplt>
    3696:	2800      	cmp	r0, #0
    3698:	d014      	beq.n	36c4 <_dtoa_r+0x414>
    369a:	9c08      	ldr	r4, [sp, #32]
    369c:	2c00      	cmp	r4, #0
    369e:	d011      	beq.n	36c4 <_dtoa_r+0x414>
    36a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    36a2:	2c00      	cmp	r4, #0
    36a4:	dc00      	bgt.n	36a8 <_dtoa_r+0x3f8>
    36a6:	e0e3      	b.n	3870 <_dtoa_r+0x5c0>
    36a8:	9c06      	ldr	r4, [sp, #24]
    36aa:	1c30      	adds	r0, r6, #0
    36ac:	3c01      	subs	r4, #1
    36ae:	1c39      	adds	r1, r7, #0
    36b0:	4aab      	ldr	r2, [pc, #684]	; (3960 <_dtoa_r+0x6b0>)
    36b2:	4bac      	ldr	r3, [pc, #688]	; (3964 <_dtoa_r+0x6b4>)
    36b4:	9411      	str	r4, [sp, #68]	; 0x44
    36b6:	f002 fc71 	bl	5f9c <__aeabi_dmul>
    36ba:	3501      	adds	r5, #1
    36bc:	9004      	str	r0, [sp, #16]
    36be:	9105      	str	r1, [sp, #20]
    36c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    36c2:	e002      	b.n	36ca <_dtoa_r+0x41a>
    36c4:	9c06      	ldr	r4, [sp, #24]
    36c6:	9411      	str	r4, [sp, #68]	; 0x44
    36c8:	9c08      	ldr	r4, [sp, #32]
    36ca:	1c28      	adds	r0, r5, #0
    36cc:	9e04      	ldr	r6, [sp, #16]
    36ce:	9f05      	ldr	r7, [sp, #20]
    36d0:	940e      	str	r4, [sp, #56]	; 0x38
    36d2:	f003 fa5b 	bl	6b8c <__aeabi_i2d>
    36d6:	1c32      	adds	r2, r6, #0
    36d8:	1c3b      	adds	r3, r7, #0
    36da:	f002 fc5f 	bl	5f9c <__aeabi_dmul>
    36de:	4aa2      	ldr	r2, [pc, #648]	; (3968 <_dtoa_r+0x6b8>)
    36e0:	4ba2      	ldr	r3, [pc, #648]	; (396c <_dtoa_r+0x6bc>)
    36e2:	f001 fccf 	bl	5084 <__aeabi_dadd>
    36e6:	1c04      	adds	r4, r0, #0
    36e8:	48a7      	ldr	r0, [pc, #668]	; (3988 <_dtoa_r+0x6d8>)
    36ea:	1808      	adds	r0, r1, r0
    36ec:	990e      	ldr	r1, [sp, #56]	; 0x38
    36ee:	9004      	str	r0, [sp, #16]
    36f0:	1c05      	adds	r5, r0, #0
    36f2:	2900      	cmp	r1, #0
    36f4:	d11b      	bne.n	372e <_dtoa_r+0x47e>
    36f6:	4a9e      	ldr	r2, [pc, #632]	; (3970 <_dtoa_r+0x6c0>)
    36f8:	4b9e      	ldr	r3, [pc, #632]	; (3974 <_dtoa_r+0x6c4>)
    36fa:	1c30      	adds	r0, r6, #0
    36fc:	1c39      	adds	r1, r7, #0
    36fe:	f002 fedd 	bl	64bc <__aeabi_dsub>
    3702:	1c22      	adds	r2, r4, #0
    3704:	9b04      	ldr	r3, [sp, #16]
    3706:	1c06      	adds	r6, r0, #0
    3708:	1c0f      	adds	r7, r1, #0
    370a:	f001 fb0f 	bl	4d2c <__aeabi_dcmpgt>
    370e:	2800      	cmp	r0, #0
    3710:	d000      	beq.n	3714 <_dtoa_r+0x464>
    3712:	e25c      	b.n	3bce <_dtoa_r+0x91e>
    3714:	1c22      	adds	r2, r4, #0
    3716:	2580      	movs	r5, #128	; 0x80
    3718:	9c04      	ldr	r4, [sp, #16]
    371a:	062d      	lsls	r5, r5, #24
    371c:	1c30      	adds	r0, r6, #0
    371e:	1c39      	adds	r1, r7, #0
    3720:	1963      	adds	r3, r4, r5
    3722:	f001 faef 	bl	4d04 <__aeabi_dcmplt>
    3726:	2800      	cmp	r0, #0
    3728:	d000      	beq.n	372c <_dtoa_r+0x47c>
    372a:	e247      	b.n	3bbc <_dtoa_r+0x90c>
    372c:	e0a0      	b.n	3870 <_dtoa_r+0x5c0>
    372e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3730:	4b93      	ldr	r3, [pc, #588]	; (3980 <_dtoa_r+0x6d0>)
    3732:	3a01      	subs	r2, #1
    3734:	9810      	ldr	r0, [sp, #64]	; 0x40
    3736:	00d2      	lsls	r2, r2, #3
    3738:	189b      	adds	r3, r3, r2
    373a:	2800      	cmp	r0, #0
    373c:	d049      	beq.n	37d2 <_dtoa_r+0x522>
    373e:	681a      	ldr	r2, [r3, #0]
    3740:	685b      	ldr	r3, [r3, #4]
    3742:	488d      	ldr	r0, [pc, #564]	; (3978 <_dtoa_r+0x6c8>)
    3744:	498d      	ldr	r1, [pc, #564]	; (397c <_dtoa_r+0x6cc>)
    3746:	f001 ffbf 	bl	56c8 <__aeabi_ddiv>
    374a:	1c2b      	adds	r3, r5, #0
    374c:	1c22      	adds	r2, r4, #0
    374e:	f002 feb5 	bl	64bc <__aeabi_dsub>
    3752:	9004      	str	r0, [sp, #16]
    3754:	9105      	str	r1, [sp, #20]
    3756:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3758:	1c39      	adds	r1, r7, #0
    375a:	1c30      	adds	r0, r6, #0
    375c:	f003 f9e2 	bl	6b24 <__aeabi_d2iz>
    3760:	1c04      	adds	r4, r0, #0
    3762:	f003 fa13 	bl	6b8c <__aeabi_i2d>
    3766:	1c02      	adds	r2, r0, #0
    3768:	1c0b      	adds	r3, r1, #0
    376a:	1c30      	adds	r0, r6, #0
    376c:	1c39      	adds	r1, r7, #0
    376e:	f002 fea5 	bl	64bc <__aeabi_dsub>
    3772:	3501      	adds	r5, #1
    3774:	1e6b      	subs	r3, r5, #1
    3776:	3430      	adds	r4, #48	; 0x30
    3778:	701c      	strb	r4, [r3, #0]
    377a:	9a04      	ldr	r2, [sp, #16]
    377c:	9b05      	ldr	r3, [sp, #20]
    377e:	1c06      	adds	r6, r0, #0
    3780:	1c0f      	adds	r7, r1, #0
    3782:	f001 fabf 	bl	4d04 <__aeabi_dcmplt>
    3786:	2800      	cmp	r0, #0
    3788:	d000      	beq.n	378c <_dtoa_r+0x4dc>
    378a:	e353      	b.n	3e34 <_dtoa_r+0xb84>
    378c:	1c32      	adds	r2, r6, #0
    378e:	1c3b      	adds	r3, r7, #0
    3790:	4972      	ldr	r1, [pc, #456]	; (395c <_dtoa_r+0x6ac>)
    3792:	4871      	ldr	r0, [pc, #452]	; (3958 <_dtoa_r+0x6a8>)
    3794:	f002 fe92 	bl	64bc <__aeabi_dsub>
    3798:	9a04      	ldr	r2, [sp, #16]
    379a:	9b05      	ldr	r3, [sp, #20]
    379c:	f001 fab2 	bl	4d04 <__aeabi_dcmplt>
    37a0:	2800      	cmp	r0, #0
    37a2:	d000      	beq.n	37a6 <_dtoa_r+0x4f6>
    37a4:	e0cb      	b.n	393e <_dtoa_r+0x68e>
    37a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    37a8:	1b2b      	subs	r3, r5, r4
    37aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    37ac:	42a3      	cmp	r3, r4
    37ae:	da5f      	bge.n	3870 <_dtoa_r+0x5c0>
    37b0:	9804      	ldr	r0, [sp, #16]
    37b2:	9905      	ldr	r1, [sp, #20]
    37b4:	4a6a      	ldr	r2, [pc, #424]	; (3960 <_dtoa_r+0x6b0>)
    37b6:	4b6b      	ldr	r3, [pc, #428]	; (3964 <_dtoa_r+0x6b4>)
    37b8:	f002 fbf0 	bl	5f9c <__aeabi_dmul>
    37bc:	4a68      	ldr	r2, [pc, #416]	; (3960 <_dtoa_r+0x6b0>)
    37be:	4b69      	ldr	r3, [pc, #420]	; (3964 <_dtoa_r+0x6b4>)
    37c0:	9004      	str	r0, [sp, #16]
    37c2:	9105      	str	r1, [sp, #20]
    37c4:	1c30      	adds	r0, r6, #0
    37c6:	1c39      	adds	r1, r7, #0
    37c8:	f002 fbe8 	bl	5f9c <__aeabi_dmul>
    37cc:	1c06      	adds	r6, r0, #0
    37ce:	1c0f      	adds	r7, r1, #0
    37d0:	e7c2      	b.n	3758 <_dtoa_r+0x4a8>
    37d2:	6818      	ldr	r0, [r3, #0]
    37d4:	6859      	ldr	r1, [r3, #4]
    37d6:	1c22      	adds	r2, r4, #0
    37d8:	1c2b      	adds	r3, r5, #0
    37da:	f002 fbdf 	bl	5f9c <__aeabi_dmul>
    37de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    37e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    37e2:	9004      	str	r0, [sp, #16]
    37e4:	9105      	str	r1, [sp, #20]
    37e6:	1965      	adds	r5, r4, r5
    37e8:	9517      	str	r5, [sp, #92]	; 0x5c
    37ea:	1c39      	adds	r1, r7, #0
    37ec:	1c30      	adds	r0, r6, #0
    37ee:	f003 f999 	bl	6b24 <__aeabi_d2iz>
    37f2:	1c05      	adds	r5, r0, #0
    37f4:	f003 f9ca 	bl	6b8c <__aeabi_i2d>
    37f8:	1c02      	adds	r2, r0, #0
    37fa:	1c0b      	adds	r3, r1, #0
    37fc:	1c30      	adds	r0, r6, #0
    37fe:	1c39      	adds	r1, r7, #0
    3800:	f002 fe5c 	bl	64bc <__aeabi_dsub>
    3804:	3530      	adds	r5, #48	; 0x30
    3806:	7025      	strb	r5, [r4, #0]
    3808:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    380a:	3401      	adds	r4, #1
    380c:	1c06      	adds	r6, r0, #0
    380e:	1c0f      	adds	r7, r1, #0
    3810:	42ac      	cmp	r4, r5
    3812:	d126      	bne.n	3862 <_dtoa_r+0x5b2>
    3814:	980e      	ldr	r0, [sp, #56]	; 0x38
    3816:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3818:	4a57      	ldr	r2, [pc, #348]	; (3978 <_dtoa_r+0x6c8>)
    381a:	4b58      	ldr	r3, [pc, #352]	; (397c <_dtoa_r+0x6cc>)
    381c:	1825      	adds	r5, r4, r0
    381e:	9804      	ldr	r0, [sp, #16]
    3820:	9905      	ldr	r1, [sp, #20]
    3822:	f001 fc2f 	bl	5084 <__aeabi_dadd>
    3826:	1c02      	adds	r2, r0, #0
    3828:	1c0b      	adds	r3, r1, #0
    382a:	1c30      	adds	r0, r6, #0
    382c:	1c39      	adds	r1, r7, #0
    382e:	f001 fa7d 	bl	4d2c <__aeabi_dcmpgt>
    3832:	2800      	cmp	r0, #0
    3834:	d000      	beq.n	3838 <_dtoa_r+0x588>
    3836:	e082      	b.n	393e <_dtoa_r+0x68e>
    3838:	9a04      	ldr	r2, [sp, #16]
    383a:	9b05      	ldr	r3, [sp, #20]
    383c:	484e      	ldr	r0, [pc, #312]	; (3978 <_dtoa_r+0x6c8>)
    383e:	494f      	ldr	r1, [pc, #316]	; (397c <_dtoa_r+0x6cc>)
    3840:	f002 fe3c 	bl	64bc <__aeabi_dsub>
    3844:	1c02      	adds	r2, r0, #0
    3846:	1c0b      	adds	r3, r1, #0
    3848:	1c30      	adds	r0, r6, #0
    384a:	1c39      	adds	r1, r7, #0
    384c:	f001 fa5a 	bl	4d04 <__aeabi_dcmplt>
    3850:	2800      	cmp	r0, #0
    3852:	d00d      	beq.n	3870 <_dtoa_r+0x5c0>
    3854:	1e6b      	subs	r3, r5, #1
    3856:	781a      	ldrb	r2, [r3, #0]
    3858:	2a30      	cmp	r2, #48	; 0x30
    385a:	d000      	beq.n	385e <_dtoa_r+0x5ae>
    385c:	e2ea      	b.n	3e34 <_dtoa_r+0xb84>
    385e:	1c1d      	adds	r5, r3, #0
    3860:	e7f8      	b.n	3854 <_dtoa_r+0x5a4>
    3862:	4a3f      	ldr	r2, [pc, #252]	; (3960 <_dtoa_r+0x6b0>)
    3864:	4b3f      	ldr	r3, [pc, #252]	; (3964 <_dtoa_r+0x6b4>)
    3866:	f002 fb99 	bl	5f9c <__aeabi_dmul>
    386a:	1c06      	adds	r6, r0, #0
    386c:	1c0f      	adds	r7, r1, #0
    386e:	e7bc      	b.n	37ea <_dtoa_r+0x53a>
    3870:	9c14      	ldr	r4, [sp, #80]	; 0x50
    3872:	9d15      	ldr	r5, [sp, #84]	; 0x54
    3874:	9404      	str	r4, [sp, #16]
    3876:	9505      	str	r5, [sp, #20]
    3878:	9b19      	ldr	r3, [sp, #100]	; 0x64
    387a:	2b00      	cmp	r3, #0
    387c:	da00      	bge.n	3880 <_dtoa_r+0x5d0>
    387e:	e09f      	b.n	39c0 <_dtoa_r+0x710>
    3880:	9d06      	ldr	r5, [sp, #24]
    3882:	2d0e      	cmp	r5, #14
    3884:	dd00      	ble.n	3888 <_dtoa_r+0x5d8>
    3886:	e09b      	b.n	39c0 <_dtoa_r+0x710>
    3888:	4a3d      	ldr	r2, [pc, #244]	; (3980 <_dtoa_r+0x6d0>)
    388a:	00eb      	lsls	r3, r5, #3
    388c:	18d3      	adds	r3, r2, r3
    388e:	681c      	ldr	r4, [r3, #0]
    3890:	685d      	ldr	r5, [r3, #4]
    3892:	9402      	str	r4, [sp, #8]
    3894:	9503      	str	r5, [sp, #12]
    3896:	9d21      	ldr	r5, [sp, #132]	; 0x84
    3898:	2d00      	cmp	r5, #0
    389a:	da14      	bge.n	38c6 <_dtoa_r+0x616>
    389c:	9c08      	ldr	r4, [sp, #32]
    389e:	2c00      	cmp	r4, #0
    38a0:	dc11      	bgt.n	38c6 <_dtoa_r+0x616>
    38a2:	d000      	beq.n	38a6 <_dtoa_r+0x5f6>
    38a4:	e18c      	b.n	3bc0 <_dtoa_r+0x910>
    38a6:	4a32      	ldr	r2, [pc, #200]	; (3970 <_dtoa_r+0x6c0>)
    38a8:	4b32      	ldr	r3, [pc, #200]	; (3974 <_dtoa_r+0x6c4>)
    38aa:	9802      	ldr	r0, [sp, #8]
    38ac:	9903      	ldr	r1, [sp, #12]
    38ae:	f002 fb75 	bl	5f9c <__aeabi_dmul>
    38b2:	9a04      	ldr	r2, [sp, #16]
    38b4:	9b05      	ldr	r3, [sp, #20]
    38b6:	f001 fa43 	bl	4d40 <__aeabi_dcmpge>
    38ba:	9f08      	ldr	r7, [sp, #32]
    38bc:	1c3e      	adds	r6, r7, #0
    38be:	2800      	cmp	r0, #0
    38c0:	d000      	beq.n	38c4 <_dtoa_r+0x614>
    38c2:	e17f      	b.n	3bc4 <_dtoa_r+0x914>
    38c4:	e187      	b.n	3bd6 <_dtoa_r+0x926>
    38c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38c8:	9e04      	ldr	r6, [sp, #16]
    38ca:	9f05      	ldr	r7, [sp, #20]
    38cc:	9a02      	ldr	r2, [sp, #8]
    38ce:	9b03      	ldr	r3, [sp, #12]
    38d0:	1c30      	adds	r0, r6, #0
    38d2:	1c39      	adds	r1, r7, #0
    38d4:	f001 fef8 	bl	56c8 <__aeabi_ddiv>
    38d8:	f003 f924 	bl	6b24 <__aeabi_d2iz>
    38dc:	1c04      	adds	r4, r0, #0
    38de:	f003 f955 	bl	6b8c <__aeabi_i2d>
    38e2:	9a02      	ldr	r2, [sp, #8]
    38e4:	9b03      	ldr	r3, [sp, #12]
    38e6:	f002 fb59 	bl	5f9c <__aeabi_dmul>
    38ea:	1c02      	adds	r2, r0, #0
    38ec:	1c0b      	adds	r3, r1, #0
    38ee:	1c30      	adds	r0, r6, #0
    38f0:	1c39      	adds	r1, r7, #0
    38f2:	f002 fde3 	bl	64bc <__aeabi_dsub>
    38f6:	3501      	adds	r5, #1
    38f8:	1c02      	adds	r2, r0, #0
    38fa:	1c20      	adds	r0, r4, #0
    38fc:	3030      	adds	r0, #48	; 0x30
    38fe:	1c0b      	adds	r3, r1, #0
    3900:	1e69      	subs	r1, r5, #1
    3902:	7008      	strb	r0, [r1, #0]
    3904:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3906:	1a29      	subs	r1, r5, r0
    3908:	9808      	ldr	r0, [sp, #32]
    390a:	4281      	cmp	r1, r0
    390c:	d148      	bne.n	39a0 <_dtoa_r+0x6f0>
    390e:	1c10      	adds	r0, r2, #0
    3910:	1c19      	adds	r1, r3, #0
    3912:	f001 fbb7 	bl	5084 <__aeabi_dadd>
    3916:	9a02      	ldr	r2, [sp, #8]
    3918:	9b03      	ldr	r3, [sp, #12]
    391a:	1c06      	adds	r6, r0, #0
    391c:	1c0f      	adds	r7, r1, #0
    391e:	f001 fa05 	bl	4d2c <__aeabi_dcmpgt>
    3922:	2800      	cmp	r0, #0
    3924:	d10d      	bne.n	3942 <_dtoa_r+0x692>
    3926:	1c30      	adds	r0, r6, #0
    3928:	1c39      	adds	r1, r7, #0
    392a:	9a02      	ldr	r2, [sp, #8]
    392c:	9b03      	ldr	r3, [sp, #12]
    392e:	f001 f9e3 	bl	4cf8 <__aeabi_dcmpeq>
    3932:	2800      	cmp	r0, #0
    3934:	d100      	bne.n	3938 <_dtoa_r+0x688>
    3936:	e27f      	b.n	3e38 <_dtoa_r+0xb88>
    3938:	07e1      	lsls	r1, r4, #31
    393a:	d402      	bmi.n	3942 <_dtoa_r+0x692>
    393c:	e27c      	b.n	3e38 <_dtoa_r+0xb88>
    393e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    3940:	9406      	str	r4, [sp, #24]
    3942:	1e6b      	subs	r3, r5, #1
    3944:	781a      	ldrb	r2, [r3, #0]
    3946:	2a39      	cmp	r2, #57	; 0x39
    3948:	d126      	bne.n	3998 <_dtoa_r+0x6e8>
    394a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    394c:	42a3      	cmp	r3, r4
    394e:	d01d      	beq.n	398c <_dtoa_r+0x6dc>
    3950:	1c1d      	adds	r5, r3, #0
    3952:	e7f6      	b.n	3942 <_dtoa_r+0x692>
    3954:	46c0      	nop			; (mov r8, r8)
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	00000000 	.word	0x00000000
    395c:	3ff00000 	.word	0x3ff00000
    3960:	00000000 	.word	0x00000000
    3964:	40240000 	.word	0x40240000
    3968:	00000000 	.word	0x00000000
    396c:	401c0000 	.word	0x401c0000
    3970:	00000000 	.word	0x00000000
    3974:	40140000 	.word	0x40140000
    3978:	00000000 	.word	0x00000000
    397c:	3fe00000 	.word	0x3fe00000
    3980:	00006fb8 	.word	0x00006fb8
    3984:	00007080 	.word	0x00007080
    3988:	fcc00000 	.word	0xfcc00000
    398c:	9c06      	ldr	r4, [sp, #24]
    398e:	2230      	movs	r2, #48	; 0x30
    3990:	3401      	adds	r4, #1
    3992:	9406      	str	r4, [sp, #24]
    3994:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3996:	7022      	strb	r2, [r4, #0]
    3998:	781a      	ldrb	r2, [r3, #0]
    399a:	3201      	adds	r2, #1
    399c:	701a      	strb	r2, [r3, #0]
    399e:	e24b      	b.n	3e38 <_dtoa_r+0xb88>
    39a0:	1c10      	adds	r0, r2, #0
    39a2:	1c19      	adds	r1, r3, #0
    39a4:	4bc9      	ldr	r3, [pc, #804]	; (3ccc <_dtoa_r+0xa1c>)
    39a6:	4ac8      	ldr	r2, [pc, #800]	; (3cc8 <_dtoa_r+0xa18>)
    39a8:	f002 faf8 	bl	5f9c <__aeabi_dmul>
    39ac:	4ac8      	ldr	r2, [pc, #800]	; (3cd0 <_dtoa_r+0xa20>)
    39ae:	4bc9      	ldr	r3, [pc, #804]	; (3cd4 <_dtoa_r+0xa24>)
    39b0:	1c06      	adds	r6, r0, #0
    39b2:	1c0f      	adds	r7, r1, #0
    39b4:	f001 f9a0 	bl	4cf8 <__aeabi_dcmpeq>
    39b8:	2800      	cmp	r0, #0
    39ba:	d100      	bne.n	39be <_dtoa_r+0x70e>
    39bc:	e786      	b.n	38cc <_dtoa_r+0x61c>
    39be:	e23b      	b.n	3e38 <_dtoa_r+0xb88>
    39c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    39c2:	2d00      	cmp	r5, #0
    39c4:	d031      	beq.n	3a2a <_dtoa_r+0x77a>
    39c6:	9c20      	ldr	r4, [sp, #128]	; 0x80
    39c8:	2c01      	cmp	r4, #1
    39ca:	dc0b      	bgt.n	39e4 <_dtoa_r+0x734>
    39cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
    39ce:	2d00      	cmp	r5, #0
    39d0:	d002      	beq.n	39d8 <_dtoa_r+0x728>
    39d2:	48c1      	ldr	r0, [pc, #772]	; (3cd8 <_dtoa_r+0xa28>)
    39d4:	181b      	adds	r3, r3, r0
    39d6:	e002      	b.n	39de <_dtoa_r+0x72e>
    39d8:	9918      	ldr	r1, [sp, #96]	; 0x60
    39da:	2336      	movs	r3, #54	; 0x36
    39dc:	1a5b      	subs	r3, r3, r1
    39de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    39e0:	9c02      	ldr	r4, [sp, #8]
    39e2:	e016      	b.n	3a12 <_dtoa_r+0x762>
    39e4:	9d08      	ldr	r5, [sp, #32]
    39e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    39e8:	3d01      	subs	r5, #1
    39ea:	42ac      	cmp	r4, r5
    39ec:	db01      	blt.n	39f2 <_dtoa_r+0x742>
    39ee:	1b65      	subs	r5, r4, r5
    39f0:	e006      	b.n	3a00 <_dtoa_r+0x750>
    39f2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    39f4:	950d      	str	r5, [sp, #52]	; 0x34
    39f6:	1b2b      	subs	r3, r5, r4
    39f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
    39fa:	2500      	movs	r5, #0
    39fc:	18e4      	adds	r4, r4, r3
    39fe:	9412      	str	r4, [sp, #72]	; 0x48
    3a00:	9c08      	ldr	r4, [sp, #32]
    3a02:	2c00      	cmp	r4, #0
    3a04:	da03      	bge.n	3a0e <_dtoa_r+0x75e>
    3a06:	9802      	ldr	r0, [sp, #8]
    3a08:	2300      	movs	r3, #0
    3a0a:	1b04      	subs	r4, r0, r4
    3a0c:	e001      	b.n	3a12 <_dtoa_r+0x762>
    3a0e:	9c02      	ldr	r4, [sp, #8]
    3a10:	9b08      	ldr	r3, [sp, #32]
    3a12:	9902      	ldr	r1, [sp, #8]
    3a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3a16:	18c9      	adds	r1, r1, r3
    3a18:	9102      	str	r1, [sp, #8]
    3a1a:	18d2      	adds	r2, r2, r3
    3a1c:	9807      	ldr	r0, [sp, #28]
    3a1e:	2101      	movs	r1, #1
    3a20:	9209      	str	r2, [sp, #36]	; 0x24
    3a22:	f000 fcdc 	bl	43de <__i2b>
    3a26:	1c06      	adds	r6, r0, #0
    3a28:	e002      	b.n	3a30 <_dtoa_r+0x780>
    3a2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3a2c:	9c02      	ldr	r4, [sp, #8]
    3a2e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    3a30:	2c00      	cmp	r4, #0
    3a32:	d00c      	beq.n	3a4e <_dtoa_r+0x79e>
    3a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a36:	2b00      	cmp	r3, #0
    3a38:	dd09      	ble.n	3a4e <_dtoa_r+0x79e>
    3a3a:	42a3      	cmp	r3, r4
    3a3c:	dd00      	ble.n	3a40 <_dtoa_r+0x790>
    3a3e:	1c23      	adds	r3, r4, #0
    3a40:	9802      	ldr	r0, [sp, #8]
    3a42:	9909      	ldr	r1, [sp, #36]	; 0x24
    3a44:	1ac0      	subs	r0, r0, r3
    3a46:	1ac9      	subs	r1, r1, r3
    3a48:	9002      	str	r0, [sp, #8]
    3a4a:	1ae4      	subs	r4, r4, r3
    3a4c:	9109      	str	r1, [sp, #36]	; 0x24
    3a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a50:	2a00      	cmp	r2, #0
    3a52:	dd21      	ble.n	3a98 <_dtoa_r+0x7e8>
    3a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a56:	2b00      	cmp	r3, #0
    3a58:	d018      	beq.n	3a8c <_dtoa_r+0x7dc>
    3a5a:	2d00      	cmp	r5, #0
    3a5c:	dd10      	ble.n	3a80 <_dtoa_r+0x7d0>
    3a5e:	1c31      	adds	r1, r6, #0
    3a60:	1c2a      	adds	r2, r5, #0
    3a62:	9807      	ldr	r0, [sp, #28]
    3a64:	f000 fd54 	bl	4510 <__pow5mult>
    3a68:	1c06      	adds	r6, r0, #0
    3a6a:	1c31      	adds	r1, r6, #0
    3a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a6e:	9807      	ldr	r0, [sp, #28]
    3a70:	f000 fcbe 	bl	43f0 <__multiply>
    3a74:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a76:	1c07      	adds	r7, r0, #0
    3a78:	9807      	ldr	r0, [sp, #28]
    3a7a:	f000 fc10 	bl	429e <_Bfree>
    3a7e:	970a      	str	r7, [sp, #40]	; 0x28
    3a80:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a82:	1b42      	subs	r2, r0, r5
    3a84:	d008      	beq.n	3a98 <_dtoa_r+0x7e8>
    3a86:	9807      	ldr	r0, [sp, #28]
    3a88:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a8a:	e002      	b.n	3a92 <_dtoa_r+0x7e2>
    3a8c:	9807      	ldr	r0, [sp, #28]
    3a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a92:	f000 fd3d 	bl	4510 <__pow5mult>
    3a96:	900a      	str	r0, [sp, #40]	; 0x28
    3a98:	9807      	ldr	r0, [sp, #28]
    3a9a:	2101      	movs	r1, #1
    3a9c:	f000 fc9f 	bl	43de <__i2b>
    3aa0:	9d12      	ldr	r5, [sp, #72]	; 0x48
    3aa2:	1c07      	adds	r7, r0, #0
    3aa4:	2d00      	cmp	r5, #0
    3aa6:	dd05      	ble.n	3ab4 <_dtoa_r+0x804>
    3aa8:	1c39      	adds	r1, r7, #0
    3aaa:	9807      	ldr	r0, [sp, #28]
    3aac:	1c2a      	adds	r2, r5, #0
    3aae:	f000 fd2f 	bl	4510 <__pow5mult>
    3ab2:	1c07      	adds	r7, r0, #0
    3ab4:	9820      	ldr	r0, [sp, #128]	; 0x80
    3ab6:	2500      	movs	r5, #0
    3ab8:	2801      	cmp	r0, #1
    3aba:	dc10      	bgt.n	3ade <_dtoa_r+0x82e>
    3abc:	9904      	ldr	r1, [sp, #16]
    3abe:	42a9      	cmp	r1, r5
    3ac0:	d10d      	bne.n	3ade <_dtoa_r+0x82e>
    3ac2:	9a05      	ldr	r2, [sp, #20]
    3ac4:	0313      	lsls	r3, r2, #12
    3ac6:	42ab      	cmp	r3, r5
    3ac8:	d109      	bne.n	3ade <_dtoa_r+0x82e>
    3aca:	4b84      	ldr	r3, [pc, #528]	; (3cdc <_dtoa_r+0xa2c>)
    3acc:	4213      	tst	r3, r2
    3ace:	d006      	beq.n	3ade <_dtoa_r+0x82e>
    3ad0:	9d02      	ldr	r5, [sp, #8]
    3ad2:	3501      	adds	r5, #1
    3ad4:	9502      	str	r5, [sp, #8]
    3ad6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3ad8:	3501      	adds	r5, #1
    3ada:	9509      	str	r5, [sp, #36]	; 0x24
    3adc:	2501      	movs	r5, #1
    3ade:	9912      	ldr	r1, [sp, #72]	; 0x48
    3ae0:	2001      	movs	r0, #1
    3ae2:	2900      	cmp	r1, #0
    3ae4:	d008      	beq.n	3af8 <_dtoa_r+0x848>
    3ae6:	693b      	ldr	r3, [r7, #16]
    3ae8:	3303      	adds	r3, #3
    3aea:	009b      	lsls	r3, r3, #2
    3aec:	18fb      	adds	r3, r7, r3
    3aee:	6858      	ldr	r0, [r3, #4]
    3af0:	f000 fc2c 	bl	434c <__hi0bits>
    3af4:	2320      	movs	r3, #32
    3af6:	1a18      	subs	r0, r3, r0
    3af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3afa:	231f      	movs	r3, #31
    3afc:	1880      	adds	r0, r0, r2
    3afe:	4018      	ands	r0, r3
    3b00:	d00d      	beq.n	3b1e <_dtoa_r+0x86e>
    3b02:	2320      	movs	r3, #32
    3b04:	1a1b      	subs	r3, r3, r0
    3b06:	2b04      	cmp	r3, #4
    3b08:	dd06      	ble.n	3b18 <_dtoa_r+0x868>
    3b0a:	231c      	movs	r3, #28
    3b0c:	1a18      	subs	r0, r3, r0
    3b0e:	9b02      	ldr	r3, [sp, #8]
    3b10:	1824      	adds	r4, r4, r0
    3b12:	181b      	adds	r3, r3, r0
    3b14:	9302      	str	r3, [sp, #8]
    3b16:	e008      	b.n	3b2a <_dtoa_r+0x87a>
    3b18:	2b04      	cmp	r3, #4
    3b1a:	d008      	beq.n	3b2e <_dtoa_r+0x87e>
    3b1c:	1c18      	adds	r0, r3, #0
    3b1e:	9902      	ldr	r1, [sp, #8]
    3b20:	301c      	adds	r0, #28
    3b22:	1809      	adds	r1, r1, r0
    3b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b26:	9102      	str	r1, [sp, #8]
    3b28:	1824      	adds	r4, r4, r0
    3b2a:	1812      	adds	r2, r2, r0
    3b2c:	9209      	str	r2, [sp, #36]	; 0x24
    3b2e:	9b02      	ldr	r3, [sp, #8]
    3b30:	2b00      	cmp	r3, #0
    3b32:	dd05      	ble.n	3b40 <_dtoa_r+0x890>
    3b34:	9807      	ldr	r0, [sp, #28]
    3b36:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b38:	1c1a      	adds	r2, r3, #0
    3b3a:	f000 fd3b 	bl	45b4 <__lshift>
    3b3e:	900a      	str	r0, [sp, #40]	; 0x28
    3b40:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b42:	2800      	cmp	r0, #0
    3b44:	dd05      	ble.n	3b52 <_dtoa_r+0x8a2>
    3b46:	1c39      	adds	r1, r7, #0
    3b48:	9807      	ldr	r0, [sp, #28]
    3b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b4c:	f000 fd32 	bl	45b4 <__lshift>
    3b50:	1c07      	adds	r7, r0, #0
    3b52:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3b54:	2900      	cmp	r1, #0
    3b56:	d01b      	beq.n	3b90 <_dtoa_r+0x8e0>
    3b58:	980a      	ldr	r0, [sp, #40]	; 0x28
    3b5a:	1c39      	adds	r1, r7, #0
    3b5c:	f000 fd7c 	bl	4658 <__mcmp>
    3b60:	2800      	cmp	r0, #0
    3b62:	da15      	bge.n	3b90 <_dtoa_r+0x8e0>
    3b64:	9a06      	ldr	r2, [sp, #24]
    3b66:	2300      	movs	r3, #0
    3b68:	3a01      	subs	r2, #1
    3b6a:	9206      	str	r2, [sp, #24]
    3b6c:	9807      	ldr	r0, [sp, #28]
    3b6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b70:	220a      	movs	r2, #10
    3b72:	f000 fbad 	bl	42d0 <__multadd>
    3b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3b78:	900a      	str	r0, [sp, #40]	; 0x28
    3b7a:	9810      	ldr	r0, [sp, #64]	; 0x40
    3b7c:	9308      	str	r3, [sp, #32]
    3b7e:	2800      	cmp	r0, #0
    3b80:	d006      	beq.n	3b90 <_dtoa_r+0x8e0>
    3b82:	1c31      	adds	r1, r6, #0
    3b84:	9807      	ldr	r0, [sp, #28]
    3b86:	220a      	movs	r2, #10
    3b88:	2300      	movs	r3, #0
    3b8a:	f000 fba1 	bl	42d0 <__multadd>
    3b8e:	1c06      	adds	r6, r0, #0
    3b90:	9908      	ldr	r1, [sp, #32]
    3b92:	2900      	cmp	r1, #0
    3b94:	dc2a      	bgt.n	3bec <_dtoa_r+0x93c>
    3b96:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3b98:	2a02      	cmp	r2, #2
    3b9a:	dd27      	ble.n	3bec <_dtoa_r+0x93c>
    3b9c:	2900      	cmp	r1, #0
    3b9e:	d111      	bne.n	3bc4 <_dtoa_r+0x914>
    3ba0:	1c39      	adds	r1, r7, #0
    3ba2:	9807      	ldr	r0, [sp, #28]
    3ba4:	2205      	movs	r2, #5
    3ba6:	9b08      	ldr	r3, [sp, #32]
    3ba8:	f000 fb92 	bl	42d0 <__multadd>
    3bac:	1c07      	adds	r7, r0, #0
    3bae:	1c39      	adds	r1, r7, #0
    3bb0:	980a      	ldr	r0, [sp, #40]	; 0x28
    3bb2:	f000 fd51 	bl	4658 <__mcmp>
    3bb6:	2800      	cmp	r0, #0
    3bb8:	dc0d      	bgt.n	3bd6 <_dtoa_r+0x926>
    3bba:	e003      	b.n	3bc4 <_dtoa_r+0x914>
    3bbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3bbe:	e000      	b.n	3bc2 <_dtoa_r+0x912>
    3bc0:	2700      	movs	r7, #0
    3bc2:	1c3e      	adds	r6, r7, #0
    3bc4:	9c21      	ldr	r4, [sp, #132]	; 0x84
    3bc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3bc8:	43e4      	mvns	r4, r4
    3bca:	9406      	str	r4, [sp, #24]
    3bcc:	e00b      	b.n	3be6 <_dtoa_r+0x936>
    3bce:	9d11      	ldr	r5, [sp, #68]	; 0x44
    3bd0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3bd2:	9506      	str	r5, [sp, #24]
    3bd4:	1c3e      	adds	r6, r7, #0
    3bd6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3bd8:	2331      	movs	r3, #49	; 0x31
    3bda:	7023      	strb	r3, [r4, #0]
    3bdc:	9c06      	ldr	r4, [sp, #24]
    3bde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3be0:	3401      	adds	r4, #1
    3be2:	3501      	adds	r5, #1
    3be4:	9406      	str	r4, [sp, #24]
    3be6:	9602      	str	r6, [sp, #8]
    3be8:	2600      	movs	r6, #0
    3bea:	e10f      	b.n	3e0c <_dtoa_r+0xb5c>
    3bec:	9810      	ldr	r0, [sp, #64]	; 0x40
    3bee:	2800      	cmp	r0, #0
    3bf0:	d100      	bne.n	3bf4 <_dtoa_r+0x944>
    3bf2:	e0c5      	b.n	3d80 <_dtoa_r+0xad0>
    3bf4:	2c00      	cmp	r4, #0
    3bf6:	dd05      	ble.n	3c04 <_dtoa_r+0x954>
    3bf8:	1c31      	adds	r1, r6, #0
    3bfa:	9807      	ldr	r0, [sp, #28]
    3bfc:	1c22      	adds	r2, r4, #0
    3bfe:	f000 fcd9 	bl	45b4 <__lshift>
    3c02:	1c06      	adds	r6, r0, #0
    3c04:	9602      	str	r6, [sp, #8]
    3c06:	2d00      	cmp	r5, #0
    3c08:	d012      	beq.n	3c30 <_dtoa_r+0x980>
    3c0a:	6871      	ldr	r1, [r6, #4]
    3c0c:	9807      	ldr	r0, [sp, #28]
    3c0e:	f000 fb0e 	bl	422e <_Balloc>
    3c12:	6932      	ldr	r2, [r6, #16]
    3c14:	1c31      	adds	r1, r6, #0
    3c16:	3202      	adds	r2, #2
    3c18:	1c04      	adds	r4, r0, #0
    3c1a:	0092      	lsls	r2, r2, #2
    3c1c:	310c      	adds	r1, #12
    3c1e:	300c      	adds	r0, #12
    3c20:	f7fe fbac 	bl	237c <memcpy>
    3c24:	9807      	ldr	r0, [sp, #28]
    3c26:	1c21      	adds	r1, r4, #0
    3c28:	2201      	movs	r2, #1
    3c2a:	f000 fcc3 	bl	45b4 <__lshift>
    3c2e:	9002      	str	r0, [sp, #8]
    3c30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3c32:	9d08      	ldr	r5, [sp, #32]
    3c34:	1c23      	adds	r3, r4, #0
    3c36:	3b01      	subs	r3, #1
    3c38:	195b      	adds	r3, r3, r5
    3c3a:	9409      	str	r4, [sp, #36]	; 0x24
    3c3c:	9310      	str	r3, [sp, #64]	; 0x40
    3c3e:	1c39      	adds	r1, r7, #0
    3c40:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c42:	f7ff faa9 	bl	3198 <quorem>
    3c46:	1c31      	adds	r1, r6, #0
    3c48:	900d      	str	r0, [sp, #52]	; 0x34
    3c4a:	1c04      	adds	r4, r0, #0
    3c4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c4e:	f000 fd03 	bl	4658 <__mcmp>
    3c52:	1c39      	adds	r1, r7, #0
    3c54:	900c      	str	r0, [sp, #48]	; 0x30
    3c56:	9a02      	ldr	r2, [sp, #8]
    3c58:	9807      	ldr	r0, [sp, #28]
    3c5a:	f000 fd18 	bl	468e <__mdiff>
    3c5e:	1c05      	adds	r5, r0, #0
    3c60:	68c0      	ldr	r0, [r0, #12]
    3c62:	3430      	adds	r4, #48	; 0x30
    3c64:	2800      	cmp	r0, #0
    3c66:	d105      	bne.n	3c74 <_dtoa_r+0x9c4>
    3c68:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c6a:	1c29      	adds	r1, r5, #0
    3c6c:	f000 fcf4 	bl	4658 <__mcmp>
    3c70:	9008      	str	r0, [sp, #32]
    3c72:	e001      	b.n	3c78 <_dtoa_r+0x9c8>
    3c74:	2101      	movs	r1, #1
    3c76:	9108      	str	r1, [sp, #32]
    3c78:	1c29      	adds	r1, r5, #0
    3c7a:	9807      	ldr	r0, [sp, #28]
    3c7c:	f000 fb0f 	bl	429e <_Bfree>
    3c80:	9b08      	ldr	r3, [sp, #32]
    3c82:	9d20      	ldr	r5, [sp, #128]	; 0x80
    3c84:	432b      	orrs	r3, r5
    3c86:	d10d      	bne.n	3ca4 <_dtoa_r+0x9f4>
    3c88:	9804      	ldr	r0, [sp, #16]
    3c8a:	2301      	movs	r3, #1
    3c8c:	4203      	tst	r3, r0
    3c8e:	d109      	bne.n	3ca4 <_dtoa_r+0x9f4>
    3c90:	2c39      	cmp	r4, #57	; 0x39
    3c92:	d044      	beq.n	3d1e <_dtoa_r+0xa6e>
    3c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3c96:	2d00      	cmp	r5, #0
    3c98:	dd01      	ble.n	3c9e <_dtoa_r+0x9ee>
    3c9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3c9c:	3431      	adds	r4, #49	; 0x31
    3c9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3ca0:	3501      	adds	r5, #1
    3ca2:	e044      	b.n	3d2e <_dtoa_r+0xa7e>
    3ca4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3ca6:	2d00      	cmp	r5, #0
    3ca8:	da03      	bge.n	3cb2 <_dtoa_r+0xa02>
    3caa:	9d08      	ldr	r5, [sp, #32]
    3cac:	2d00      	cmp	r5, #0
    3cae:	dc17      	bgt.n	3ce0 <_dtoa_r+0xa30>
    3cb0:	e028      	b.n	3d04 <_dtoa_r+0xa54>
    3cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cb4:	9d20      	ldr	r5, [sp, #128]	; 0x80
    3cb6:	432b      	orrs	r3, r5
    3cb8:	d129      	bne.n	3d0e <_dtoa_r+0xa5e>
    3cba:	9804      	ldr	r0, [sp, #16]
    3cbc:	2301      	movs	r3, #1
    3cbe:	4203      	tst	r3, r0
    3cc0:	d125      	bne.n	3d0e <_dtoa_r+0xa5e>
    3cc2:	e7f2      	b.n	3caa <_dtoa_r+0x9fa>
    3cc4:	46c0      	nop			; (mov r8, r8)
    3cc6:	46c0      	nop			; (mov r8, r8)
    3cc8:	00000000 	.word	0x00000000
    3ccc:	40240000 	.word	0x40240000
	...
    3cd8:	00000433 	.word	0x00000433
    3cdc:	7ff00000 	.word	0x7ff00000
    3ce0:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ce2:	9807      	ldr	r0, [sp, #28]
    3ce4:	2201      	movs	r2, #1
    3ce6:	f000 fc65 	bl	45b4 <__lshift>
    3cea:	1c39      	adds	r1, r7, #0
    3cec:	900a      	str	r0, [sp, #40]	; 0x28
    3cee:	f000 fcb3 	bl	4658 <__mcmp>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	dc02      	bgt.n	3cfc <_dtoa_r+0xa4c>
    3cf6:	d105      	bne.n	3d04 <_dtoa_r+0xa54>
    3cf8:	07e1      	lsls	r1, r4, #31
    3cfa:	d503      	bpl.n	3d04 <_dtoa_r+0xa54>
    3cfc:	2c39      	cmp	r4, #57	; 0x39
    3cfe:	d00e      	beq.n	3d1e <_dtoa_r+0xa6e>
    3d00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3d02:	3431      	adds	r4, #49	; 0x31
    3d04:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d08:	3501      	adds	r5, #1
    3d0a:	7014      	strb	r4, [r2, #0]
    3d0c:	e07e      	b.n	3e0c <_dtoa_r+0xb5c>
    3d0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3d10:	3501      	adds	r5, #1
    3d12:	950c      	str	r5, [sp, #48]	; 0x30
    3d14:	9d08      	ldr	r5, [sp, #32]
    3d16:	2d00      	cmp	r5, #0
    3d18:	dd0c      	ble.n	3d34 <_dtoa_r+0xa84>
    3d1a:	2c39      	cmp	r4, #57	; 0x39
    3d1c:	d105      	bne.n	3d2a <_dtoa_r+0xa7a>
    3d1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3d20:	9c09      	ldr	r4, [sp, #36]	; 0x24
    3d22:	2339      	movs	r3, #57	; 0x39
    3d24:	3501      	adds	r5, #1
    3d26:	7023      	strb	r3, [r4, #0]
    3d28:	e05b      	b.n	3de2 <_dtoa_r+0xb32>
    3d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3d2c:	3401      	adds	r4, #1
    3d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d30:	7004      	strb	r4, [r0, #0]
    3d32:	e06b      	b.n	3e0c <_dtoa_r+0xb5c>
    3d34:	9909      	ldr	r1, [sp, #36]	; 0x24
    3d36:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3d3a:	700c      	strb	r4, [r1, #0]
    3d3c:	4291      	cmp	r1, r2
    3d3e:	d03d      	beq.n	3dbc <_dtoa_r+0xb0c>
    3d40:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d42:	220a      	movs	r2, #10
    3d44:	2300      	movs	r3, #0
    3d46:	9807      	ldr	r0, [sp, #28]
    3d48:	f000 fac2 	bl	42d0 <__multadd>
    3d4c:	9c02      	ldr	r4, [sp, #8]
    3d4e:	900a      	str	r0, [sp, #40]	; 0x28
    3d50:	1c31      	adds	r1, r6, #0
    3d52:	9807      	ldr	r0, [sp, #28]
    3d54:	220a      	movs	r2, #10
    3d56:	2300      	movs	r3, #0
    3d58:	42a6      	cmp	r6, r4
    3d5a:	d104      	bne.n	3d66 <_dtoa_r+0xab6>
    3d5c:	f000 fab8 	bl	42d0 <__multadd>
    3d60:	1c06      	adds	r6, r0, #0
    3d62:	9002      	str	r0, [sp, #8]
    3d64:	e009      	b.n	3d7a <_dtoa_r+0xaca>
    3d66:	f000 fab3 	bl	42d0 <__multadd>
    3d6a:	9902      	ldr	r1, [sp, #8]
    3d6c:	1c06      	adds	r6, r0, #0
    3d6e:	220a      	movs	r2, #10
    3d70:	9807      	ldr	r0, [sp, #28]
    3d72:	2300      	movs	r3, #0
    3d74:	f000 faac 	bl	42d0 <__multadd>
    3d78:	9002      	str	r0, [sp, #8]
    3d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3d7c:	9509      	str	r5, [sp, #36]	; 0x24
    3d7e:	e75e      	b.n	3c3e <_dtoa_r+0x98e>
    3d80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3d82:	1c39      	adds	r1, r7, #0
    3d84:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d86:	f7ff fa07 	bl	3198 <quorem>
    3d8a:	1c04      	adds	r4, r0, #0
    3d8c:	3430      	adds	r4, #48	; 0x30
    3d8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3d90:	9908      	ldr	r1, [sp, #32]
    3d92:	702c      	strb	r4, [r5, #0]
    3d94:	3501      	adds	r5, #1
    3d96:	1a2b      	subs	r3, r5, r0
    3d98:	428b      	cmp	r3, r1
    3d9a:	db07      	blt.n	3dac <_dtoa_r+0xafc>
    3d9c:	1e0b      	subs	r3, r1, #0
    3d9e:	dc00      	bgt.n	3da2 <_dtoa_r+0xaf2>
    3da0:	2301      	movs	r3, #1
    3da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3da4:	9602      	str	r6, [sp, #8]
    3da6:	18d5      	adds	r5, r2, r3
    3da8:	2600      	movs	r6, #0
    3daa:	e007      	b.n	3dbc <_dtoa_r+0xb0c>
    3dac:	9807      	ldr	r0, [sp, #28]
    3dae:	990a      	ldr	r1, [sp, #40]	; 0x28
    3db0:	220a      	movs	r2, #10
    3db2:	2300      	movs	r3, #0
    3db4:	f000 fa8c 	bl	42d0 <__multadd>
    3db8:	900a      	str	r0, [sp, #40]	; 0x28
    3dba:	e7e2      	b.n	3d82 <_dtoa_r+0xad2>
    3dbc:	990a      	ldr	r1, [sp, #40]	; 0x28
    3dbe:	9807      	ldr	r0, [sp, #28]
    3dc0:	2201      	movs	r2, #1
    3dc2:	f000 fbf7 	bl	45b4 <__lshift>
    3dc6:	1c39      	adds	r1, r7, #0
    3dc8:	900a      	str	r0, [sp, #40]	; 0x28
    3dca:	f000 fc45 	bl	4658 <__mcmp>
    3dce:	2800      	cmp	r0, #0
    3dd0:	dc07      	bgt.n	3de2 <_dtoa_r+0xb32>
    3dd2:	d115      	bne.n	3e00 <_dtoa_r+0xb50>
    3dd4:	07e3      	lsls	r3, r4, #31
    3dd6:	d404      	bmi.n	3de2 <_dtoa_r+0xb32>
    3dd8:	e012      	b.n	3e00 <_dtoa_r+0xb50>
    3dda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3ddc:	42a3      	cmp	r3, r4
    3dde:	d005      	beq.n	3dec <_dtoa_r+0xb3c>
    3de0:	1c1d      	adds	r5, r3, #0
    3de2:	1e6b      	subs	r3, r5, #1
    3de4:	781a      	ldrb	r2, [r3, #0]
    3de6:	2a39      	cmp	r2, #57	; 0x39
    3de8:	d0f7      	beq.n	3dda <_dtoa_r+0xb2a>
    3dea:	e006      	b.n	3dfa <_dtoa_r+0xb4a>
    3dec:	9c06      	ldr	r4, [sp, #24]
    3dee:	2331      	movs	r3, #49	; 0x31
    3df0:	3401      	adds	r4, #1
    3df2:	9406      	str	r4, [sp, #24]
    3df4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3df6:	7023      	strb	r3, [r4, #0]
    3df8:	e008      	b.n	3e0c <_dtoa_r+0xb5c>
    3dfa:	3201      	adds	r2, #1
    3dfc:	701a      	strb	r2, [r3, #0]
    3dfe:	e005      	b.n	3e0c <_dtoa_r+0xb5c>
    3e00:	1e6b      	subs	r3, r5, #1
    3e02:	781a      	ldrb	r2, [r3, #0]
    3e04:	2a30      	cmp	r2, #48	; 0x30
    3e06:	d101      	bne.n	3e0c <_dtoa_r+0xb5c>
    3e08:	1c1d      	adds	r5, r3, #0
    3e0a:	e7f9      	b.n	3e00 <_dtoa_r+0xb50>
    3e0c:	9807      	ldr	r0, [sp, #28]
    3e0e:	1c39      	adds	r1, r7, #0
    3e10:	f000 fa45 	bl	429e <_Bfree>
    3e14:	9c02      	ldr	r4, [sp, #8]
    3e16:	2c00      	cmp	r4, #0
    3e18:	d00e      	beq.n	3e38 <_dtoa_r+0xb88>
    3e1a:	2e00      	cmp	r6, #0
    3e1c:	d005      	beq.n	3e2a <_dtoa_r+0xb7a>
    3e1e:	42a6      	cmp	r6, r4
    3e20:	d003      	beq.n	3e2a <_dtoa_r+0xb7a>
    3e22:	9807      	ldr	r0, [sp, #28]
    3e24:	1c31      	adds	r1, r6, #0
    3e26:	f000 fa3a 	bl	429e <_Bfree>
    3e2a:	9807      	ldr	r0, [sp, #28]
    3e2c:	9902      	ldr	r1, [sp, #8]
    3e2e:	f000 fa36 	bl	429e <_Bfree>
    3e32:	e001      	b.n	3e38 <_dtoa_r+0xb88>
    3e34:	9c11      	ldr	r4, [sp, #68]	; 0x44
    3e36:	9406      	str	r4, [sp, #24]
    3e38:	9807      	ldr	r0, [sp, #28]
    3e3a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3e3c:	f000 fa2f 	bl	429e <_Bfree>
    3e40:	2300      	movs	r3, #0
    3e42:	702b      	strb	r3, [r5, #0]
    3e44:	9b06      	ldr	r3, [sp, #24]
    3e46:	9c22      	ldr	r4, [sp, #136]	; 0x88
    3e48:	3301      	adds	r3, #1
    3e4a:	6023      	str	r3, [r4, #0]
    3e4c:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3e4e:	2c00      	cmp	r4, #0
    3e50:	d003      	beq.n	3e5a <_dtoa_r+0xbaa>
    3e52:	6025      	str	r5, [r4, #0]
    3e54:	e001      	b.n	3e5a <_dtoa_r+0xbaa>
    3e56:	4802      	ldr	r0, [pc, #8]	; (3e60 <_dtoa_r+0xbb0>)
    3e58:	e000      	b.n	3e5c <_dtoa_r+0xbac>
    3e5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3e5c:	b01b      	add	sp, #108	; 0x6c
    3e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e60:	00006f19 	.word	0x00006f19
    3e64:	46c0      	nop			; (mov r8, r8)
    3e66:	46c0      	nop			; (mov r8, r8)

00003e68 <__sflush_r>:
    3e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e6a:	898b      	ldrh	r3, [r1, #12]
    3e6c:	1c05      	adds	r5, r0, #0
    3e6e:	1c0c      	adds	r4, r1, #0
    3e70:	0719      	lsls	r1, r3, #28
    3e72:	d45e      	bmi.n	3f32 <__sflush_r+0xca>
    3e74:	6862      	ldr	r2, [r4, #4]
    3e76:	2a00      	cmp	r2, #0
    3e78:	dc02      	bgt.n	3e80 <__sflush_r+0x18>
    3e7a:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3e7c:	2f00      	cmp	r7, #0
    3e7e:	dd1a      	ble.n	3eb6 <__sflush_r+0x4e>
    3e80:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e82:	2f00      	cmp	r7, #0
    3e84:	d017      	beq.n	3eb6 <__sflush_r+0x4e>
    3e86:	2200      	movs	r2, #0
    3e88:	682e      	ldr	r6, [r5, #0]
    3e8a:	602a      	str	r2, [r5, #0]
    3e8c:	2280      	movs	r2, #128	; 0x80
    3e8e:	0152      	lsls	r2, r2, #5
    3e90:	401a      	ands	r2, r3
    3e92:	d001      	beq.n	3e98 <__sflush_r+0x30>
    3e94:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3e96:	e015      	b.n	3ec4 <__sflush_r+0x5c>
    3e98:	1c28      	adds	r0, r5, #0
    3e9a:	6a21      	ldr	r1, [r4, #32]
    3e9c:	2301      	movs	r3, #1
    3e9e:	47b8      	blx	r7
    3ea0:	1c02      	adds	r2, r0, #0
    3ea2:	1c41      	adds	r1, r0, #1
    3ea4:	d10e      	bne.n	3ec4 <__sflush_r+0x5c>
    3ea6:	682b      	ldr	r3, [r5, #0]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d00b      	beq.n	3ec4 <__sflush_r+0x5c>
    3eac:	2b1d      	cmp	r3, #29
    3eae:	d001      	beq.n	3eb4 <__sflush_r+0x4c>
    3eb0:	2b16      	cmp	r3, #22
    3eb2:	d102      	bne.n	3eba <__sflush_r+0x52>
    3eb4:	602e      	str	r6, [r5, #0]
    3eb6:	2000      	movs	r0, #0
    3eb8:	e05e      	b.n	3f78 <__sflush_r+0x110>
    3eba:	89a3      	ldrh	r3, [r4, #12]
    3ebc:	2140      	movs	r1, #64	; 0x40
    3ebe:	430b      	orrs	r3, r1
    3ec0:	81a3      	strh	r3, [r4, #12]
    3ec2:	e059      	b.n	3f78 <__sflush_r+0x110>
    3ec4:	89a3      	ldrh	r3, [r4, #12]
    3ec6:	075f      	lsls	r7, r3, #29
    3ec8:	d506      	bpl.n	3ed8 <__sflush_r+0x70>
    3eca:	6861      	ldr	r1, [r4, #4]
    3ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3ece:	1a52      	subs	r2, r2, r1
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d001      	beq.n	3ed8 <__sflush_r+0x70>
    3ed4:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3ed6:	1bd2      	subs	r2, r2, r7
    3ed8:	1c28      	adds	r0, r5, #0
    3eda:	6a21      	ldr	r1, [r4, #32]
    3edc:	2300      	movs	r3, #0
    3ede:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ee0:	47b8      	blx	r7
    3ee2:	89a2      	ldrh	r2, [r4, #12]
    3ee4:	1c41      	adds	r1, r0, #1
    3ee6:	d106      	bne.n	3ef6 <__sflush_r+0x8e>
    3ee8:	682b      	ldr	r3, [r5, #0]
    3eea:	2b00      	cmp	r3, #0
    3eec:	d003      	beq.n	3ef6 <__sflush_r+0x8e>
    3eee:	2b1d      	cmp	r3, #29
    3ef0:	d001      	beq.n	3ef6 <__sflush_r+0x8e>
    3ef2:	2b16      	cmp	r3, #22
    3ef4:	d119      	bne.n	3f2a <__sflush_r+0xc2>
    3ef6:	2300      	movs	r3, #0
    3ef8:	6063      	str	r3, [r4, #4]
    3efa:	6923      	ldr	r3, [r4, #16]
    3efc:	6023      	str	r3, [r4, #0]
    3efe:	04d7      	lsls	r7, r2, #19
    3f00:	d505      	bpl.n	3f0e <__sflush_r+0xa6>
    3f02:	1c41      	adds	r1, r0, #1
    3f04:	d102      	bne.n	3f0c <__sflush_r+0xa4>
    3f06:	682a      	ldr	r2, [r5, #0]
    3f08:	2a00      	cmp	r2, #0
    3f0a:	d100      	bne.n	3f0e <__sflush_r+0xa6>
    3f0c:	6560      	str	r0, [r4, #84]	; 0x54
    3f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3f10:	602e      	str	r6, [r5, #0]
    3f12:	2900      	cmp	r1, #0
    3f14:	d0cf      	beq.n	3eb6 <__sflush_r+0x4e>
    3f16:	1c23      	adds	r3, r4, #0
    3f18:	3344      	adds	r3, #68	; 0x44
    3f1a:	4299      	cmp	r1, r3
    3f1c:	d002      	beq.n	3f24 <__sflush_r+0xbc>
    3f1e:	1c28      	adds	r0, r5, #0
    3f20:	f000 fc82 	bl	4828 <_free_r>
    3f24:	2000      	movs	r0, #0
    3f26:	6360      	str	r0, [r4, #52]	; 0x34
    3f28:	e026      	b.n	3f78 <__sflush_r+0x110>
    3f2a:	2340      	movs	r3, #64	; 0x40
    3f2c:	431a      	orrs	r2, r3
    3f2e:	81a2      	strh	r2, [r4, #12]
    3f30:	e022      	b.n	3f78 <__sflush_r+0x110>
    3f32:	6926      	ldr	r6, [r4, #16]
    3f34:	2e00      	cmp	r6, #0
    3f36:	d0be      	beq.n	3eb6 <__sflush_r+0x4e>
    3f38:	6827      	ldr	r7, [r4, #0]
    3f3a:	2200      	movs	r2, #0
    3f3c:	1bbf      	subs	r7, r7, r6
    3f3e:	9701      	str	r7, [sp, #4]
    3f40:	6026      	str	r6, [r4, #0]
    3f42:	0799      	lsls	r1, r3, #30
    3f44:	d100      	bne.n	3f48 <__sflush_r+0xe0>
    3f46:	6962      	ldr	r2, [r4, #20]
    3f48:	60a2      	str	r2, [r4, #8]
    3f4a:	9f01      	ldr	r7, [sp, #4]
    3f4c:	2f00      	cmp	r7, #0
    3f4e:	ddb2      	ble.n	3eb6 <__sflush_r+0x4e>
    3f50:	1c28      	adds	r0, r5, #0
    3f52:	6a21      	ldr	r1, [r4, #32]
    3f54:	1c32      	adds	r2, r6, #0
    3f56:	9b01      	ldr	r3, [sp, #4]
    3f58:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    3f5a:	47b8      	blx	r7
    3f5c:	2800      	cmp	r0, #0
    3f5e:	dc06      	bgt.n	3f6e <__sflush_r+0x106>
    3f60:	89a3      	ldrh	r3, [r4, #12]
    3f62:	2240      	movs	r2, #64	; 0x40
    3f64:	4313      	orrs	r3, r2
    3f66:	2001      	movs	r0, #1
    3f68:	81a3      	strh	r3, [r4, #12]
    3f6a:	4240      	negs	r0, r0
    3f6c:	e004      	b.n	3f78 <__sflush_r+0x110>
    3f6e:	9f01      	ldr	r7, [sp, #4]
    3f70:	1836      	adds	r6, r6, r0
    3f72:	1a3f      	subs	r7, r7, r0
    3f74:	9701      	str	r7, [sp, #4]
    3f76:	e7e8      	b.n	3f4a <__sflush_r+0xe2>
    3f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003f7c <_fflush_r>:
    3f7c:	690a      	ldr	r2, [r1, #16]
    3f7e:	b538      	push	{r3, r4, r5, lr}
    3f80:	1c05      	adds	r5, r0, #0
    3f82:	1c0c      	adds	r4, r1, #0
    3f84:	2a00      	cmp	r2, #0
    3f86:	d101      	bne.n	3f8c <_fflush_r+0x10>
    3f88:	2000      	movs	r0, #0
    3f8a:	e01c      	b.n	3fc6 <_fflush_r+0x4a>
    3f8c:	2800      	cmp	r0, #0
    3f8e:	d004      	beq.n	3f9a <_fflush_r+0x1e>
    3f90:	6983      	ldr	r3, [r0, #24]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d101      	bne.n	3f9a <_fflush_r+0x1e>
    3f96:	f000 f871 	bl	407c <__sinit>
    3f9a:	4b0b      	ldr	r3, [pc, #44]	; (3fc8 <_fflush_r+0x4c>)
    3f9c:	429c      	cmp	r4, r3
    3f9e:	d101      	bne.n	3fa4 <_fflush_r+0x28>
    3fa0:	686c      	ldr	r4, [r5, #4]
    3fa2:	e008      	b.n	3fb6 <_fflush_r+0x3a>
    3fa4:	4b09      	ldr	r3, [pc, #36]	; (3fcc <_fflush_r+0x50>)
    3fa6:	429c      	cmp	r4, r3
    3fa8:	d101      	bne.n	3fae <_fflush_r+0x32>
    3faa:	68ac      	ldr	r4, [r5, #8]
    3fac:	e003      	b.n	3fb6 <_fflush_r+0x3a>
    3fae:	4b08      	ldr	r3, [pc, #32]	; (3fd0 <_fflush_r+0x54>)
    3fb0:	429c      	cmp	r4, r3
    3fb2:	d100      	bne.n	3fb6 <_fflush_r+0x3a>
    3fb4:	68ec      	ldr	r4, [r5, #12]
    3fb6:	220c      	movs	r2, #12
    3fb8:	5ea3      	ldrsh	r3, [r4, r2]
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d0e4      	beq.n	3f88 <_fflush_r+0xc>
    3fbe:	1c28      	adds	r0, r5, #0
    3fc0:	1c21      	adds	r1, r4, #0
    3fc2:	f7ff ff51 	bl	3e68 <__sflush_r>
    3fc6:	bd38      	pop	{r3, r4, r5, pc}
    3fc8:	00006f4c 	.word	0x00006f4c
    3fcc:	00006f6c 	.word	0x00006f6c
    3fd0:	00006f8c 	.word	0x00006f8c

00003fd4 <_cleanup_r>:
    3fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fd6:	1c04      	adds	r4, r0, #0
    3fd8:	1c07      	adds	r7, r0, #0
    3fda:	3448      	adds	r4, #72	; 0x48
    3fdc:	2c00      	cmp	r4, #0
    3fde:	d012      	beq.n	4006 <_cleanup_r+0x32>
    3fe0:	68a5      	ldr	r5, [r4, #8]
    3fe2:	6866      	ldr	r6, [r4, #4]
    3fe4:	3e01      	subs	r6, #1
    3fe6:	d40c      	bmi.n	4002 <_cleanup_r+0x2e>
    3fe8:	89ab      	ldrh	r3, [r5, #12]
    3fea:	2b01      	cmp	r3, #1
    3fec:	d907      	bls.n	3ffe <_cleanup_r+0x2a>
    3fee:	220e      	movs	r2, #14
    3ff0:	5eab      	ldrsh	r3, [r5, r2]
    3ff2:	3301      	adds	r3, #1
    3ff4:	d003      	beq.n	3ffe <_cleanup_r+0x2a>
    3ff6:	1c38      	adds	r0, r7, #0
    3ff8:	1c29      	adds	r1, r5, #0
    3ffa:	f7ff ffbf 	bl	3f7c <_fflush_r>
    3ffe:	3568      	adds	r5, #104	; 0x68
    4000:	e7f0      	b.n	3fe4 <_cleanup_r+0x10>
    4002:	6824      	ldr	r4, [r4, #0]
    4004:	e7ea      	b.n	3fdc <_cleanup_r+0x8>
    4006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004008 <std.isra.0>:
    4008:	2300      	movs	r3, #0
    400a:	b510      	push	{r4, lr}
    400c:	1c04      	adds	r4, r0, #0
    400e:	6003      	str	r3, [r0, #0]
    4010:	6043      	str	r3, [r0, #4]
    4012:	6083      	str	r3, [r0, #8]
    4014:	8181      	strh	r1, [r0, #12]
    4016:	6643      	str	r3, [r0, #100]	; 0x64
    4018:	81c2      	strh	r2, [r0, #14]
    401a:	6103      	str	r3, [r0, #16]
    401c:	6143      	str	r3, [r0, #20]
    401e:	6183      	str	r3, [r0, #24]
    4020:	1c19      	adds	r1, r3, #0
    4022:	2208      	movs	r2, #8
    4024:	305c      	adds	r0, #92	; 0x5c
    4026:	f7fe f9b2 	bl	238e <memset>
    402a:	4b05      	ldr	r3, [pc, #20]	; (4040 <std.isra.0+0x38>)
    402c:	6224      	str	r4, [r4, #32]
    402e:	6263      	str	r3, [r4, #36]	; 0x24
    4030:	4b04      	ldr	r3, [pc, #16]	; (4044 <std.isra.0+0x3c>)
    4032:	62a3      	str	r3, [r4, #40]	; 0x28
    4034:	4b04      	ldr	r3, [pc, #16]	; (4048 <std.isra.0+0x40>)
    4036:	62e3      	str	r3, [r4, #44]	; 0x2c
    4038:	4b04      	ldr	r3, [pc, #16]	; (404c <std.isra.0+0x44>)
    403a:	6323      	str	r3, [r4, #48]	; 0x30
    403c:	bd10      	pop	{r4, pc}
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	000049d9 	.word	0x000049d9
    4044:	00004a01 	.word	0x00004a01
    4048:	00004a39 	.word	0x00004a39
    404c:	00004a65 	.word	0x00004a65

00004050 <__sfmoreglue>:
    4050:	b570      	push	{r4, r5, r6, lr}
    4052:	1e4b      	subs	r3, r1, #1
    4054:	2568      	movs	r5, #104	; 0x68
    4056:	435d      	muls	r5, r3
    4058:	1c0e      	adds	r6, r1, #0
    405a:	1c29      	adds	r1, r5, #0
    405c:	3174      	adds	r1, #116	; 0x74
    405e:	f000 fc2b 	bl	48b8 <_malloc_r>
    4062:	1e04      	subs	r4, r0, #0
    4064:	d008      	beq.n	4078 <__sfmoreglue+0x28>
    4066:	2100      	movs	r1, #0
    4068:	6001      	str	r1, [r0, #0]
    406a:	6046      	str	r6, [r0, #4]
    406c:	1c2a      	adds	r2, r5, #0
    406e:	300c      	adds	r0, #12
    4070:	60a0      	str	r0, [r4, #8]
    4072:	3268      	adds	r2, #104	; 0x68
    4074:	f7fe f98b 	bl	238e <memset>
    4078:	1c20      	adds	r0, r4, #0
    407a:	bd70      	pop	{r4, r5, r6, pc}

0000407c <__sinit>:
    407c:	6983      	ldr	r3, [r0, #24]
    407e:	b513      	push	{r0, r1, r4, lr}
    4080:	1c04      	adds	r4, r0, #0
    4082:	2b00      	cmp	r3, #0
    4084:	d127      	bne.n	40d6 <__sinit+0x5a>
    4086:	6483      	str	r3, [r0, #72]	; 0x48
    4088:	64c3      	str	r3, [r0, #76]	; 0x4c
    408a:	6503      	str	r3, [r0, #80]	; 0x50
    408c:	4b12      	ldr	r3, [pc, #72]	; (40d8 <__sinit+0x5c>)
    408e:	4a13      	ldr	r2, [pc, #76]	; (40dc <__sinit+0x60>)
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	6282      	str	r2, [r0, #40]	; 0x28
    4094:	4298      	cmp	r0, r3
    4096:	d101      	bne.n	409c <__sinit+0x20>
    4098:	2301      	movs	r3, #1
    409a:	6183      	str	r3, [r0, #24]
    409c:	1c20      	adds	r0, r4, #0
    409e:	f000 f81f 	bl	40e0 <__sfp>
    40a2:	6060      	str	r0, [r4, #4]
    40a4:	1c20      	adds	r0, r4, #0
    40a6:	f000 f81b 	bl	40e0 <__sfp>
    40aa:	60a0      	str	r0, [r4, #8]
    40ac:	1c20      	adds	r0, r4, #0
    40ae:	f000 f817 	bl	40e0 <__sfp>
    40b2:	2104      	movs	r1, #4
    40b4:	60e0      	str	r0, [r4, #12]
    40b6:	2200      	movs	r2, #0
    40b8:	6860      	ldr	r0, [r4, #4]
    40ba:	f7ff ffa5 	bl	4008 <std.isra.0>
    40be:	68a0      	ldr	r0, [r4, #8]
    40c0:	2109      	movs	r1, #9
    40c2:	2201      	movs	r2, #1
    40c4:	f7ff ffa0 	bl	4008 <std.isra.0>
    40c8:	68e0      	ldr	r0, [r4, #12]
    40ca:	2112      	movs	r1, #18
    40cc:	2202      	movs	r2, #2
    40ce:	f7ff ff9b 	bl	4008 <std.isra.0>
    40d2:	2301      	movs	r3, #1
    40d4:	61a3      	str	r3, [r4, #24]
    40d6:	bd13      	pop	{r0, r1, r4, pc}
    40d8:	00006ef4 	.word	0x00006ef4
    40dc:	00003fd5 	.word	0x00003fd5

000040e0 <__sfp>:
    40e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40e2:	4b1d      	ldr	r3, [pc, #116]	; (4158 <__sfp+0x78>)
    40e4:	1c07      	adds	r7, r0, #0
    40e6:	681e      	ldr	r6, [r3, #0]
    40e8:	69b2      	ldr	r2, [r6, #24]
    40ea:	2a00      	cmp	r2, #0
    40ec:	d102      	bne.n	40f4 <__sfp+0x14>
    40ee:	1c30      	adds	r0, r6, #0
    40f0:	f7ff ffc4 	bl	407c <__sinit>
    40f4:	3648      	adds	r6, #72	; 0x48
    40f6:	68b4      	ldr	r4, [r6, #8]
    40f8:	6873      	ldr	r3, [r6, #4]
    40fa:	3b01      	subs	r3, #1
    40fc:	d405      	bmi.n	410a <__sfp+0x2a>
    40fe:	220c      	movs	r2, #12
    4100:	5ea5      	ldrsh	r5, [r4, r2]
    4102:	2d00      	cmp	r5, #0
    4104:	d010      	beq.n	4128 <__sfp+0x48>
    4106:	3468      	adds	r4, #104	; 0x68
    4108:	e7f7      	b.n	40fa <__sfp+0x1a>
    410a:	6833      	ldr	r3, [r6, #0]
    410c:	2b00      	cmp	r3, #0
    410e:	d106      	bne.n	411e <__sfp+0x3e>
    4110:	1c38      	adds	r0, r7, #0
    4112:	2104      	movs	r1, #4
    4114:	f7ff ff9c 	bl	4050 <__sfmoreglue>
    4118:	6030      	str	r0, [r6, #0]
    411a:	2800      	cmp	r0, #0
    411c:	d001      	beq.n	4122 <__sfp+0x42>
    411e:	6836      	ldr	r6, [r6, #0]
    4120:	e7e9      	b.n	40f6 <__sfp+0x16>
    4122:	230c      	movs	r3, #12
    4124:	603b      	str	r3, [r7, #0]
    4126:	e016      	b.n	4156 <__sfp+0x76>
    4128:	2301      	movs	r3, #1
    412a:	425b      	negs	r3, r3
    412c:	81e3      	strh	r3, [r4, #14]
    412e:	1c20      	adds	r0, r4, #0
    4130:	2301      	movs	r3, #1
    4132:	81a3      	strh	r3, [r4, #12]
    4134:	6665      	str	r5, [r4, #100]	; 0x64
    4136:	6025      	str	r5, [r4, #0]
    4138:	60a5      	str	r5, [r4, #8]
    413a:	6065      	str	r5, [r4, #4]
    413c:	6125      	str	r5, [r4, #16]
    413e:	6165      	str	r5, [r4, #20]
    4140:	61a5      	str	r5, [r4, #24]
    4142:	305c      	adds	r0, #92	; 0x5c
    4144:	1c29      	adds	r1, r5, #0
    4146:	2208      	movs	r2, #8
    4148:	f7fe f921 	bl	238e <memset>
    414c:	6365      	str	r5, [r4, #52]	; 0x34
    414e:	63a5      	str	r5, [r4, #56]	; 0x38
    4150:	64a5      	str	r5, [r4, #72]	; 0x48
    4152:	64e5      	str	r5, [r4, #76]	; 0x4c
    4154:	1c20      	adds	r0, r4, #0
    4156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4158:	00006ef4 	.word	0x00006ef4

0000415c <_localeconv_r>:
    415c:	4800      	ldr	r0, [pc, #0]	; (4160 <_localeconv_r+0x4>)
    415e:	4770      	bx	lr
    4160:	20000070 	.word	0x20000070

00004164 <__smakebuf_r>:
    4164:	b5f0      	push	{r4, r5, r6, r7, lr}
    4166:	898b      	ldrh	r3, [r1, #12]
    4168:	b091      	sub	sp, #68	; 0x44
    416a:	1c05      	adds	r5, r0, #0
    416c:	1c0c      	adds	r4, r1, #0
    416e:	079a      	lsls	r2, r3, #30
    4170:	d425      	bmi.n	41be <__smakebuf_r+0x5a>
    4172:	230e      	movs	r3, #14
    4174:	5ec9      	ldrsh	r1, [r1, r3]
    4176:	2900      	cmp	r1, #0
    4178:	da06      	bge.n	4188 <__smakebuf_r+0x24>
    417a:	89a7      	ldrh	r7, [r4, #12]
    417c:	2380      	movs	r3, #128	; 0x80
    417e:	401f      	ands	r7, r3
    4180:	d00f      	beq.n	41a2 <__smakebuf_r+0x3e>
    4182:	2700      	movs	r7, #0
    4184:	2640      	movs	r6, #64	; 0x40
    4186:	e00e      	b.n	41a6 <__smakebuf_r+0x42>
    4188:	aa01      	add	r2, sp, #4
    418a:	f000 fc9f 	bl	4acc <_fstat_r>
    418e:	2800      	cmp	r0, #0
    4190:	dbf3      	blt.n	417a <__smakebuf_r+0x16>
    4192:	9b02      	ldr	r3, [sp, #8]
    4194:	27f0      	movs	r7, #240	; 0xf0
    4196:	023f      	lsls	r7, r7, #8
    4198:	4a18      	ldr	r2, [pc, #96]	; (41fc <__smakebuf_r+0x98>)
    419a:	401f      	ands	r7, r3
    419c:	18bf      	adds	r7, r7, r2
    419e:	427b      	negs	r3, r7
    41a0:	415f      	adcs	r7, r3
    41a2:	2680      	movs	r6, #128	; 0x80
    41a4:	00f6      	lsls	r6, r6, #3
    41a6:	1c28      	adds	r0, r5, #0
    41a8:	1c31      	adds	r1, r6, #0
    41aa:	f000 fb85 	bl	48b8 <_malloc_r>
    41ae:	2800      	cmp	r0, #0
    41b0:	d10c      	bne.n	41cc <__smakebuf_r+0x68>
    41b2:	89a3      	ldrh	r3, [r4, #12]
    41b4:	059a      	lsls	r2, r3, #22
    41b6:	d41f      	bmi.n	41f8 <__smakebuf_r+0x94>
    41b8:	2202      	movs	r2, #2
    41ba:	4313      	orrs	r3, r2
    41bc:	81a3      	strh	r3, [r4, #12]
    41be:	1c23      	adds	r3, r4, #0
    41c0:	3347      	adds	r3, #71	; 0x47
    41c2:	6023      	str	r3, [r4, #0]
    41c4:	6123      	str	r3, [r4, #16]
    41c6:	2301      	movs	r3, #1
    41c8:	6163      	str	r3, [r4, #20]
    41ca:	e015      	b.n	41f8 <__smakebuf_r+0x94>
    41cc:	4b0c      	ldr	r3, [pc, #48]	; (4200 <__smakebuf_r+0x9c>)
    41ce:	2280      	movs	r2, #128	; 0x80
    41d0:	62ab      	str	r3, [r5, #40]	; 0x28
    41d2:	89a3      	ldrh	r3, [r4, #12]
    41d4:	6020      	str	r0, [r4, #0]
    41d6:	4313      	orrs	r3, r2
    41d8:	81a3      	strh	r3, [r4, #12]
    41da:	6120      	str	r0, [r4, #16]
    41dc:	6166      	str	r6, [r4, #20]
    41de:	2f00      	cmp	r7, #0
    41e0:	d00a      	beq.n	41f8 <__smakebuf_r+0x94>
    41e2:	230e      	movs	r3, #14
    41e4:	5ee1      	ldrsh	r1, [r4, r3]
    41e6:	1c28      	adds	r0, r5, #0
    41e8:	f000 fc82 	bl	4af0 <_isatty_r>
    41ec:	2800      	cmp	r0, #0
    41ee:	d003      	beq.n	41f8 <__smakebuf_r+0x94>
    41f0:	89a3      	ldrh	r3, [r4, #12]
    41f2:	2201      	movs	r2, #1
    41f4:	4313      	orrs	r3, r2
    41f6:	81a3      	strh	r3, [r4, #12]
    41f8:	b011      	add	sp, #68	; 0x44
    41fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41fc:	ffffe000 	.word	0xffffe000
    4200:	00003fd5 	.word	0x00003fd5

00004204 <malloc>:
    4204:	b508      	push	{r3, lr}
    4206:	4b03      	ldr	r3, [pc, #12]	; (4214 <malloc+0x10>)
    4208:	1c01      	adds	r1, r0, #0
    420a:	6818      	ldr	r0, [r3, #0]
    420c:	f000 fb54 	bl	48b8 <_malloc_r>
    4210:	bd08      	pop	{r3, pc}
    4212:	46c0      	nop			; (mov r8, r8)
    4214:	2000006c 	.word	0x2000006c

00004218 <memchr>:
    4218:	b2c9      	uxtb	r1, r1
    421a:	1882      	adds	r2, r0, r2
    421c:	4290      	cmp	r0, r2
    421e:	d004      	beq.n	422a <memchr+0x12>
    4220:	7803      	ldrb	r3, [r0, #0]
    4222:	428b      	cmp	r3, r1
    4224:	d002      	beq.n	422c <memchr+0x14>
    4226:	3001      	adds	r0, #1
    4228:	e7f8      	b.n	421c <memchr+0x4>
    422a:	2000      	movs	r0, #0
    422c:	4770      	bx	lr

0000422e <_Balloc>:
    422e:	b570      	push	{r4, r5, r6, lr}
    4230:	6a45      	ldr	r5, [r0, #36]	; 0x24
    4232:	1c04      	adds	r4, r0, #0
    4234:	1c0e      	adds	r6, r1, #0
    4236:	2d00      	cmp	r5, #0
    4238:	d107      	bne.n	424a <_Balloc+0x1c>
    423a:	2010      	movs	r0, #16
    423c:	f7ff ffe2 	bl	4204 <malloc>
    4240:	6260      	str	r0, [r4, #36]	; 0x24
    4242:	6045      	str	r5, [r0, #4]
    4244:	6085      	str	r5, [r0, #8]
    4246:	6005      	str	r5, [r0, #0]
    4248:	60c5      	str	r5, [r0, #12]
    424a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    424c:	68eb      	ldr	r3, [r5, #12]
    424e:	2b00      	cmp	r3, #0
    4250:	d009      	beq.n	4266 <_Balloc+0x38>
    4252:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4254:	00b2      	lsls	r2, r6, #2
    4256:	68db      	ldr	r3, [r3, #12]
    4258:	189a      	adds	r2, r3, r2
    425a:	6810      	ldr	r0, [r2, #0]
    425c:	2800      	cmp	r0, #0
    425e:	d00e      	beq.n	427e <_Balloc+0x50>
    4260:	6803      	ldr	r3, [r0, #0]
    4262:	6013      	str	r3, [r2, #0]
    4264:	e017      	b.n	4296 <_Balloc+0x68>
    4266:	1c20      	adds	r0, r4, #0
    4268:	2104      	movs	r1, #4
    426a:	2221      	movs	r2, #33	; 0x21
    426c:	f000 face 	bl	480c <_calloc_r>
    4270:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4272:	60e8      	str	r0, [r5, #12]
    4274:	68db      	ldr	r3, [r3, #12]
    4276:	2b00      	cmp	r3, #0
    4278:	d1eb      	bne.n	4252 <_Balloc+0x24>
    427a:	2000      	movs	r0, #0
    427c:	e00e      	b.n	429c <_Balloc+0x6e>
    427e:	2101      	movs	r1, #1
    4280:	1c0d      	adds	r5, r1, #0
    4282:	40b5      	lsls	r5, r6
    4284:	1d6a      	adds	r2, r5, #5
    4286:	0092      	lsls	r2, r2, #2
    4288:	1c20      	adds	r0, r4, #0
    428a:	f000 fabf 	bl	480c <_calloc_r>
    428e:	2800      	cmp	r0, #0
    4290:	d0f3      	beq.n	427a <_Balloc+0x4c>
    4292:	6046      	str	r6, [r0, #4]
    4294:	6085      	str	r5, [r0, #8]
    4296:	2200      	movs	r2, #0
    4298:	6102      	str	r2, [r0, #16]
    429a:	60c2      	str	r2, [r0, #12]
    429c:	bd70      	pop	{r4, r5, r6, pc}

0000429e <_Bfree>:
    429e:	b570      	push	{r4, r5, r6, lr}
    42a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    42a2:	1c06      	adds	r6, r0, #0
    42a4:	1c0d      	adds	r5, r1, #0
    42a6:	2c00      	cmp	r4, #0
    42a8:	d107      	bne.n	42ba <_Bfree+0x1c>
    42aa:	2010      	movs	r0, #16
    42ac:	f7ff ffaa 	bl	4204 <malloc>
    42b0:	6270      	str	r0, [r6, #36]	; 0x24
    42b2:	6044      	str	r4, [r0, #4]
    42b4:	6084      	str	r4, [r0, #8]
    42b6:	6004      	str	r4, [r0, #0]
    42b8:	60c4      	str	r4, [r0, #12]
    42ba:	2d00      	cmp	r5, #0
    42bc:	d007      	beq.n	42ce <_Bfree+0x30>
    42be:	6a72      	ldr	r2, [r6, #36]	; 0x24
    42c0:	6869      	ldr	r1, [r5, #4]
    42c2:	68d2      	ldr	r2, [r2, #12]
    42c4:	008b      	lsls	r3, r1, #2
    42c6:	18d3      	adds	r3, r2, r3
    42c8:	681a      	ldr	r2, [r3, #0]
    42ca:	602a      	str	r2, [r5, #0]
    42cc:	601d      	str	r5, [r3, #0]
    42ce:	bd70      	pop	{r4, r5, r6, pc}

000042d0 <__multadd>:
    42d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42d2:	1c0c      	adds	r4, r1, #0
    42d4:	1c1e      	adds	r6, r3, #0
    42d6:	690d      	ldr	r5, [r1, #16]
    42d8:	1c07      	adds	r7, r0, #0
    42da:	3114      	adds	r1, #20
    42dc:	2300      	movs	r3, #0
    42de:	6808      	ldr	r0, [r1, #0]
    42e0:	3301      	adds	r3, #1
    42e2:	b280      	uxth	r0, r0
    42e4:	4350      	muls	r0, r2
    42e6:	1980      	adds	r0, r0, r6
    42e8:	4684      	mov	ip, r0
    42ea:	0c06      	lsrs	r6, r0, #16
    42ec:	6808      	ldr	r0, [r1, #0]
    42ee:	0c00      	lsrs	r0, r0, #16
    42f0:	4350      	muls	r0, r2
    42f2:	1830      	adds	r0, r6, r0
    42f4:	0c06      	lsrs	r6, r0, #16
    42f6:	0400      	lsls	r0, r0, #16
    42f8:	9001      	str	r0, [sp, #4]
    42fa:	4660      	mov	r0, ip
    42fc:	b280      	uxth	r0, r0
    42fe:	4684      	mov	ip, r0
    4300:	9801      	ldr	r0, [sp, #4]
    4302:	4484      	add	ip, r0
    4304:	4660      	mov	r0, ip
    4306:	c101      	stmia	r1!, {r0}
    4308:	42ab      	cmp	r3, r5
    430a:	dbe8      	blt.n	42de <__multadd+0xe>
    430c:	2e00      	cmp	r6, #0
    430e:	d01b      	beq.n	4348 <__multadd+0x78>
    4310:	68a3      	ldr	r3, [r4, #8]
    4312:	429d      	cmp	r5, r3
    4314:	db12      	blt.n	433c <__multadd+0x6c>
    4316:	6861      	ldr	r1, [r4, #4]
    4318:	1c38      	adds	r0, r7, #0
    431a:	3101      	adds	r1, #1
    431c:	f7ff ff87 	bl	422e <_Balloc>
    4320:	6922      	ldr	r2, [r4, #16]
    4322:	1c21      	adds	r1, r4, #0
    4324:	3202      	adds	r2, #2
    4326:	9001      	str	r0, [sp, #4]
    4328:	310c      	adds	r1, #12
    432a:	0092      	lsls	r2, r2, #2
    432c:	300c      	adds	r0, #12
    432e:	f7fe f825 	bl	237c <memcpy>
    4332:	1c21      	adds	r1, r4, #0
    4334:	1c38      	adds	r0, r7, #0
    4336:	f7ff ffb2 	bl	429e <_Bfree>
    433a:	9c01      	ldr	r4, [sp, #4]
    433c:	1d2b      	adds	r3, r5, #4
    433e:	009b      	lsls	r3, r3, #2
    4340:	18e3      	adds	r3, r4, r3
    4342:	3501      	adds	r5, #1
    4344:	605e      	str	r6, [r3, #4]
    4346:	6125      	str	r5, [r4, #16]
    4348:	1c20      	adds	r0, r4, #0
    434a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000434c <__hi0bits>:
    434c:	2200      	movs	r2, #0
    434e:	1c03      	adds	r3, r0, #0
    4350:	0c01      	lsrs	r1, r0, #16
    4352:	4291      	cmp	r1, r2
    4354:	d101      	bne.n	435a <__hi0bits+0xe>
    4356:	0403      	lsls	r3, r0, #16
    4358:	2210      	movs	r2, #16
    435a:	0e19      	lsrs	r1, r3, #24
    435c:	d101      	bne.n	4362 <__hi0bits+0x16>
    435e:	3208      	adds	r2, #8
    4360:	021b      	lsls	r3, r3, #8
    4362:	0f19      	lsrs	r1, r3, #28
    4364:	d101      	bne.n	436a <__hi0bits+0x1e>
    4366:	3204      	adds	r2, #4
    4368:	011b      	lsls	r3, r3, #4
    436a:	0f99      	lsrs	r1, r3, #30
    436c:	d101      	bne.n	4372 <__hi0bits+0x26>
    436e:	3202      	adds	r2, #2
    4370:	009b      	lsls	r3, r3, #2
    4372:	2b00      	cmp	r3, #0
    4374:	db04      	blt.n	4380 <__hi0bits+0x34>
    4376:	2020      	movs	r0, #32
    4378:	0059      	lsls	r1, r3, #1
    437a:	d502      	bpl.n	4382 <__hi0bits+0x36>
    437c:	1c50      	adds	r0, r2, #1
    437e:	e000      	b.n	4382 <__hi0bits+0x36>
    4380:	1c10      	adds	r0, r2, #0
    4382:	4770      	bx	lr

00004384 <__lo0bits>:
    4384:	6803      	ldr	r3, [r0, #0]
    4386:	2207      	movs	r2, #7
    4388:	1c01      	adds	r1, r0, #0
    438a:	401a      	ands	r2, r3
    438c:	d00b      	beq.n	43a6 <__lo0bits+0x22>
    438e:	2201      	movs	r2, #1
    4390:	2000      	movs	r0, #0
    4392:	4213      	tst	r3, r2
    4394:	d122      	bne.n	43dc <__lo0bits+0x58>
    4396:	2002      	movs	r0, #2
    4398:	4203      	tst	r3, r0
    439a:	d001      	beq.n	43a0 <__lo0bits+0x1c>
    439c:	40d3      	lsrs	r3, r2
    439e:	e01b      	b.n	43d8 <__lo0bits+0x54>
    43a0:	089b      	lsrs	r3, r3, #2
    43a2:	600b      	str	r3, [r1, #0]
    43a4:	e01a      	b.n	43dc <__lo0bits+0x58>
    43a6:	b298      	uxth	r0, r3
    43a8:	2800      	cmp	r0, #0
    43aa:	d101      	bne.n	43b0 <__lo0bits+0x2c>
    43ac:	0c1b      	lsrs	r3, r3, #16
    43ae:	2210      	movs	r2, #16
    43b0:	b2d8      	uxtb	r0, r3
    43b2:	2800      	cmp	r0, #0
    43b4:	d101      	bne.n	43ba <__lo0bits+0x36>
    43b6:	3208      	adds	r2, #8
    43b8:	0a1b      	lsrs	r3, r3, #8
    43ba:	0718      	lsls	r0, r3, #28
    43bc:	d101      	bne.n	43c2 <__lo0bits+0x3e>
    43be:	3204      	adds	r2, #4
    43c0:	091b      	lsrs	r3, r3, #4
    43c2:	0798      	lsls	r0, r3, #30
    43c4:	d101      	bne.n	43ca <__lo0bits+0x46>
    43c6:	3202      	adds	r2, #2
    43c8:	089b      	lsrs	r3, r3, #2
    43ca:	07d8      	lsls	r0, r3, #31
    43cc:	d404      	bmi.n	43d8 <__lo0bits+0x54>
    43ce:	085b      	lsrs	r3, r3, #1
    43d0:	2020      	movs	r0, #32
    43d2:	2b00      	cmp	r3, #0
    43d4:	d002      	beq.n	43dc <__lo0bits+0x58>
    43d6:	3201      	adds	r2, #1
    43d8:	600b      	str	r3, [r1, #0]
    43da:	1c10      	adds	r0, r2, #0
    43dc:	4770      	bx	lr

000043de <__i2b>:
    43de:	b510      	push	{r4, lr}
    43e0:	1c0c      	adds	r4, r1, #0
    43e2:	2101      	movs	r1, #1
    43e4:	f7ff ff23 	bl	422e <_Balloc>
    43e8:	2301      	movs	r3, #1
    43ea:	6144      	str	r4, [r0, #20]
    43ec:	6103      	str	r3, [r0, #16]
    43ee:	bd10      	pop	{r4, pc}

000043f0 <__multiply>:
    43f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43f2:	1c0c      	adds	r4, r1, #0
    43f4:	1c15      	adds	r5, r2, #0
    43f6:	6909      	ldr	r1, [r1, #16]
    43f8:	6912      	ldr	r2, [r2, #16]
    43fa:	b08b      	sub	sp, #44	; 0x2c
    43fc:	4291      	cmp	r1, r2
    43fe:	da02      	bge.n	4406 <__multiply+0x16>
    4400:	1c23      	adds	r3, r4, #0
    4402:	1c2c      	adds	r4, r5, #0
    4404:	1c1d      	adds	r5, r3, #0
    4406:	6927      	ldr	r7, [r4, #16]
    4408:	692e      	ldr	r6, [r5, #16]
    440a:	68a2      	ldr	r2, [r4, #8]
    440c:	19bb      	adds	r3, r7, r6
    440e:	6861      	ldr	r1, [r4, #4]
    4410:	9302      	str	r3, [sp, #8]
    4412:	4293      	cmp	r3, r2
    4414:	dd00      	ble.n	4418 <__multiply+0x28>
    4416:	3101      	adds	r1, #1
    4418:	f7ff ff09 	bl	422e <_Balloc>
    441c:	1c03      	adds	r3, r0, #0
    441e:	9003      	str	r0, [sp, #12]
    4420:	9802      	ldr	r0, [sp, #8]
    4422:	3314      	adds	r3, #20
    4424:	0082      	lsls	r2, r0, #2
    4426:	189a      	adds	r2, r3, r2
    4428:	1c19      	adds	r1, r3, #0
    442a:	4291      	cmp	r1, r2
    442c:	d202      	bcs.n	4434 <__multiply+0x44>
    442e:	2000      	movs	r0, #0
    4430:	c101      	stmia	r1!, {r0}
    4432:	e7fa      	b.n	442a <__multiply+0x3a>
    4434:	3514      	adds	r5, #20
    4436:	3414      	adds	r4, #20
    4438:	00bf      	lsls	r7, r7, #2
    443a:	46ac      	mov	ip, r5
    443c:	00b6      	lsls	r6, r6, #2
    443e:	19e7      	adds	r7, r4, r7
    4440:	4466      	add	r6, ip
    4442:	9404      	str	r4, [sp, #16]
    4444:	9707      	str	r7, [sp, #28]
    4446:	9609      	str	r6, [sp, #36]	; 0x24
    4448:	9e09      	ldr	r6, [sp, #36]	; 0x24
    444a:	45b4      	cmp	ip, r6
    444c:	d256      	bcs.n	44fc <__multiply+0x10c>
    444e:	4665      	mov	r5, ip
    4450:	882d      	ldrh	r5, [r5, #0]
    4452:	9505      	str	r5, [sp, #20]
    4454:	2d00      	cmp	r5, #0
    4456:	d01f      	beq.n	4498 <__multiply+0xa8>
    4458:	9c04      	ldr	r4, [sp, #16]
    445a:	1c19      	adds	r1, r3, #0
    445c:	2000      	movs	r0, #0
    445e:	680f      	ldr	r7, [r1, #0]
    4460:	cc40      	ldmia	r4!, {r6}
    4462:	b2bf      	uxth	r7, r7
    4464:	9d05      	ldr	r5, [sp, #20]
    4466:	9706      	str	r7, [sp, #24]
    4468:	b2b7      	uxth	r7, r6
    446a:	436f      	muls	r7, r5
    446c:	9d06      	ldr	r5, [sp, #24]
    446e:	0c36      	lsrs	r6, r6, #16
    4470:	19ef      	adds	r7, r5, r7
    4472:	183f      	adds	r7, r7, r0
    4474:	6808      	ldr	r0, [r1, #0]
    4476:	9108      	str	r1, [sp, #32]
    4478:	0c05      	lsrs	r5, r0, #16
    447a:	9805      	ldr	r0, [sp, #20]
    447c:	4346      	muls	r6, r0
    447e:	0c38      	lsrs	r0, r7, #16
    4480:	19ad      	adds	r5, r5, r6
    4482:	182d      	adds	r5, r5, r0
    4484:	0c28      	lsrs	r0, r5, #16
    4486:	b2bf      	uxth	r7, r7
    4488:	042d      	lsls	r5, r5, #16
    448a:	433d      	orrs	r5, r7
    448c:	c120      	stmia	r1!, {r5}
    448e:	9d07      	ldr	r5, [sp, #28]
    4490:	42ac      	cmp	r4, r5
    4492:	d3e4      	bcc.n	445e <__multiply+0x6e>
    4494:	9e08      	ldr	r6, [sp, #32]
    4496:	6070      	str	r0, [r6, #4]
    4498:	4667      	mov	r7, ip
    449a:	887d      	ldrh	r5, [r7, #2]
    449c:	2d00      	cmp	r5, #0
    449e:	d022      	beq.n	44e6 <__multiply+0xf6>
    44a0:	2600      	movs	r6, #0
    44a2:	6818      	ldr	r0, [r3, #0]
    44a4:	9c04      	ldr	r4, [sp, #16]
    44a6:	1c19      	adds	r1, r3, #0
    44a8:	9601      	str	r6, [sp, #4]
    44aa:	8827      	ldrh	r7, [r4, #0]
    44ac:	b280      	uxth	r0, r0
    44ae:	436f      	muls	r7, r5
    44b0:	9706      	str	r7, [sp, #24]
    44b2:	9e06      	ldr	r6, [sp, #24]
    44b4:	884f      	ldrh	r7, [r1, #2]
    44b6:	9105      	str	r1, [sp, #20]
    44b8:	19f6      	adds	r6, r6, r7
    44ba:	9f01      	ldr	r7, [sp, #4]
    44bc:	19f7      	adds	r7, r6, r7
    44be:	9706      	str	r7, [sp, #24]
    44c0:	043f      	lsls	r7, r7, #16
    44c2:	4338      	orrs	r0, r7
    44c4:	6008      	str	r0, [r1, #0]
    44c6:	cc01      	ldmia	r4!, {r0}
    44c8:	888f      	ldrh	r7, [r1, #4]
    44ca:	0c00      	lsrs	r0, r0, #16
    44cc:	4368      	muls	r0, r5
    44ce:	19c0      	adds	r0, r0, r7
    44d0:	9f06      	ldr	r7, [sp, #24]
    44d2:	3104      	adds	r1, #4
    44d4:	0c3e      	lsrs	r6, r7, #16
    44d6:	1980      	adds	r0, r0, r6
    44d8:	9f07      	ldr	r7, [sp, #28]
    44da:	0c06      	lsrs	r6, r0, #16
    44dc:	9601      	str	r6, [sp, #4]
    44de:	42a7      	cmp	r7, r4
    44e0:	d8e3      	bhi.n	44aa <__multiply+0xba>
    44e2:	9905      	ldr	r1, [sp, #20]
    44e4:	6048      	str	r0, [r1, #4]
    44e6:	2504      	movs	r5, #4
    44e8:	44ac      	add	ip, r5
    44ea:	195b      	adds	r3, r3, r5
    44ec:	e7ac      	b.n	4448 <__multiply+0x58>
    44ee:	3a04      	subs	r2, #4
    44f0:	6810      	ldr	r0, [r2, #0]
    44f2:	2800      	cmp	r0, #0
    44f4:	d105      	bne.n	4502 <__multiply+0x112>
    44f6:	9f02      	ldr	r7, [sp, #8]
    44f8:	3f01      	subs	r7, #1
    44fa:	9702      	str	r7, [sp, #8]
    44fc:	9d02      	ldr	r5, [sp, #8]
    44fe:	2d00      	cmp	r5, #0
    4500:	dcf5      	bgt.n	44ee <__multiply+0xfe>
    4502:	9f03      	ldr	r7, [sp, #12]
    4504:	9e02      	ldr	r6, [sp, #8]
    4506:	1c38      	adds	r0, r7, #0
    4508:	613e      	str	r6, [r7, #16]
    450a:	b00b      	add	sp, #44	; 0x2c
    450c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004510 <__pow5mult>:
    4510:	2303      	movs	r3, #3
    4512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4514:	4013      	ands	r3, r2
    4516:	1c05      	adds	r5, r0, #0
    4518:	1c0e      	adds	r6, r1, #0
    451a:	1c14      	adds	r4, r2, #0
    451c:	2b00      	cmp	r3, #0
    451e:	d007      	beq.n	4530 <__pow5mult+0x20>
    4520:	4a22      	ldr	r2, [pc, #136]	; (45ac <__pow5mult+0x9c>)
    4522:	3b01      	subs	r3, #1
    4524:	009b      	lsls	r3, r3, #2
    4526:	589a      	ldr	r2, [r3, r2]
    4528:	2300      	movs	r3, #0
    452a:	f7ff fed1 	bl	42d0 <__multadd>
    452e:	1c06      	adds	r6, r0, #0
    4530:	10a4      	asrs	r4, r4, #2
    4532:	9401      	str	r4, [sp, #4]
    4534:	d037      	beq.n	45a6 <__pow5mult+0x96>
    4536:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    4538:	2c00      	cmp	r4, #0
    453a:	d107      	bne.n	454c <__pow5mult+0x3c>
    453c:	2010      	movs	r0, #16
    453e:	f7ff fe61 	bl	4204 <malloc>
    4542:	6268      	str	r0, [r5, #36]	; 0x24
    4544:	6044      	str	r4, [r0, #4]
    4546:	6084      	str	r4, [r0, #8]
    4548:	6004      	str	r4, [r0, #0]
    454a:	60c4      	str	r4, [r0, #12]
    454c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    454e:	68bc      	ldr	r4, [r7, #8]
    4550:	2c00      	cmp	r4, #0
    4552:	d110      	bne.n	4576 <__pow5mult+0x66>
    4554:	1c28      	adds	r0, r5, #0
    4556:	4916      	ldr	r1, [pc, #88]	; (45b0 <__pow5mult+0xa0>)
    4558:	f7ff ff41 	bl	43de <__i2b>
    455c:	2300      	movs	r3, #0
    455e:	60b8      	str	r0, [r7, #8]
    4560:	1c04      	adds	r4, r0, #0
    4562:	6003      	str	r3, [r0, #0]
    4564:	e007      	b.n	4576 <__pow5mult+0x66>
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	105b      	asrs	r3, r3, #1
    456a:	9301      	str	r3, [sp, #4]
    456c:	d01b      	beq.n	45a6 <__pow5mult+0x96>
    456e:	6820      	ldr	r0, [r4, #0]
    4570:	2800      	cmp	r0, #0
    4572:	d00f      	beq.n	4594 <__pow5mult+0x84>
    4574:	1c04      	adds	r4, r0, #0
    4576:	9b01      	ldr	r3, [sp, #4]
    4578:	07db      	lsls	r3, r3, #31
    457a:	d5f4      	bpl.n	4566 <__pow5mult+0x56>
    457c:	1c31      	adds	r1, r6, #0
    457e:	1c22      	adds	r2, r4, #0
    4580:	1c28      	adds	r0, r5, #0
    4582:	f7ff ff35 	bl	43f0 <__multiply>
    4586:	1c31      	adds	r1, r6, #0
    4588:	1c07      	adds	r7, r0, #0
    458a:	1c28      	adds	r0, r5, #0
    458c:	f7ff fe87 	bl	429e <_Bfree>
    4590:	1c3e      	adds	r6, r7, #0
    4592:	e7e8      	b.n	4566 <__pow5mult+0x56>
    4594:	1c28      	adds	r0, r5, #0
    4596:	1c21      	adds	r1, r4, #0
    4598:	1c22      	adds	r2, r4, #0
    459a:	f7ff ff29 	bl	43f0 <__multiply>
    459e:	2300      	movs	r3, #0
    45a0:	6020      	str	r0, [r4, #0]
    45a2:	6003      	str	r3, [r0, #0]
    45a4:	e7e6      	b.n	4574 <__pow5mult+0x64>
    45a6:	1c30      	adds	r0, r6, #0
    45a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45aa:	46c0      	nop			; (mov r8, r8)
    45ac:	000070a8 	.word	0x000070a8
    45b0:	00000271 	.word	0x00000271

000045b4 <__lshift>:
    45b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45b6:	1c0c      	adds	r4, r1, #0
    45b8:	b085      	sub	sp, #20
    45ba:	9003      	str	r0, [sp, #12]
    45bc:	6920      	ldr	r0, [r4, #16]
    45be:	1155      	asrs	r5, r2, #5
    45c0:	1828      	adds	r0, r5, r0
    45c2:	9002      	str	r0, [sp, #8]
    45c4:	6849      	ldr	r1, [r1, #4]
    45c6:	3001      	adds	r0, #1
    45c8:	68a3      	ldr	r3, [r4, #8]
    45ca:	1c17      	adds	r7, r2, #0
    45cc:	9000      	str	r0, [sp, #0]
    45ce:	9a00      	ldr	r2, [sp, #0]
    45d0:	429a      	cmp	r2, r3
    45d2:	dd02      	ble.n	45da <__lshift+0x26>
    45d4:	3101      	adds	r1, #1
    45d6:	005b      	lsls	r3, r3, #1
    45d8:	e7f9      	b.n	45ce <__lshift+0x1a>
    45da:	9803      	ldr	r0, [sp, #12]
    45dc:	f7ff fe27 	bl	422e <_Balloc>
    45e0:	1c02      	adds	r2, r0, #0
    45e2:	1c06      	adds	r6, r0, #0
    45e4:	3214      	adds	r2, #20
    45e6:	2300      	movs	r3, #0
    45e8:	42ab      	cmp	r3, r5
    45ea:	da04      	bge.n	45f6 <__lshift+0x42>
    45ec:	0099      	lsls	r1, r3, #2
    45ee:	2000      	movs	r0, #0
    45f0:	5050      	str	r0, [r2, r1]
    45f2:	3301      	adds	r3, #1
    45f4:	e7f8      	b.n	45e8 <__lshift+0x34>
    45f6:	43eb      	mvns	r3, r5
    45f8:	17db      	asrs	r3, r3, #31
    45fa:	401d      	ands	r5, r3
    45fc:	00ad      	lsls	r5, r5, #2
    45fe:	6920      	ldr	r0, [r4, #16]
    4600:	1955      	adds	r5, r2, r5
    4602:	1c22      	adds	r2, r4, #0
    4604:	3214      	adds	r2, #20
    4606:	0083      	lsls	r3, r0, #2
    4608:	189b      	adds	r3, r3, r2
    460a:	469c      	mov	ip, r3
    460c:	231f      	movs	r3, #31
    460e:	401f      	ands	r7, r3
    4610:	d014      	beq.n	463c <__lshift+0x88>
    4612:	2320      	movs	r3, #32
    4614:	1bdb      	subs	r3, r3, r7
    4616:	9301      	str	r3, [sp, #4]
    4618:	2300      	movs	r3, #0
    461a:	6810      	ldr	r0, [r2, #0]
    461c:	1c29      	adds	r1, r5, #0
    461e:	40b8      	lsls	r0, r7
    4620:	4303      	orrs	r3, r0
    4622:	c508      	stmia	r5!, {r3}
    4624:	ca08      	ldmia	r2!, {r3}
    4626:	9801      	ldr	r0, [sp, #4]
    4628:	40c3      	lsrs	r3, r0
    462a:	4594      	cmp	ip, r2
    462c:	d8f5      	bhi.n	461a <__lshift+0x66>
    462e:	604b      	str	r3, [r1, #4]
    4630:	2b00      	cmp	r3, #0
    4632:	d007      	beq.n	4644 <__lshift+0x90>
    4634:	9902      	ldr	r1, [sp, #8]
    4636:	3102      	adds	r1, #2
    4638:	9100      	str	r1, [sp, #0]
    463a:	e003      	b.n	4644 <__lshift+0x90>
    463c:	ca08      	ldmia	r2!, {r3}
    463e:	c508      	stmia	r5!, {r3}
    4640:	4594      	cmp	ip, r2
    4642:	d8fb      	bhi.n	463c <__lshift+0x88>
    4644:	9b00      	ldr	r3, [sp, #0]
    4646:	9803      	ldr	r0, [sp, #12]
    4648:	3b01      	subs	r3, #1
    464a:	6133      	str	r3, [r6, #16]
    464c:	1c21      	adds	r1, r4, #0
    464e:	f7ff fe26 	bl	429e <_Bfree>
    4652:	1c30      	adds	r0, r6, #0
    4654:	b005      	add	sp, #20
    4656:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004658 <__mcmp>:
    4658:	b510      	push	{r4, lr}
    465a:	6902      	ldr	r2, [r0, #16]
    465c:	690c      	ldr	r4, [r1, #16]
    465e:	1c03      	adds	r3, r0, #0
    4660:	1b10      	subs	r0, r2, r4
    4662:	d113      	bne.n	468c <__mcmp+0x34>
    4664:	1c1a      	adds	r2, r3, #0
    4666:	00a0      	lsls	r0, r4, #2
    4668:	3214      	adds	r2, #20
    466a:	3114      	adds	r1, #20
    466c:	1813      	adds	r3, r2, r0
    466e:	1809      	adds	r1, r1, r0
    4670:	3b04      	subs	r3, #4
    4672:	3904      	subs	r1, #4
    4674:	681c      	ldr	r4, [r3, #0]
    4676:	6808      	ldr	r0, [r1, #0]
    4678:	4284      	cmp	r4, r0
    467a:	d004      	beq.n	4686 <__mcmp+0x2e>
    467c:	4284      	cmp	r4, r0
    467e:	4180      	sbcs	r0, r0
    4680:	2301      	movs	r3, #1
    4682:	4318      	orrs	r0, r3
    4684:	e002      	b.n	468c <__mcmp+0x34>
    4686:	4293      	cmp	r3, r2
    4688:	d8f2      	bhi.n	4670 <__mcmp+0x18>
    468a:	2000      	movs	r0, #0
    468c:	bd10      	pop	{r4, pc}

0000468e <__mdiff>:
    468e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4690:	1c07      	adds	r7, r0, #0
    4692:	b085      	sub	sp, #20
    4694:	1c08      	adds	r0, r1, #0
    4696:	1c0d      	adds	r5, r1, #0
    4698:	1c11      	adds	r1, r2, #0
    469a:	1c14      	adds	r4, r2, #0
    469c:	f7ff ffdc 	bl	4658 <__mcmp>
    46a0:	1e06      	subs	r6, r0, #0
    46a2:	d107      	bne.n	46b4 <__mdiff+0x26>
    46a4:	1c38      	adds	r0, r7, #0
    46a6:	1c31      	adds	r1, r6, #0
    46a8:	f7ff fdc1 	bl	422e <_Balloc>
    46ac:	2301      	movs	r3, #1
    46ae:	6103      	str	r3, [r0, #16]
    46b0:	6146      	str	r6, [r0, #20]
    46b2:	e050      	b.n	4756 <__mdiff+0xc8>
    46b4:	2800      	cmp	r0, #0
    46b6:	db01      	blt.n	46bc <__mdiff+0x2e>
    46b8:	2600      	movs	r6, #0
    46ba:	e003      	b.n	46c4 <__mdiff+0x36>
    46bc:	1c2b      	adds	r3, r5, #0
    46be:	2601      	movs	r6, #1
    46c0:	1c25      	adds	r5, r4, #0
    46c2:	1c1c      	adds	r4, r3, #0
    46c4:	6869      	ldr	r1, [r5, #4]
    46c6:	1c38      	adds	r0, r7, #0
    46c8:	f7ff fdb1 	bl	422e <_Balloc>
    46cc:	692a      	ldr	r2, [r5, #16]
    46ce:	1c2b      	adds	r3, r5, #0
    46d0:	3314      	adds	r3, #20
    46d2:	0091      	lsls	r1, r2, #2
    46d4:	1859      	adds	r1, r3, r1
    46d6:	9102      	str	r1, [sp, #8]
    46d8:	6921      	ldr	r1, [r4, #16]
    46da:	1c25      	adds	r5, r4, #0
    46dc:	3514      	adds	r5, #20
    46de:	0089      	lsls	r1, r1, #2
    46e0:	1869      	adds	r1, r5, r1
    46e2:	1c04      	adds	r4, r0, #0
    46e4:	9103      	str	r1, [sp, #12]
    46e6:	60c6      	str	r6, [r0, #12]
    46e8:	3414      	adds	r4, #20
    46ea:	2100      	movs	r1, #0
    46ec:	cb40      	ldmia	r3!, {r6}
    46ee:	cd80      	ldmia	r5!, {r7}
    46f0:	46b4      	mov	ip, r6
    46f2:	b2b6      	uxth	r6, r6
    46f4:	1871      	adds	r1, r6, r1
    46f6:	b2be      	uxth	r6, r7
    46f8:	1b8e      	subs	r6, r1, r6
    46fa:	4661      	mov	r1, ip
    46fc:	9601      	str	r6, [sp, #4]
    46fe:	0c3f      	lsrs	r7, r7, #16
    4700:	0c0e      	lsrs	r6, r1, #16
    4702:	1bf7      	subs	r7, r6, r7
    4704:	9e01      	ldr	r6, [sp, #4]
    4706:	3404      	adds	r4, #4
    4708:	1431      	asrs	r1, r6, #16
    470a:	187f      	adds	r7, r7, r1
    470c:	1439      	asrs	r1, r7, #16
    470e:	043f      	lsls	r7, r7, #16
    4710:	9700      	str	r7, [sp, #0]
    4712:	9f01      	ldr	r7, [sp, #4]
    4714:	1f26      	subs	r6, r4, #4
    4716:	46b4      	mov	ip, r6
    4718:	b2be      	uxth	r6, r7
    471a:	9f00      	ldr	r7, [sp, #0]
    471c:	4337      	orrs	r7, r6
    471e:	4666      	mov	r6, ip
    4720:	6037      	str	r7, [r6, #0]
    4722:	9f03      	ldr	r7, [sp, #12]
    4724:	42bd      	cmp	r5, r7
    4726:	d3e1      	bcc.n	46ec <__mdiff+0x5e>
    4728:	9e02      	ldr	r6, [sp, #8]
    472a:	1c25      	adds	r5, r4, #0
    472c:	42b3      	cmp	r3, r6
    472e:	d20b      	bcs.n	4748 <__mdiff+0xba>
    4730:	cb80      	ldmia	r3!, {r7}
    4732:	b2bd      	uxth	r5, r7
    4734:	186d      	adds	r5, r5, r1
    4736:	142e      	asrs	r6, r5, #16
    4738:	0c3f      	lsrs	r7, r7, #16
    473a:	19f6      	adds	r6, r6, r7
    473c:	1431      	asrs	r1, r6, #16
    473e:	b2ad      	uxth	r5, r5
    4740:	0436      	lsls	r6, r6, #16
    4742:	4335      	orrs	r5, r6
    4744:	c420      	stmia	r4!, {r5}
    4746:	e7ef      	b.n	4728 <__mdiff+0x9a>
    4748:	3d04      	subs	r5, #4
    474a:	682f      	ldr	r7, [r5, #0]
    474c:	2f00      	cmp	r7, #0
    474e:	d101      	bne.n	4754 <__mdiff+0xc6>
    4750:	3a01      	subs	r2, #1
    4752:	e7f9      	b.n	4748 <__mdiff+0xba>
    4754:	6102      	str	r2, [r0, #16]
    4756:	b005      	add	sp, #20
    4758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000475c <__d2b>:
    475c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    475e:	2101      	movs	r1, #1
    4760:	1c1d      	adds	r5, r3, #0
    4762:	1c14      	adds	r4, r2, #0
    4764:	f7ff fd63 	bl	422e <_Balloc>
    4768:	006f      	lsls	r7, r5, #1
    476a:	032b      	lsls	r3, r5, #12
    476c:	1c06      	adds	r6, r0, #0
    476e:	0b1b      	lsrs	r3, r3, #12
    4770:	0d7f      	lsrs	r7, r7, #21
    4772:	d002      	beq.n	477a <__d2b+0x1e>
    4774:	2280      	movs	r2, #128	; 0x80
    4776:	0352      	lsls	r2, r2, #13
    4778:	4313      	orrs	r3, r2
    477a:	9301      	str	r3, [sp, #4]
    477c:	2c00      	cmp	r4, #0
    477e:	d019      	beq.n	47b4 <__d2b+0x58>
    4780:	4668      	mov	r0, sp
    4782:	9400      	str	r4, [sp, #0]
    4784:	f7ff fdfe 	bl	4384 <__lo0bits>
    4788:	9a00      	ldr	r2, [sp, #0]
    478a:	2800      	cmp	r0, #0
    478c:	d009      	beq.n	47a2 <__d2b+0x46>
    478e:	9b01      	ldr	r3, [sp, #4]
    4790:	2120      	movs	r1, #32
    4792:	1c1c      	adds	r4, r3, #0
    4794:	1a09      	subs	r1, r1, r0
    4796:	408c      	lsls	r4, r1
    4798:	4322      	orrs	r2, r4
    479a:	40c3      	lsrs	r3, r0
    479c:	6172      	str	r2, [r6, #20]
    479e:	9301      	str	r3, [sp, #4]
    47a0:	e000      	b.n	47a4 <__d2b+0x48>
    47a2:	6172      	str	r2, [r6, #20]
    47a4:	9c01      	ldr	r4, [sp, #4]
    47a6:	61b4      	str	r4, [r6, #24]
    47a8:	4263      	negs	r3, r4
    47aa:	4163      	adcs	r3, r4
    47ac:	2402      	movs	r4, #2
    47ae:	1ae4      	subs	r4, r4, r3
    47b0:	6134      	str	r4, [r6, #16]
    47b2:	e007      	b.n	47c4 <__d2b+0x68>
    47b4:	a801      	add	r0, sp, #4
    47b6:	f7ff fde5 	bl	4384 <__lo0bits>
    47ba:	9901      	ldr	r1, [sp, #4]
    47bc:	2401      	movs	r4, #1
    47be:	6171      	str	r1, [r6, #20]
    47c0:	6134      	str	r4, [r6, #16]
    47c2:	3020      	adds	r0, #32
    47c4:	2f00      	cmp	r7, #0
    47c6:	d009      	beq.n	47dc <__d2b+0x80>
    47c8:	4a0d      	ldr	r2, [pc, #52]	; (4800 <__d2b+0xa4>)
    47ca:	9c08      	ldr	r4, [sp, #32]
    47cc:	18bf      	adds	r7, r7, r2
    47ce:	183f      	adds	r7, r7, r0
    47d0:	6027      	str	r7, [r4, #0]
    47d2:	2335      	movs	r3, #53	; 0x35
    47d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    47d6:	1a18      	subs	r0, r3, r0
    47d8:	6020      	str	r0, [r4, #0]
    47da:	e00e      	b.n	47fa <__d2b+0x9e>
    47dc:	4909      	ldr	r1, [pc, #36]	; (4804 <__d2b+0xa8>)
    47de:	9a08      	ldr	r2, [sp, #32]
    47e0:	1840      	adds	r0, r0, r1
    47e2:	4909      	ldr	r1, [pc, #36]	; (4808 <__d2b+0xac>)
    47e4:	6010      	str	r0, [r2, #0]
    47e6:	1863      	adds	r3, r4, r1
    47e8:	009b      	lsls	r3, r3, #2
    47ea:	18f3      	adds	r3, r6, r3
    47ec:	6958      	ldr	r0, [r3, #20]
    47ee:	f7ff fdad 	bl	434c <__hi0bits>
    47f2:	0164      	lsls	r4, r4, #5
    47f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    47f6:	1a24      	subs	r4, r4, r0
    47f8:	6014      	str	r4, [r2, #0]
    47fa:	1c30      	adds	r0, r6, #0
    47fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	fffffbcd 	.word	0xfffffbcd
    4804:	fffffbce 	.word	0xfffffbce
    4808:	3fffffff 	.word	0x3fffffff

0000480c <_calloc_r>:
    480c:	b538      	push	{r3, r4, r5, lr}
    480e:	1c15      	adds	r5, r2, #0
    4810:	434d      	muls	r5, r1
    4812:	1c29      	adds	r1, r5, #0
    4814:	f000 f850 	bl	48b8 <_malloc_r>
    4818:	1e04      	subs	r4, r0, #0
    481a:	d003      	beq.n	4824 <_calloc_r+0x18>
    481c:	2100      	movs	r1, #0
    481e:	1c2a      	adds	r2, r5, #0
    4820:	f7fd fdb5 	bl	238e <memset>
    4824:	1c20      	adds	r0, r4, #0
    4826:	bd38      	pop	{r3, r4, r5, pc}

00004828 <_free_r>:
    4828:	b530      	push	{r4, r5, lr}
    482a:	2900      	cmp	r1, #0
    482c:	d040      	beq.n	48b0 <_free_r+0x88>
    482e:	3904      	subs	r1, #4
    4830:	680b      	ldr	r3, [r1, #0]
    4832:	2b00      	cmp	r3, #0
    4834:	da00      	bge.n	4838 <_free_r+0x10>
    4836:	18c9      	adds	r1, r1, r3
    4838:	4a1e      	ldr	r2, [pc, #120]	; (48b4 <_free_r+0x8c>)
    483a:	6813      	ldr	r3, [r2, #0]
    483c:	1c14      	adds	r4, r2, #0
    483e:	2b00      	cmp	r3, #0
    4840:	d102      	bne.n	4848 <_free_r+0x20>
    4842:	604b      	str	r3, [r1, #4]
    4844:	6011      	str	r1, [r2, #0]
    4846:	e033      	b.n	48b0 <_free_r+0x88>
    4848:	4299      	cmp	r1, r3
    484a:	d20f      	bcs.n	486c <_free_r+0x44>
    484c:	6808      	ldr	r0, [r1, #0]
    484e:	180a      	adds	r2, r1, r0
    4850:	429a      	cmp	r2, r3
    4852:	d105      	bne.n	4860 <_free_r+0x38>
    4854:	6813      	ldr	r3, [r2, #0]
    4856:	6852      	ldr	r2, [r2, #4]
    4858:	18c0      	adds	r0, r0, r3
    485a:	6008      	str	r0, [r1, #0]
    485c:	604a      	str	r2, [r1, #4]
    485e:	e000      	b.n	4862 <_free_r+0x3a>
    4860:	604b      	str	r3, [r1, #4]
    4862:	6021      	str	r1, [r4, #0]
    4864:	e024      	b.n	48b0 <_free_r+0x88>
    4866:	428a      	cmp	r2, r1
    4868:	d803      	bhi.n	4872 <_free_r+0x4a>
    486a:	1c13      	adds	r3, r2, #0
    486c:	685a      	ldr	r2, [r3, #4]
    486e:	2a00      	cmp	r2, #0
    4870:	d1f9      	bne.n	4866 <_free_r+0x3e>
    4872:	681d      	ldr	r5, [r3, #0]
    4874:	195c      	adds	r4, r3, r5
    4876:	428c      	cmp	r4, r1
    4878:	d10b      	bne.n	4892 <_free_r+0x6a>
    487a:	6809      	ldr	r1, [r1, #0]
    487c:	1869      	adds	r1, r5, r1
    487e:	1858      	adds	r0, r3, r1
    4880:	6019      	str	r1, [r3, #0]
    4882:	4290      	cmp	r0, r2
    4884:	d114      	bne.n	48b0 <_free_r+0x88>
    4886:	6814      	ldr	r4, [r2, #0]
    4888:	6852      	ldr	r2, [r2, #4]
    488a:	1909      	adds	r1, r1, r4
    488c:	6019      	str	r1, [r3, #0]
    488e:	605a      	str	r2, [r3, #4]
    4890:	e00e      	b.n	48b0 <_free_r+0x88>
    4892:	428c      	cmp	r4, r1
    4894:	d902      	bls.n	489c <_free_r+0x74>
    4896:	230c      	movs	r3, #12
    4898:	6003      	str	r3, [r0, #0]
    489a:	e009      	b.n	48b0 <_free_r+0x88>
    489c:	6808      	ldr	r0, [r1, #0]
    489e:	180c      	adds	r4, r1, r0
    48a0:	4294      	cmp	r4, r2
    48a2:	d103      	bne.n	48ac <_free_r+0x84>
    48a4:	6814      	ldr	r4, [r2, #0]
    48a6:	6852      	ldr	r2, [r2, #4]
    48a8:	1900      	adds	r0, r0, r4
    48aa:	6008      	str	r0, [r1, #0]
    48ac:	604a      	str	r2, [r1, #4]
    48ae:	6059      	str	r1, [r3, #4]
    48b0:	bd30      	pop	{r4, r5, pc}
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	20000108 	.word	0x20000108

000048b8 <_malloc_r>:
    48b8:	b570      	push	{r4, r5, r6, lr}
    48ba:	2303      	movs	r3, #3
    48bc:	1ccd      	adds	r5, r1, #3
    48be:	439d      	bics	r5, r3
    48c0:	3508      	adds	r5, #8
    48c2:	1c06      	adds	r6, r0, #0
    48c4:	2d0c      	cmp	r5, #12
    48c6:	d201      	bcs.n	48cc <_malloc_r+0x14>
    48c8:	250c      	movs	r5, #12
    48ca:	e001      	b.n	48d0 <_malloc_r+0x18>
    48cc:	2d00      	cmp	r5, #0
    48ce:	db3f      	blt.n	4950 <_malloc_r+0x98>
    48d0:	428d      	cmp	r5, r1
    48d2:	d33d      	bcc.n	4950 <_malloc_r+0x98>
    48d4:	4b20      	ldr	r3, [pc, #128]	; (4958 <_malloc_r+0xa0>)
    48d6:	681c      	ldr	r4, [r3, #0]
    48d8:	1c1a      	adds	r2, r3, #0
    48da:	1c21      	adds	r1, r4, #0
    48dc:	2900      	cmp	r1, #0
    48de:	d013      	beq.n	4908 <_malloc_r+0x50>
    48e0:	6808      	ldr	r0, [r1, #0]
    48e2:	1b43      	subs	r3, r0, r5
    48e4:	d40d      	bmi.n	4902 <_malloc_r+0x4a>
    48e6:	2b0b      	cmp	r3, #11
    48e8:	d902      	bls.n	48f0 <_malloc_r+0x38>
    48ea:	600b      	str	r3, [r1, #0]
    48ec:	18cc      	adds	r4, r1, r3
    48ee:	e01e      	b.n	492e <_malloc_r+0x76>
    48f0:	428c      	cmp	r4, r1
    48f2:	d102      	bne.n	48fa <_malloc_r+0x42>
    48f4:	6863      	ldr	r3, [r4, #4]
    48f6:	6013      	str	r3, [r2, #0]
    48f8:	e01a      	b.n	4930 <_malloc_r+0x78>
    48fa:	6848      	ldr	r0, [r1, #4]
    48fc:	6060      	str	r0, [r4, #4]
    48fe:	1c0c      	adds	r4, r1, #0
    4900:	e016      	b.n	4930 <_malloc_r+0x78>
    4902:	1c0c      	adds	r4, r1, #0
    4904:	6849      	ldr	r1, [r1, #4]
    4906:	e7e9      	b.n	48dc <_malloc_r+0x24>
    4908:	4c14      	ldr	r4, [pc, #80]	; (495c <_malloc_r+0xa4>)
    490a:	6820      	ldr	r0, [r4, #0]
    490c:	2800      	cmp	r0, #0
    490e:	d103      	bne.n	4918 <_malloc_r+0x60>
    4910:	1c30      	adds	r0, r6, #0
    4912:	f000 f84f 	bl	49b4 <_sbrk_r>
    4916:	6020      	str	r0, [r4, #0]
    4918:	1c30      	adds	r0, r6, #0
    491a:	1c29      	adds	r1, r5, #0
    491c:	f000 f84a 	bl	49b4 <_sbrk_r>
    4920:	1c43      	adds	r3, r0, #1
    4922:	d015      	beq.n	4950 <_malloc_r+0x98>
    4924:	1cc4      	adds	r4, r0, #3
    4926:	2303      	movs	r3, #3
    4928:	439c      	bics	r4, r3
    492a:	4284      	cmp	r4, r0
    492c:	d10a      	bne.n	4944 <_malloc_r+0x8c>
    492e:	6025      	str	r5, [r4, #0]
    4930:	1c20      	adds	r0, r4, #0
    4932:	300b      	adds	r0, #11
    4934:	2207      	movs	r2, #7
    4936:	1d23      	adds	r3, r4, #4
    4938:	4390      	bics	r0, r2
    493a:	1ac3      	subs	r3, r0, r3
    493c:	d00b      	beq.n	4956 <_malloc_r+0x9e>
    493e:	425a      	negs	r2, r3
    4940:	50e2      	str	r2, [r4, r3]
    4942:	e008      	b.n	4956 <_malloc_r+0x9e>
    4944:	1a21      	subs	r1, r4, r0
    4946:	1c30      	adds	r0, r6, #0
    4948:	f000 f834 	bl	49b4 <_sbrk_r>
    494c:	3001      	adds	r0, #1
    494e:	d1ee      	bne.n	492e <_malloc_r+0x76>
    4950:	230c      	movs	r3, #12
    4952:	6033      	str	r3, [r6, #0]
    4954:	2000      	movs	r0, #0
    4956:	bd70      	pop	{r4, r5, r6, pc}
    4958:	20000108 	.word	0x20000108
    495c:	20000104 	.word	0x20000104

00004960 <__fpclassifyd>:
    4960:	b530      	push	{r4, r5, lr}
    4962:	1c0b      	adds	r3, r1, #0
    4964:	1c04      	adds	r4, r0, #0
    4966:	1c02      	adds	r2, r0, #0
    4968:	431c      	orrs	r4, r3
    496a:	2002      	movs	r0, #2
    496c:	2c00      	cmp	r4, #0
    496e:	d017      	beq.n	49a0 <__fpclassifyd+0x40>
    4970:	2480      	movs	r4, #128	; 0x80
    4972:	0624      	lsls	r4, r4, #24
    4974:	42a3      	cmp	r3, r4
    4976:	d101      	bne.n	497c <__fpclassifyd+0x1c>
    4978:	2a00      	cmp	r2, #0
    497a:	d011      	beq.n	49a0 <__fpclassifyd+0x40>
    497c:	4809      	ldr	r0, [pc, #36]	; (49a4 <__fpclassifyd+0x44>)
    497e:	0059      	lsls	r1, r3, #1
    4980:	0849      	lsrs	r1, r1, #1
    4982:	4c09      	ldr	r4, [pc, #36]	; (49a8 <__fpclassifyd+0x48>)
    4984:	180d      	adds	r5, r1, r0
    4986:	2004      	movs	r0, #4
    4988:	42a5      	cmp	r5, r4
    498a:	d909      	bls.n	49a0 <__fpclassifyd+0x40>
    498c:	4c07      	ldr	r4, [pc, #28]	; (49ac <__fpclassifyd+0x4c>)
    498e:	2003      	movs	r0, #3
    4990:	42a1      	cmp	r1, r4
    4992:	d905      	bls.n	49a0 <__fpclassifyd+0x40>
    4994:	4c06      	ldr	r4, [pc, #24]	; (49b0 <__fpclassifyd+0x50>)
    4996:	2000      	movs	r0, #0
    4998:	42a1      	cmp	r1, r4
    499a:	d101      	bne.n	49a0 <__fpclassifyd+0x40>
    499c:	4250      	negs	r0, r2
    499e:	4150      	adcs	r0, r2
    49a0:	bd30      	pop	{r4, r5, pc}
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	fff00000 	.word	0xfff00000
    49a8:	7fdfffff 	.word	0x7fdfffff
    49ac:	000fffff 	.word	0x000fffff
    49b0:	7ff00000 	.word	0x7ff00000

000049b4 <_sbrk_r>:
    49b4:	b538      	push	{r3, r4, r5, lr}
    49b6:	4c07      	ldr	r4, [pc, #28]	; (49d4 <_sbrk_r+0x20>)
    49b8:	2300      	movs	r3, #0
    49ba:	1c05      	adds	r5, r0, #0
    49bc:	1c08      	adds	r0, r1, #0
    49be:	6023      	str	r3, [r4, #0]
    49c0:	f7fd faae 	bl	1f20 <_sbrk>
    49c4:	1c43      	adds	r3, r0, #1
    49c6:	d103      	bne.n	49d0 <_sbrk_r+0x1c>
    49c8:	6823      	ldr	r3, [r4, #0]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d000      	beq.n	49d0 <_sbrk_r+0x1c>
    49ce:	602b      	str	r3, [r5, #0]
    49d0:	bd38      	pop	{r3, r4, r5, pc}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	200001cc 	.word	0x200001cc

000049d8 <__sread>:
    49d8:	b538      	push	{r3, r4, r5, lr}
    49da:	1c0c      	adds	r4, r1, #0
    49dc:	250e      	movs	r5, #14
    49de:	5f49      	ldrsh	r1, [r1, r5]
    49e0:	f000 f8ac 	bl	4b3c <_read_r>
    49e4:	2800      	cmp	r0, #0
    49e6:	db03      	blt.n	49f0 <__sread+0x18>
    49e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    49ea:	1813      	adds	r3, r2, r0
    49ec:	6563      	str	r3, [r4, #84]	; 0x54
    49ee:	e003      	b.n	49f8 <__sread+0x20>
    49f0:	89a2      	ldrh	r2, [r4, #12]
    49f2:	4b02      	ldr	r3, [pc, #8]	; (49fc <__sread+0x24>)
    49f4:	4013      	ands	r3, r2
    49f6:	81a3      	strh	r3, [r4, #12]
    49f8:	bd38      	pop	{r3, r4, r5, pc}
    49fa:	46c0      	nop			; (mov r8, r8)
    49fc:	ffffefff 	.word	0xffffefff

00004a00 <__swrite>:
    4a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a02:	1c1e      	adds	r6, r3, #0
    4a04:	898b      	ldrh	r3, [r1, #12]
    4a06:	1c05      	adds	r5, r0, #0
    4a08:	1c0c      	adds	r4, r1, #0
    4a0a:	1c17      	adds	r7, r2, #0
    4a0c:	05da      	lsls	r2, r3, #23
    4a0e:	d505      	bpl.n	4a1c <__swrite+0x1c>
    4a10:	230e      	movs	r3, #14
    4a12:	5ec9      	ldrsh	r1, [r1, r3]
    4a14:	2200      	movs	r2, #0
    4a16:	2302      	movs	r3, #2
    4a18:	f000 f87c 	bl	4b14 <_lseek_r>
    4a1c:	89a2      	ldrh	r2, [r4, #12]
    4a1e:	4b05      	ldr	r3, [pc, #20]	; (4a34 <__swrite+0x34>)
    4a20:	1c28      	adds	r0, r5, #0
    4a22:	4013      	ands	r3, r2
    4a24:	81a3      	strh	r3, [r4, #12]
    4a26:	220e      	movs	r2, #14
    4a28:	5ea1      	ldrsh	r1, [r4, r2]
    4a2a:	1c33      	adds	r3, r6, #0
    4a2c:	1c3a      	adds	r2, r7, #0
    4a2e:	f000 f827 	bl	4a80 <_write_r>
    4a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a34:	ffffefff 	.word	0xffffefff

00004a38 <__sseek>:
    4a38:	b538      	push	{r3, r4, r5, lr}
    4a3a:	1c0c      	adds	r4, r1, #0
    4a3c:	250e      	movs	r5, #14
    4a3e:	5f49      	ldrsh	r1, [r1, r5]
    4a40:	f000 f868 	bl	4b14 <_lseek_r>
    4a44:	89a3      	ldrh	r3, [r4, #12]
    4a46:	1c42      	adds	r2, r0, #1
    4a48:	d103      	bne.n	4a52 <__sseek+0x1a>
    4a4a:	4a05      	ldr	r2, [pc, #20]	; (4a60 <__sseek+0x28>)
    4a4c:	4013      	ands	r3, r2
    4a4e:	81a3      	strh	r3, [r4, #12]
    4a50:	e004      	b.n	4a5c <__sseek+0x24>
    4a52:	2280      	movs	r2, #128	; 0x80
    4a54:	0152      	lsls	r2, r2, #5
    4a56:	4313      	orrs	r3, r2
    4a58:	81a3      	strh	r3, [r4, #12]
    4a5a:	6560      	str	r0, [r4, #84]	; 0x54
    4a5c:	bd38      	pop	{r3, r4, r5, pc}
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	ffffefff 	.word	0xffffefff

00004a64 <__sclose>:
    4a64:	b508      	push	{r3, lr}
    4a66:	230e      	movs	r3, #14
    4a68:	5ec9      	ldrsh	r1, [r1, r3]
    4a6a:	f000 f81d 	bl	4aa8 <_close_r>
    4a6e:	bd08      	pop	{r3, pc}

00004a70 <strlen>:
    4a70:	2300      	movs	r3, #0
    4a72:	5cc2      	ldrb	r2, [r0, r3]
    4a74:	3301      	adds	r3, #1
    4a76:	2a00      	cmp	r2, #0
    4a78:	d1fb      	bne.n	4a72 <strlen+0x2>
    4a7a:	1e58      	subs	r0, r3, #1
    4a7c:	4770      	bx	lr
	...

00004a80 <_write_r>:
    4a80:	b538      	push	{r3, r4, r5, lr}
    4a82:	4c08      	ldr	r4, [pc, #32]	; (4aa4 <_write_r+0x24>)
    4a84:	1c05      	adds	r5, r0, #0
    4a86:	2000      	movs	r0, #0
    4a88:	6020      	str	r0, [r4, #0]
    4a8a:	1c08      	adds	r0, r1, #0
    4a8c:	1c11      	adds	r1, r2, #0
    4a8e:	1c1a      	adds	r2, r3, #0
    4a90:	f7fd fa1c 	bl	1ecc <_write>
    4a94:	1c43      	adds	r3, r0, #1
    4a96:	d103      	bne.n	4aa0 <_write_r+0x20>
    4a98:	6823      	ldr	r3, [r4, #0]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d000      	beq.n	4aa0 <_write_r+0x20>
    4a9e:	602b      	str	r3, [r5, #0]
    4aa0:	bd38      	pop	{r3, r4, r5, pc}
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	200001cc 	.word	0x200001cc

00004aa8 <_close_r>:
    4aa8:	b538      	push	{r3, r4, r5, lr}
    4aaa:	4c07      	ldr	r4, [pc, #28]	; (4ac8 <_close_r+0x20>)
    4aac:	2300      	movs	r3, #0
    4aae:	1c05      	adds	r5, r0, #0
    4ab0:	1c08      	adds	r0, r1, #0
    4ab2:	6023      	str	r3, [r4, #0]
    4ab4:	f7fd fa46 	bl	1f44 <_close>
    4ab8:	1c43      	adds	r3, r0, #1
    4aba:	d103      	bne.n	4ac4 <_close_r+0x1c>
    4abc:	6823      	ldr	r3, [r4, #0]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d000      	beq.n	4ac4 <_close_r+0x1c>
    4ac2:	602b      	str	r3, [r5, #0]
    4ac4:	bd38      	pop	{r3, r4, r5, pc}
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	200001cc 	.word	0x200001cc

00004acc <_fstat_r>:
    4acc:	b538      	push	{r3, r4, r5, lr}
    4ace:	4c07      	ldr	r4, [pc, #28]	; (4aec <_fstat_r+0x20>)
    4ad0:	2300      	movs	r3, #0
    4ad2:	1c05      	adds	r5, r0, #0
    4ad4:	1c08      	adds	r0, r1, #0
    4ad6:	1c11      	adds	r1, r2, #0
    4ad8:	6023      	str	r3, [r4, #0]
    4ada:	f7fd fa37 	bl	1f4c <_fstat>
    4ade:	1c43      	adds	r3, r0, #1
    4ae0:	d103      	bne.n	4aea <_fstat_r+0x1e>
    4ae2:	6823      	ldr	r3, [r4, #0]
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d000      	beq.n	4aea <_fstat_r+0x1e>
    4ae8:	602b      	str	r3, [r5, #0]
    4aea:	bd38      	pop	{r3, r4, r5, pc}
    4aec:	200001cc 	.word	0x200001cc

00004af0 <_isatty_r>:
    4af0:	b538      	push	{r3, r4, r5, lr}
    4af2:	4c07      	ldr	r4, [pc, #28]	; (4b10 <_isatty_r+0x20>)
    4af4:	2300      	movs	r3, #0
    4af6:	1c05      	adds	r5, r0, #0
    4af8:	1c08      	adds	r0, r1, #0
    4afa:	6023      	str	r3, [r4, #0]
    4afc:	f7fd fa2c 	bl	1f58 <_isatty>
    4b00:	1c43      	adds	r3, r0, #1
    4b02:	d103      	bne.n	4b0c <_isatty_r+0x1c>
    4b04:	6823      	ldr	r3, [r4, #0]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d000      	beq.n	4b0c <_isatty_r+0x1c>
    4b0a:	602b      	str	r3, [r5, #0]
    4b0c:	bd38      	pop	{r3, r4, r5, pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	200001cc 	.word	0x200001cc

00004b14 <_lseek_r>:
    4b14:	b538      	push	{r3, r4, r5, lr}
    4b16:	4c08      	ldr	r4, [pc, #32]	; (4b38 <_lseek_r+0x24>)
    4b18:	1c05      	adds	r5, r0, #0
    4b1a:	2000      	movs	r0, #0
    4b1c:	6020      	str	r0, [r4, #0]
    4b1e:	1c08      	adds	r0, r1, #0
    4b20:	1c11      	adds	r1, r2, #0
    4b22:	1c1a      	adds	r2, r3, #0
    4b24:	f7fd fa1a 	bl	1f5c <_lseek>
    4b28:	1c43      	adds	r3, r0, #1
    4b2a:	d103      	bne.n	4b34 <_lseek_r+0x20>
    4b2c:	6823      	ldr	r3, [r4, #0]
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d000      	beq.n	4b34 <_lseek_r+0x20>
    4b32:	602b      	str	r3, [r5, #0]
    4b34:	bd38      	pop	{r3, r4, r5, pc}
    4b36:	46c0      	nop			; (mov r8, r8)
    4b38:	200001cc 	.word	0x200001cc

00004b3c <_read_r>:
    4b3c:	b538      	push	{r3, r4, r5, lr}
    4b3e:	4c08      	ldr	r4, [pc, #32]	; (4b60 <_read_r+0x24>)
    4b40:	1c05      	adds	r5, r0, #0
    4b42:	2000      	movs	r0, #0
    4b44:	6020      	str	r0, [r4, #0]
    4b46:	1c08      	adds	r0, r1, #0
    4b48:	1c11      	adds	r1, r2, #0
    4b4a:	1c1a      	adds	r2, r3, #0
    4b4c:	f7fd f99c 	bl	1e88 <_read>
    4b50:	1c43      	adds	r3, r0, #1
    4b52:	d103      	bne.n	4b5c <_read_r+0x20>
    4b54:	6823      	ldr	r3, [r4, #0]
    4b56:	2b00      	cmp	r3, #0
    4b58:	d000      	beq.n	4b5c <_read_r+0x20>
    4b5a:	602b      	str	r3, [r5, #0]
    4b5c:	bd38      	pop	{r3, r4, r5, pc}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	200001cc 	.word	0x200001cc

00004b64 <__gnu_thumb1_case_uqi>:
    4b64:	b402      	push	{r1}
    4b66:	4671      	mov	r1, lr
    4b68:	0849      	lsrs	r1, r1, #1
    4b6a:	0049      	lsls	r1, r1, #1
    4b6c:	5c09      	ldrb	r1, [r1, r0]
    4b6e:	0049      	lsls	r1, r1, #1
    4b70:	448e      	add	lr, r1
    4b72:	bc02      	pop	{r1}
    4b74:	4770      	bx	lr
    4b76:	46c0      	nop			; (mov r8, r8)

00004b78 <__aeabi_uidiv>:
    4b78:	2900      	cmp	r1, #0
    4b7a:	d034      	beq.n	4be6 <.udivsi3_skip_div0_test+0x6a>

00004b7c <.udivsi3_skip_div0_test>:
    4b7c:	2301      	movs	r3, #1
    4b7e:	2200      	movs	r2, #0
    4b80:	b410      	push	{r4}
    4b82:	4288      	cmp	r0, r1
    4b84:	d32c      	bcc.n	4be0 <.udivsi3_skip_div0_test+0x64>
    4b86:	2401      	movs	r4, #1
    4b88:	0724      	lsls	r4, r4, #28
    4b8a:	42a1      	cmp	r1, r4
    4b8c:	d204      	bcs.n	4b98 <.udivsi3_skip_div0_test+0x1c>
    4b8e:	4281      	cmp	r1, r0
    4b90:	d202      	bcs.n	4b98 <.udivsi3_skip_div0_test+0x1c>
    4b92:	0109      	lsls	r1, r1, #4
    4b94:	011b      	lsls	r3, r3, #4
    4b96:	e7f8      	b.n	4b8a <.udivsi3_skip_div0_test+0xe>
    4b98:	00e4      	lsls	r4, r4, #3
    4b9a:	42a1      	cmp	r1, r4
    4b9c:	d204      	bcs.n	4ba8 <.udivsi3_skip_div0_test+0x2c>
    4b9e:	4281      	cmp	r1, r0
    4ba0:	d202      	bcs.n	4ba8 <.udivsi3_skip_div0_test+0x2c>
    4ba2:	0049      	lsls	r1, r1, #1
    4ba4:	005b      	lsls	r3, r3, #1
    4ba6:	e7f8      	b.n	4b9a <.udivsi3_skip_div0_test+0x1e>
    4ba8:	4288      	cmp	r0, r1
    4baa:	d301      	bcc.n	4bb0 <.udivsi3_skip_div0_test+0x34>
    4bac:	1a40      	subs	r0, r0, r1
    4bae:	431a      	orrs	r2, r3
    4bb0:	084c      	lsrs	r4, r1, #1
    4bb2:	42a0      	cmp	r0, r4
    4bb4:	d302      	bcc.n	4bbc <.udivsi3_skip_div0_test+0x40>
    4bb6:	1b00      	subs	r0, r0, r4
    4bb8:	085c      	lsrs	r4, r3, #1
    4bba:	4322      	orrs	r2, r4
    4bbc:	088c      	lsrs	r4, r1, #2
    4bbe:	42a0      	cmp	r0, r4
    4bc0:	d302      	bcc.n	4bc8 <.udivsi3_skip_div0_test+0x4c>
    4bc2:	1b00      	subs	r0, r0, r4
    4bc4:	089c      	lsrs	r4, r3, #2
    4bc6:	4322      	orrs	r2, r4
    4bc8:	08cc      	lsrs	r4, r1, #3
    4bca:	42a0      	cmp	r0, r4
    4bcc:	d302      	bcc.n	4bd4 <.udivsi3_skip_div0_test+0x58>
    4bce:	1b00      	subs	r0, r0, r4
    4bd0:	08dc      	lsrs	r4, r3, #3
    4bd2:	4322      	orrs	r2, r4
    4bd4:	2800      	cmp	r0, #0
    4bd6:	d003      	beq.n	4be0 <.udivsi3_skip_div0_test+0x64>
    4bd8:	091b      	lsrs	r3, r3, #4
    4bda:	d001      	beq.n	4be0 <.udivsi3_skip_div0_test+0x64>
    4bdc:	0909      	lsrs	r1, r1, #4
    4bde:	e7e3      	b.n	4ba8 <.udivsi3_skip_div0_test+0x2c>
    4be0:	1c10      	adds	r0, r2, #0
    4be2:	bc10      	pop	{r4}
    4be4:	4770      	bx	lr
    4be6:	2800      	cmp	r0, #0
    4be8:	d001      	beq.n	4bee <.udivsi3_skip_div0_test+0x72>
    4bea:	2000      	movs	r0, #0
    4bec:	43c0      	mvns	r0, r0
    4bee:	b407      	push	{r0, r1, r2}
    4bf0:	4802      	ldr	r0, [pc, #8]	; (4bfc <.udivsi3_skip_div0_test+0x80>)
    4bf2:	a102      	add	r1, pc, #8	; (adr r1, 4bfc <.udivsi3_skip_div0_test+0x80>)
    4bf4:	1840      	adds	r0, r0, r1
    4bf6:	9002      	str	r0, [sp, #8]
    4bf8:	bd03      	pop	{r0, r1, pc}
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	000000d9 	.word	0x000000d9

00004c00 <__aeabi_uidivmod>:
    4c00:	2900      	cmp	r1, #0
    4c02:	d0f0      	beq.n	4be6 <.udivsi3_skip_div0_test+0x6a>
    4c04:	b503      	push	{r0, r1, lr}
    4c06:	f7ff ffb9 	bl	4b7c <.udivsi3_skip_div0_test>
    4c0a:	bc0e      	pop	{r1, r2, r3}
    4c0c:	4342      	muls	r2, r0
    4c0e:	1a89      	subs	r1, r1, r2
    4c10:	4718      	bx	r3
    4c12:	46c0      	nop			; (mov r8, r8)

00004c14 <__aeabi_idiv>:
    4c14:	2900      	cmp	r1, #0
    4c16:	d041      	beq.n	4c9c <.divsi3_skip_div0_test+0x84>

00004c18 <.divsi3_skip_div0_test>:
    4c18:	b410      	push	{r4}
    4c1a:	1c04      	adds	r4, r0, #0
    4c1c:	404c      	eors	r4, r1
    4c1e:	46a4      	mov	ip, r4
    4c20:	2301      	movs	r3, #1
    4c22:	2200      	movs	r2, #0
    4c24:	2900      	cmp	r1, #0
    4c26:	d500      	bpl.n	4c2a <.divsi3_skip_div0_test+0x12>
    4c28:	4249      	negs	r1, r1
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d500      	bpl.n	4c30 <.divsi3_skip_div0_test+0x18>
    4c2e:	4240      	negs	r0, r0
    4c30:	4288      	cmp	r0, r1
    4c32:	d32c      	bcc.n	4c8e <.divsi3_skip_div0_test+0x76>
    4c34:	2401      	movs	r4, #1
    4c36:	0724      	lsls	r4, r4, #28
    4c38:	42a1      	cmp	r1, r4
    4c3a:	d204      	bcs.n	4c46 <.divsi3_skip_div0_test+0x2e>
    4c3c:	4281      	cmp	r1, r0
    4c3e:	d202      	bcs.n	4c46 <.divsi3_skip_div0_test+0x2e>
    4c40:	0109      	lsls	r1, r1, #4
    4c42:	011b      	lsls	r3, r3, #4
    4c44:	e7f8      	b.n	4c38 <.divsi3_skip_div0_test+0x20>
    4c46:	00e4      	lsls	r4, r4, #3
    4c48:	42a1      	cmp	r1, r4
    4c4a:	d204      	bcs.n	4c56 <.divsi3_skip_div0_test+0x3e>
    4c4c:	4281      	cmp	r1, r0
    4c4e:	d202      	bcs.n	4c56 <.divsi3_skip_div0_test+0x3e>
    4c50:	0049      	lsls	r1, r1, #1
    4c52:	005b      	lsls	r3, r3, #1
    4c54:	e7f8      	b.n	4c48 <.divsi3_skip_div0_test+0x30>
    4c56:	4288      	cmp	r0, r1
    4c58:	d301      	bcc.n	4c5e <.divsi3_skip_div0_test+0x46>
    4c5a:	1a40      	subs	r0, r0, r1
    4c5c:	431a      	orrs	r2, r3
    4c5e:	084c      	lsrs	r4, r1, #1
    4c60:	42a0      	cmp	r0, r4
    4c62:	d302      	bcc.n	4c6a <.divsi3_skip_div0_test+0x52>
    4c64:	1b00      	subs	r0, r0, r4
    4c66:	085c      	lsrs	r4, r3, #1
    4c68:	4322      	orrs	r2, r4
    4c6a:	088c      	lsrs	r4, r1, #2
    4c6c:	42a0      	cmp	r0, r4
    4c6e:	d302      	bcc.n	4c76 <.divsi3_skip_div0_test+0x5e>
    4c70:	1b00      	subs	r0, r0, r4
    4c72:	089c      	lsrs	r4, r3, #2
    4c74:	4322      	orrs	r2, r4
    4c76:	08cc      	lsrs	r4, r1, #3
    4c78:	42a0      	cmp	r0, r4
    4c7a:	d302      	bcc.n	4c82 <.divsi3_skip_div0_test+0x6a>
    4c7c:	1b00      	subs	r0, r0, r4
    4c7e:	08dc      	lsrs	r4, r3, #3
    4c80:	4322      	orrs	r2, r4
    4c82:	2800      	cmp	r0, #0
    4c84:	d003      	beq.n	4c8e <.divsi3_skip_div0_test+0x76>
    4c86:	091b      	lsrs	r3, r3, #4
    4c88:	d001      	beq.n	4c8e <.divsi3_skip_div0_test+0x76>
    4c8a:	0909      	lsrs	r1, r1, #4
    4c8c:	e7e3      	b.n	4c56 <.divsi3_skip_div0_test+0x3e>
    4c8e:	1c10      	adds	r0, r2, #0
    4c90:	4664      	mov	r4, ip
    4c92:	2c00      	cmp	r4, #0
    4c94:	d500      	bpl.n	4c98 <.divsi3_skip_div0_test+0x80>
    4c96:	4240      	negs	r0, r0
    4c98:	bc10      	pop	{r4}
    4c9a:	4770      	bx	lr
    4c9c:	2800      	cmp	r0, #0
    4c9e:	d006      	beq.n	4cae <.divsi3_skip_div0_test+0x96>
    4ca0:	db03      	blt.n	4caa <.divsi3_skip_div0_test+0x92>
    4ca2:	2000      	movs	r0, #0
    4ca4:	43c0      	mvns	r0, r0
    4ca6:	0840      	lsrs	r0, r0, #1
    4ca8:	e001      	b.n	4cae <.divsi3_skip_div0_test+0x96>
    4caa:	2080      	movs	r0, #128	; 0x80
    4cac:	0600      	lsls	r0, r0, #24
    4cae:	b407      	push	{r0, r1, r2}
    4cb0:	4802      	ldr	r0, [pc, #8]	; (4cbc <.divsi3_skip_div0_test+0xa4>)
    4cb2:	a102      	add	r1, pc, #8	; (adr r1, 4cbc <.divsi3_skip_div0_test+0xa4>)
    4cb4:	1840      	adds	r0, r0, r1
    4cb6:	9002      	str	r0, [sp, #8]
    4cb8:	bd03      	pop	{r0, r1, pc}
    4cba:	46c0      	nop			; (mov r8, r8)
    4cbc:	00000019 	.word	0x00000019

00004cc0 <__aeabi_idivmod>:
    4cc0:	2900      	cmp	r1, #0
    4cc2:	d0eb      	beq.n	4c9c <.divsi3_skip_div0_test+0x84>
    4cc4:	b503      	push	{r0, r1, lr}
    4cc6:	f7ff ffa7 	bl	4c18 <.divsi3_skip_div0_test>
    4cca:	bc0e      	pop	{r1, r2, r3}
    4ccc:	4342      	muls	r2, r0
    4cce:	1a89      	subs	r1, r1, r2
    4cd0:	4718      	bx	r3
    4cd2:	46c0      	nop			; (mov r8, r8)

00004cd4 <__aeabi_idiv0>:
    4cd4:	4770      	bx	lr
    4cd6:	46c0      	nop			; (mov r8, r8)

00004cd8 <__aeabi_cdrcmple>:
    4cd8:	4684      	mov	ip, r0
    4cda:	1c10      	adds	r0, r2, #0
    4cdc:	4662      	mov	r2, ip
    4cde:	468c      	mov	ip, r1
    4ce0:	1c19      	adds	r1, r3, #0
    4ce2:	4663      	mov	r3, ip
    4ce4:	e000      	b.n	4ce8 <__aeabi_cdcmpeq>
    4ce6:	46c0      	nop			; (mov r8, r8)

00004ce8 <__aeabi_cdcmpeq>:
    4ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4cea:	f001 f8d9 	bl	5ea0 <__ledf2>
    4cee:	2800      	cmp	r0, #0
    4cf0:	d401      	bmi.n	4cf6 <__aeabi_cdcmpeq+0xe>
    4cf2:	2100      	movs	r1, #0
    4cf4:	42c8      	cmn	r0, r1
    4cf6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004cf8 <__aeabi_dcmpeq>:
    4cf8:	b510      	push	{r4, lr}
    4cfa:	f001 f809 	bl	5d10 <__eqdf2>
    4cfe:	4240      	negs	r0, r0
    4d00:	3001      	adds	r0, #1
    4d02:	bd10      	pop	{r4, pc}

00004d04 <__aeabi_dcmplt>:
    4d04:	b510      	push	{r4, lr}
    4d06:	f001 f8cb 	bl	5ea0 <__ledf2>
    4d0a:	2800      	cmp	r0, #0
    4d0c:	db01      	blt.n	4d12 <__aeabi_dcmplt+0xe>
    4d0e:	2000      	movs	r0, #0
    4d10:	bd10      	pop	{r4, pc}
    4d12:	2001      	movs	r0, #1
    4d14:	bd10      	pop	{r4, pc}
    4d16:	46c0      	nop			; (mov r8, r8)

00004d18 <__aeabi_dcmple>:
    4d18:	b510      	push	{r4, lr}
    4d1a:	f001 f8c1 	bl	5ea0 <__ledf2>
    4d1e:	2800      	cmp	r0, #0
    4d20:	dd01      	ble.n	4d26 <__aeabi_dcmple+0xe>
    4d22:	2000      	movs	r0, #0
    4d24:	bd10      	pop	{r4, pc}
    4d26:	2001      	movs	r0, #1
    4d28:	bd10      	pop	{r4, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)

00004d2c <__aeabi_dcmpgt>:
    4d2c:	b510      	push	{r4, lr}
    4d2e:	f001 f839 	bl	5da4 <__gedf2>
    4d32:	2800      	cmp	r0, #0
    4d34:	dc01      	bgt.n	4d3a <__aeabi_dcmpgt+0xe>
    4d36:	2000      	movs	r0, #0
    4d38:	bd10      	pop	{r4, pc}
    4d3a:	2001      	movs	r0, #1
    4d3c:	bd10      	pop	{r4, pc}
    4d3e:	46c0      	nop			; (mov r8, r8)

00004d40 <__aeabi_dcmpge>:
    4d40:	b510      	push	{r4, lr}
    4d42:	f001 f82f 	bl	5da4 <__gedf2>
    4d46:	2800      	cmp	r0, #0
    4d48:	da01      	bge.n	4d4e <__aeabi_dcmpge+0xe>
    4d4a:	2000      	movs	r0, #0
    4d4c:	bd10      	pop	{r4, pc}
    4d4e:	2001      	movs	r0, #1
    4d50:	bd10      	pop	{r4, pc}
    4d52:	46c0      	nop			; (mov r8, r8)

00004d54 <__aeabi_lmul>:
    4d54:	469c      	mov	ip, r3
    4d56:	0403      	lsls	r3, r0, #16
    4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d5a:	0c1b      	lsrs	r3, r3, #16
    4d5c:	0417      	lsls	r7, r2, #16
    4d5e:	0c3f      	lsrs	r7, r7, #16
    4d60:	0c15      	lsrs	r5, r2, #16
    4d62:	1c1e      	adds	r6, r3, #0
    4d64:	1c04      	adds	r4, r0, #0
    4d66:	0c00      	lsrs	r0, r0, #16
    4d68:	437e      	muls	r6, r7
    4d6a:	436b      	muls	r3, r5
    4d6c:	4347      	muls	r7, r0
    4d6e:	4345      	muls	r5, r0
    4d70:	18fb      	adds	r3, r7, r3
    4d72:	0c30      	lsrs	r0, r6, #16
    4d74:	1818      	adds	r0, r3, r0
    4d76:	4287      	cmp	r7, r0
    4d78:	d902      	bls.n	4d80 <__aeabi_lmul+0x2c>
    4d7a:	2380      	movs	r3, #128	; 0x80
    4d7c:	025b      	lsls	r3, r3, #9
    4d7e:	18ed      	adds	r5, r5, r3
    4d80:	0c03      	lsrs	r3, r0, #16
    4d82:	18ed      	adds	r5, r5, r3
    4d84:	4663      	mov	r3, ip
    4d86:	435c      	muls	r4, r3
    4d88:	434a      	muls	r2, r1
    4d8a:	0436      	lsls	r6, r6, #16
    4d8c:	0c36      	lsrs	r6, r6, #16
    4d8e:	18a1      	adds	r1, r4, r2
    4d90:	0400      	lsls	r0, r0, #16
    4d92:	1980      	adds	r0, r0, r6
    4d94:	1949      	adds	r1, r1, r5
    4d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d98 <__aeabi_fdiv>:
    4d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d9a:	465f      	mov	r7, fp
    4d9c:	4656      	mov	r6, sl
    4d9e:	464d      	mov	r5, r9
    4da0:	4644      	mov	r4, r8
    4da2:	b4f0      	push	{r4, r5, r6, r7}
    4da4:	0246      	lsls	r6, r0, #9
    4da6:	0045      	lsls	r5, r0, #1
    4da8:	0fc0      	lsrs	r0, r0, #31
    4daa:	b085      	sub	sp, #20
    4dac:	1c0f      	adds	r7, r1, #0
    4dae:	0a76      	lsrs	r6, r6, #9
    4db0:	0e2d      	lsrs	r5, r5, #24
    4db2:	4680      	mov	r8, r0
    4db4:	d041      	beq.n	4e3a <__aeabi_fdiv+0xa2>
    4db6:	2dff      	cmp	r5, #255	; 0xff
    4db8:	d026      	beq.n	4e08 <__aeabi_fdiv+0x70>
    4dba:	2480      	movs	r4, #128	; 0x80
    4dbc:	0424      	lsls	r4, r4, #16
    4dbe:	2100      	movs	r1, #0
    4dc0:	4326      	orrs	r6, r4
    4dc2:	00f6      	lsls	r6, r6, #3
    4dc4:	3d7f      	subs	r5, #127	; 0x7f
    4dc6:	4689      	mov	r9, r1
    4dc8:	468b      	mov	fp, r1
    4dca:	0ff9      	lsrs	r1, r7, #31
    4dcc:	027c      	lsls	r4, r7, #9
    4dce:	0078      	lsls	r0, r7, #1
    4dd0:	0a64      	lsrs	r4, r4, #9
    4dd2:	0e00      	lsrs	r0, r0, #24
    4dd4:	9100      	str	r1, [sp, #0]
    4dd6:	468a      	mov	sl, r1
    4dd8:	d03c      	beq.n	4e54 <__aeabi_fdiv+0xbc>
    4dda:	28ff      	cmp	r0, #255	; 0xff
    4ddc:	d034      	beq.n	4e48 <__aeabi_fdiv+0xb0>
    4dde:	2380      	movs	r3, #128	; 0x80
    4de0:	041b      	lsls	r3, r3, #16
    4de2:	431c      	orrs	r4, r3
    4de4:	2300      	movs	r3, #0
    4de6:	00e4      	lsls	r4, r4, #3
    4de8:	387f      	subs	r0, #127	; 0x7f
    4dea:	9301      	str	r3, [sp, #4]
    4dec:	9f00      	ldr	r7, [sp, #0]
    4dee:	4643      	mov	r3, r8
    4df0:	9a01      	ldr	r2, [sp, #4]
    4df2:	407b      	eors	r3, r7
    4df4:	4649      	mov	r1, r9
    4df6:	469c      	mov	ip, r3
    4df8:	4311      	orrs	r1, r2
    4dfa:	290f      	cmp	r1, #15
    4dfc:	d900      	bls.n	4e00 <__aeabi_fdiv+0x68>
    4dfe:	e071      	b.n	4ee4 <__aeabi_fdiv+0x14c>
    4e00:	4f76      	ldr	r7, [pc, #472]	; (4fdc <__aeabi_fdiv+0x244>)
    4e02:	0089      	lsls	r1, r1, #2
    4e04:	587f      	ldr	r7, [r7, r1]
    4e06:	46bf      	mov	pc, r7
    4e08:	2e00      	cmp	r6, #0
    4e0a:	d13e      	bne.n	4e8a <__aeabi_fdiv+0xf2>
    4e0c:	2208      	movs	r2, #8
    4e0e:	2302      	movs	r3, #2
    4e10:	4691      	mov	r9, r2
    4e12:	469b      	mov	fp, r3
    4e14:	e7d9      	b.n	4dca <__aeabi_fdiv+0x32>
    4e16:	465a      	mov	r2, fp
    4e18:	1c34      	adds	r4, r6, #0
    4e1a:	46c2      	mov	sl, r8
    4e1c:	9201      	str	r2, [sp, #4]
    4e1e:	9901      	ldr	r1, [sp, #4]
    4e20:	2902      	cmp	r1, #2
    4e22:	d037      	beq.n	4e94 <__aeabi_fdiv+0xfc>
    4e24:	2903      	cmp	r1, #3
    4e26:	d100      	bne.n	4e2a <__aeabi_fdiv+0x92>
    4e28:	e0cf      	b.n	4fca <__aeabi_fdiv+0x232>
    4e2a:	2901      	cmp	r1, #1
    4e2c:	d000      	beq.n	4e30 <__aeabi_fdiv+0x98>
    4e2e:	e0ab      	b.n	4f88 <__aeabi_fdiv+0x1f0>
    4e30:	4653      	mov	r3, sl
    4e32:	400b      	ands	r3, r1
    4e34:	2200      	movs	r2, #0
    4e36:	2600      	movs	r6, #0
    4e38:	e032      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4e3a:	2e00      	cmp	r6, #0
    4e3c:	d119      	bne.n	4e72 <__aeabi_fdiv+0xda>
    4e3e:	2104      	movs	r1, #4
    4e40:	2201      	movs	r2, #1
    4e42:	4689      	mov	r9, r1
    4e44:	4693      	mov	fp, r2
    4e46:	e7c0      	b.n	4dca <__aeabi_fdiv+0x32>
    4e48:	1c22      	adds	r2, r4, #0
    4e4a:	1e53      	subs	r3, r2, #1
    4e4c:	419a      	sbcs	r2, r3
    4e4e:	3202      	adds	r2, #2
    4e50:	9201      	str	r2, [sp, #4]
    4e52:	e7cb      	b.n	4dec <__aeabi_fdiv+0x54>
    4e54:	2701      	movs	r7, #1
    4e56:	9701      	str	r7, [sp, #4]
    4e58:	2c00      	cmp	r4, #0
    4e5a:	d0c7      	beq.n	4dec <__aeabi_fdiv+0x54>
    4e5c:	1c20      	adds	r0, r4, #0
    4e5e:	f001 ff59 	bl	6d14 <__clzsi2>
    4e62:	1f43      	subs	r3, r0, #5
    4e64:	409c      	lsls	r4, r3
    4e66:	2376      	movs	r3, #118	; 0x76
    4e68:	425b      	negs	r3, r3
    4e6a:	2100      	movs	r1, #0
    4e6c:	1a18      	subs	r0, r3, r0
    4e6e:	9101      	str	r1, [sp, #4]
    4e70:	e7bc      	b.n	4dec <__aeabi_fdiv+0x54>
    4e72:	1c30      	adds	r0, r6, #0
    4e74:	f001 ff4e 	bl	6d14 <__clzsi2>
    4e78:	2576      	movs	r5, #118	; 0x76
    4e7a:	1f43      	subs	r3, r0, #5
    4e7c:	409e      	lsls	r6, r3
    4e7e:	426d      	negs	r5, r5
    4e80:	2300      	movs	r3, #0
    4e82:	1a2d      	subs	r5, r5, r0
    4e84:	4699      	mov	r9, r3
    4e86:	469b      	mov	fp, r3
    4e88:	e79f      	b.n	4dca <__aeabi_fdiv+0x32>
    4e8a:	230c      	movs	r3, #12
    4e8c:	2103      	movs	r1, #3
    4e8e:	4699      	mov	r9, r3
    4e90:	468b      	mov	fp, r1
    4e92:	e79a      	b.n	4dca <__aeabi_fdiv+0x32>
    4e94:	46d4      	mov	ip, sl
    4e96:	2301      	movs	r3, #1
    4e98:	4667      	mov	r7, ip
    4e9a:	403b      	ands	r3, r7
    4e9c:	22ff      	movs	r2, #255	; 0xff
    4e9e:	2600      	movs	r6, #0
    4ea0:	0276      	lsls	r6, r6, #9
    4ea2:	05d2      	lsls	r2, r2, #23
    4ea4:	0a70      	lsrs	r0, r6, #9
    4ea6:	07db      	lsls	r3, r3, #31
    4ea8:	4310      	orrs	r0, r2
    4eaa:	4318      	orrs	r0, r3
    4eac:	b005      	add	sp, #20
    4eae:	bc3c      	pop	{r2, r3, r4, r5}
    4eb0:	4690      	mov	r8, r2
    4eb2:	4699      	mov	r9, r3
    4eb4:	46a2      	mov	sl, r4
    4eb6:	46ab      	mov	fp, r5
    4eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eba:	2680      	movs	r6, #128	; 0x80
    4ebc:	2300      	movs	r3, #0
    4ebe:	03f6      	lsls	r6, r6, #15
    4ec0:	22ff      	movs	r2, #255	; 0xff
    4ec2:	e7ed      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4ec4:	2200      	movs	r2, #0
    4ec6:	2600      	movs	r6, #0
    4ec8:	e7ea      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4eca:	2080      	movs	r0, #128	; 0x80
    4ecc:	03c0      	lsls	r0, r0, #15
    4ece:	4206      	tst	r6, r0
    4ed0:	d03b      	beq.n	4f4a <__aeabi_fdiv+0x1b2>
    4ed2:	4204      	tst	r4, r0
    4ed4:	d139      	bne.n	4f4a <__aeabi_fdiv+0x1b2>
    4ed6:	1c06      	adds	r6, r0, #0
    4ed8:	4326      	orrs	r6, r4
    4eda:	0276      	lsls	r6, r6, #9
    4edc:	0a76      	lsrs	r6, r6, #9
    4ede:	9b00      	ldr	r3, [sp, #0]
    4ee0:	22ff      	movs	r2, #255	; 0xff
    4ee2:	e7dd      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4ee4:	1a28      	subs	r0, r5, r0
    4ee6:	9003      	str	r0, [sp, #12]
    4ee8:	0176      	lsls	r6, r6, #5
    4eea:	0164      	lsls	r4, r4, #5
    4eec:	42a6      	cmp	r6, r4
    4eee:	d339      	bcc.n	4f64 <__aeabi_fdiv+0x1cc>
    4ef0:	1b36      	subs	r6, r6, r4
    4ef2:	221a      	movs	r2, #26
    4ef4:	2301      	movs	r3, #1
    4ef6:	2001      	movs	r0, #1
    4ef8:	1c31      	adds	r1, r6, #0
    4efa:	005b      	lsls	r3, r3, #1
    4efc:	0076      	lsls	r6, r6, #1
    4efe:	2900      	cmp	r1, #0
    4f00:	db01      	blt.n	4f06 <__aeabi_fdiv+0x16e>
    4f02:	42b4      	cmp	r4, r6
    4f04:	d801      	bhi.n	4f0a <__aeabi_fdiv+0x172>
    4f06:	1b36      	subs	r6, r6, r4
    4f08:	4303      	orrs	r3, r0
    4f0a:	3a01      	subs	r2, #1
    4f0c:	2a00      	cmp	r2, #0
    4f0e:	dcf3      	bgt.n	4ef8 <__aeabi_fdiv+0x160>
    4f10:	1e74      	subs	r4, r6, #1
    4f12:	41a6      	sbcs	r6, r4
    4f14:	1c34      	adds	r4, r6, #0
    4f16:	431c      	orrs	r4, r3
    4f18:	9a03      	ldr	r2, [sp, #12]
    4f1a:	327f      	adds	r2, #127	; 0x7f
    4f1c:	2a00      	cmp	r2, #0
    4f1e:	dd27      	ble.n	4f70 <__aeabi_fdiv+0x1d8>
    4f20:	0763      	lsls	r3, r4, #29
    4f22:	d004      	beq.n	4f2e <__aeabi_fdiv+0x196>
    4f24:	230f      	movs	r3, #15
    4f26:	4023      	ands	r3, r4
    4f28:	2b04      	cmp	r3, #4
    4f2a:	d000      	beq.n	4f2e <__aeabi_fdiv+0x196>
    4f2c:	3404      	adds	r4, #4
    4f2e:	0127      	lsls	r7, r4, #4
    4f30:	d503      	bpl.n	4f3a <__aeabi_fdiv+0x1a2>
    4f32:	4b2b      	ldr	r3, [pc, #172]	; (4fe0 <__aeabi_fdiv+0x248>)
    4f34:	9a03      	ldr	r2, [sp, #12]
    4f36:	401c      	ands	r4, r3
    4f38:	3280      	adds	r2, #128	; 0x80
    4f3a:	2afe      	cmp	r2, #254	; 0xfe
    4f3c:	dd0b      	ble.n	4f56 <__aeabi_fdiv+0x1be>
    4f3e:	2301      	movs	r3, #1
    4f40:	4661      	mov	r1, ip
    4f42:	400b      	ands	r3, r1
    4f44:	22ff      	movs	r2, #255	; 0xff
    4f46:	2600      	movs	r6, #0
    4f48:	e7aa      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4f4a:	4306      	orrs	r6, r0
    4f4c:	0276      	lsls	r6, r6, #9
    4f4e:	0a76      	lsrs	r6, r6, #9
    4f50:	4643      	mov	r3, r8
    4f52:	22ff      	movs	r2, #255	; 0xff
    4f54:	e7a4      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4f56:	01a4      	lsls	r4, r4, #6
    4f58:	2301      	movs	r3, #1
    4f5a:	4667      	mov	r7, ip
    4f5c:	0a66      	lsrs	r6, r4, #9
    4f5e:	b2d2      	uxtb	r2, r2
    4f60:	403b      	ands	r3, r7
    4f62:	e79d      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4f64:	9f03      	ldr	r7, [sp, #12]
    4f66:	221b      	movs	r2, #27
    4f68:	3f01      	subs	r7, #1
    4f6a:	9703      	str	r7, [sp, #12]
    4f6c:	2300      	movs	r3, #0
    4f6e:	e7c2      	b.n	4ef6 <__aeabi_fdiv+0x15e>
    4f70:	237e      	movs	r3, #126	; 0x7e
    4f72:	9f03      	ldr	r7, [sp, #12]
    4f74:	425b      	negs	r3, r3
    4f76:	1bdb      	subs	r3, r3, r7
    4f78:	2b1b      	cmp	r3, #27
    4f7a:	dd07      	ble.n	4f8c <__aeabi_fdiv+0x1f4>
    4f7c:	2301      	movs	r3, #1
    4f7e:	4661      	mov	r1, ip
    4f80:	400b      	ands	r3, r1
    4f82:	2200      	movs	r2, #0
    4f84:	2600      	movs	r6, #0
    4f86:	e78b      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4f88:	46d4      	mov	ip, sl
    4f8a:	e7c5      	b.n	4f18 <__aeabi_fdiv+0x180>
    4f8c:	1c22      	adds	r2, r4, #0
    4f8e:	40da      	lsrs	r2, r3
    4f90:	9b03      	ldr	r3, [sp, #12]
    4f92:	339e      	adds	r3, #158	; 0x9e
    4f94:	409c      	lsls	r4, r3
    4f96:	1c23      	adds	r3, r4, #0
    4f98:	1e5c      	subs	r4, r3, #1
    4f9a:	41a3      	sbcs	r3, r4
    4f9c:	4313      	orrs	r3, r2
    4f9e:	075a      	lsls	r2, r3, #29
    4fa0:	d004      	beq.n	4fac <__aeabi_fdiv+0x214>
    4fa2:	220f      	movs	r2, #15
    4fa4:	401a      	ands	r2, r3
    4fa6:	2a04      	cmp	r2, #4
    4fa8:	d000      	beq.n	4fac <__aeabi_fdiv+0x214>
    4faa:	3304      	adds	r3, #4
    4fac:	015f      	lsls	r7, r3, #5
    4fae:	d505      	bpl.n	4fbc <__aeabi_fdiv+0x224>
    4fb0:	2301      	movs	r3, #1
    4fb2:	4661      	mov	r1, ip
    4fb4:	400b      	ands	r3, r1
    4fb6:	2201      	movs	r2, #1
    4fb8:	2600      	movs	r6, #0
    4fba:	e771      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4fbc:	019e      	lsls	r6, r3, #6
    4fbe:	4662      	mov	r2, ip
    4fc0:	2301      	movs	r3, #1
    4fc2:	4013      	ands	r3, r2
    4fc4:	0a76      	lsrs	r6, r6, #9
    4fc6:	2200      	movs	r2, #0
    4fc8:	e76a      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4fca:	2680      	movs	r6, #128	; 0x80
    4fcc:	03f6      	lsls	r6, r6, #15
    4fce:	4326      	orrs	r6, r4
    4fd0:	0276      	lsls	r6, r6, #9
    4fd2:	0a76      	lsrs	r6, r6, #9
    4fd4:	4653      	mov	r3, sl
    4fd6:	22ff      	movs	r2, #255	; 0xff
    4fd8:	e762      	b.n	4ea0 <__aeabi_fdiv+0x108>
    4fda:	46c0      	nop			; (mov r8, r8)
    4fdc:	000070b4 	.word	0x000070b4
    4fe0:	f7ffffff 	.word	0xf7ffffff

00004fe4 <__aeabi_ui2f>:
    4fe4:	b510      	push	{r4, lr}
    4fe6:	1e04      	subs	r4, r0, #0
    4fe8:	d033      	beq.n	5052 <__aeabi_ui2f+0x6e>
    4fea:	f001 fe93 	bl	6d14 <__clzsi2>
    4fee:	239e      	movs	r3, #158	; 0x9e
    4ff0:	1a1b      	subs	r3, r3, r0
    4ff2:	2b96      	cmp	r3, #150	; 0x96
    4ff4:	dc09      	bgt.n	500a <__aeabi_ui2f+0x26>
    4ff6:	3808      	subs	r0, #8
    4ff8:	4084      	lsls	r4, r0
    4ffa:	0264      	lsls	r4, r4, #9
    4ffc:	0a64      	lsrs	r4, r4, #9
    4ffe:	b2db      	uxtb	r3, r3
    5000:	0264      	lsls	r4, r4, #9
    5002:	05db      	lsls	r3, r3, #23
    5004:	0a60      	lsrs	r0, r4, #9
    5006:	4318      	orrs	r0, r3
    5008:	bd10      	pop	{r4, pc}
    500a:	2b99      	cmp	r3, #153	; 0x99
    500c:	dd0a      	ble.n	5024 <__aeabi_ui2f+0x40>
    500e:	2205      	movs	r2, #5
    5010:	1a12      	subs	r2, r2, r0
    5012:	1c21      	adds	r1, r4, #0
    5014:	40d1      	lsrs	r1, r2
    5016:	1c0a      	adds	r2, r1, #0
    5018:	1c01      	adds	r1, r0, #0
    501a:	311b      	adds	r1, #27
    501c:	408c      	lsls	r4, r1
    501e:	1e61      	subs	r1, r4, #1
    5020:	418c      	sbcs	r4, r1
    5022:	4314      	orrs	r4, r2
    5024:	2805      	cmp	r0, #5
    5026:	dd01      	ble.n	502c <__aeabi_ui2f+0x48>
    5028:	1f42      	subs	r2, r0, #5
    502a:	4094      	lsls	r4, r2
    502c:	4a14      	ldr	r2, [pc, #80]	; (5080 <__aeabi_ui2f+0x9c>)
    502e:	4022      	ands	r2, r4
    5030:	0761      	lsls	r1, r4, #29
    5032:	d004      	beq.n	503e <__aeabi_ui2f+0x5a>
    5034:	210f      	movs	r1, #15
    5036:	400c      	ands	r4, r1
    5038:	2c04      	cmp	r4, #4
    503a:	d000      	beq.n	503e <__aeabi_ui2f+0x5a>
    503c:	3204      	adds	r2, #4
    503e:	0151      	lsls	r1, r2, #5
    5040:	d50a      	bpl.n	5058 <__aeabi_ui2f+0x74>
    5042:	239f      	movs	r3, #159	; 0x9f
    5044:	1a18      	subs	r0, r3, r0
    5046:	28ff      	cmp	r0, #255	; 0xff
    5048:	d016      	beq.n	5078 <__aeabi_ui2f+0x94>
    504a:	0194      	lsls	r4, r2, #6
    504c:	0a64      	lsrs	r4, r4, #9
    504e:	b2c3      	uxtb	r3, r0
    5050:	e7d6      	b.n	5000 <__aeabi_ui2f+0x1c>
    5052:	2300      	movs	r3, #0
    5054:	2400      	movs	r4, #0
    5056:	e7d3      	b.n	5000 <__aeabi_ui2f+0x1c>
    5058:	08d2      	lsrs	r2, r2, #3
    505a:	2bff      	cmp	r3, #255	; 0xff
    505c:	d003      	beq.n	5066 <__aeabi_ui2f+0x82>
    505e:	0254      	lsls	r4, r2, #9
    5060:	0a64      	lsrs	r4, r4, #9
    5062:	b2db      	uxtb	r3, r3
    5064:	e7cc      	b.n	5000 <__aeabi_ui2f+0x1c>
    5066:	2a00      	cmp	r2, #0
    5068:	d006      	beq.n	5078 <__aeabi_ui2f+0x94>
    506a:	2480      	movs	r4, #128	; 0x80
    506c:	03e4      	lsls	r4, r4, #15
    506e:	4314      	orrs	r4, r2
    5070:	0264      	lsls	r4, r4, #9
    5072:	0a64      	lsrs	r4, r4, #9
    5074:	23ff      	movs	r3, #255	; 0xff
    5076:	e7c3      	b.n	5000 <__aeabi_ui2f+0x1c>
    5078:	23ff      	movs	r3, #255	; 0xff
    507a:	2400      	movs	r4, #0
    507c:	e7c0      	b.n	5000 <__aeabi_ui2f+0x1c>
    507e:	46c0      	nop			; (mov r8, r8)
    5080:	fbffffff 	.word	0xfbffffff

00005084 <__aeabi_dadd>:
    5084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5086:	465f      	mov	r7, fp
    5088:	4656      	mov	r6, sl
    508a:	4644      	mov	r4, r8
    508c:	464d      	mov	r5, r9
    508e:	b4f0      	push	{r4, r5, r6, r7}
    5090:	030c      	lsls	r4, r1, #12
    5092:	004d      	lsls	r5, r1, #1
    5094:	0fce      	lsrs	r6, r1, #31
    5096:	0a61      	lsrs	r1, r4, #9
    5098:	0f44      	lsrs	r4, r0, #29
    509a:	4321      	orrs	r1, r4
    509c:	00c4      	lsls	r4, r0, #3
    509e:	0318      	lsls	r0, r3, #12
    50a0:	4680      	mov	r8, r0
    50a2:	0058      	lsls	r0, r3, #1
    50a4:	0d40      	lsrs	r0, r0, #21
    50a6:	4682      	mov	sl, r0
    50a8:	0fd8      	lsrs	r0, r3, #31
    50aa:	4684      	mov	ip, r0
    50ac:	4640      	mov	r0, r8
    50ae:	0a40      	lsrs	r0, r0, #9
    50b0:	0f53      	lsrs	r3, r2, #29
    50b2:	4303      	orrs	r3, r0
    50b4:	00d0      	lsls	r0, r2, #3
    50b6:	0d6d      	lsrs	r5, r5, #21
    50b8:	1c37      	adds	r7, r6, #0
    50ba:	4683      	mov	fp, r0
    50bc:	4652      	mov	r2, sl
    50be:	4566      	cmp	r6, ip
    50c0:	d100      	bne.n	50c4 <__aeabi_dadd+0x40>
    50c2:	e0a4      	b.n	520e <__aeabi_dadd+0x18a>
    50c4:	1aaf      	subs	r7, r5, r2
    50c6:	2f00      	cmp	r7, #0
    50c8:	dc00      	bgt.n	50cc <__aeabi_dadd+0x48>
    50ca:	e109      	b.n	52e0 <__aeabi_dadd+0x25c>
    50cc:	2a00      	cmp	r2, #0
    50ce:	d13b      	bne.n	5148 <__aeabi_dadd+0xc4>
    50d0:	4318      	orrs	r0, r3
    50d2:	d000      	beq.n	50d6 <__aeabi_dadd+0x52>
    50d4:	e0ea      	b.n	52ac <__aeabi_dadd+0x228>
    50d6:	0763      	lsls	r3, r4, #29
    50d8:	d100      	bne.n	50dc <__aeabi_dadd+0x58>
    50da:	e087      	b.n	51ec <__aeabi_dadd+0x168>
    50dc:	230f      	movs	r3, #15
    50de:	4023      	ands	r3, r4
    50e0:	2b04      	cmp	r3, #4
    50e2:	d100      	bne.n	50e6 <__aeabi_dadd+0x62>
    50e4:	e082      	b.n	51ec <__aeabi_dadd+0x168>
    50e6:	1d22      	adds	r2, r4, #4
    50e8:	42a2      	cmp	r2, r4
    50ea:	41a4      	sbcs	r4, r4
    50ec:	4264      	negs	r4, r4
    50ee:	2380      	movs	r3, #128	; 0x80
    50f0:	1909      	adds	r1, r1, r4
    50f2:	041b      	lsls	r3, r3, #16
    50f4:	400b      	ands	r3, r1
    50f6:	1c37      	adds	r7, r6, #0
    50f8:	1c14      	adds	r4, r2, #0
    50fa:	2b00      	cmp	r3, #0
    50fc:	d100      	bne.n	5100 <__aeabi_dadd+0x7c>
    50fe:	e07c      	b.n	51fa <__aeabi_dadd+0x176>
    5100:	4bce      	ldr	r3, [pc, #824]	; (543c <__aeabi_dadd+0x3b8>)
    5102:	3501      	adds	r5, #1
    5104:	429d      	cmp	r5, r3
    5106:	d100      	bne.n	510a <__aeabi_dadd+0x86>
    5108:	e105      	b.n	5316 <__aeabi_dadd+0x292>
    510a:	4bcd      	ldr	r3, [pc, #820]	; (5440 <__aeabi_dadd+0x3bc>)
    510c:	08e4      	lsrs	r4, r4, #3
    510e:	4019      	ands	r1, r3
    5110:	0748      	lsls	r0, r1, #29
    5112:	0249      	lsls	r1, r1, #9
    5114:	4304      	orrs	r4, r0
    5116:	0b0b      	lsrs	r3, r1, #12
    5118:	2000      	movs	r0, #0
    511a:	2100      	movs	r1, #0
    511c:	031b      	lsls	r3, r3, #12
    511e:	0b1a      	lsrs	r2, r3, #12
    5120:	0d0b      	lsrs	r3, r1, #20
    5122:	056d      	lsls	r5, r5, #21
    5124:	051b      	lsls	r3, r3, #20
    5126:	4313      	orrs	r3, r2
    5128:	086a      	lsrs	r2, r5, #1
    512a:	4dc6      	ldr	r5, [pc, #792]	; (5444 <__aeabi_dadd+0x3c0>)
    512c:	07ff      	lsls	r7, r7, #31
    512e:	401d      	ands	r5, r3
    5130:	4315      	orrs	r5, r2
    5132:	006d      	lsls	r5, r5, #1
    5134:	086d      	lsrs	r5, r5, #1
    5136:	1c29      	adds	r1, r5, #0
    5138:	4339      	orrs	r1, r7
    513a:	1c20      	adds	r0, r4, #0
    513c:	bc3c      	pop	{r2, r3, r4, r5}
    513e:	4690      	mov	r8, r2
    5140:	4699      	mov	r9, r3
    5142:	46a2      	mov	sl, r4
    5144:	46ab      	mov	fp, r5
    5146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5148:	48bc      	ldr	r0, [pc, #752]	; (543c <__aeabi_dadd+0x3b8>)
    514a:	4285      	cmp	r5, r0
    514c:	d0c3      	beq.n	50d6 <__aeabi_dadd+0x52>
    514e:	2080      	movs	r0, #128	; 0x80
    5150:	0400      	lsls	r0, r0, #16
    5152:	4303      	orrs	r3, r0
    5154:	2f38      	cmp	r7, #56	; 0x38
    5156:	dd00      	ble.n	515a <__aeabi_dadd+0xd6>
    5158:	e0f0      	b.n	533c <__aeabi_dadd+0x2b8>
    515a:	2f1f      	cmp	r7, #31
    515c:	dd00      	ble.n	5160 <__aeabi_dadd+0xdc>
    515e:	e124      	b.n	53aa <__aeabi_dadd+0x326>
    5160:	2020      	movs	r0, #32
    5162:	1bc0      	subs	r0, r0, r7
    5164:	1c1a      	adds	r2, r3, #0
    5166:	4681      	mov	r9, r0
    5168:	4082      	lsls	r2, r0
    516a:	4658      	mov	r0, fp
    516c:	40f8      	lsrs	r0, r7
    516e:	4302      	orrs	r2, r0
    5170:	4694      	mov	ip, r2
    5172:	4658      	mov	r0, fp
    5174:	464a      	mov	r2, r9
    5176:	4090      	lsls	r0, r2
    5178:	1e42      	subs	r2, r0, #1
    517a:	4190      	sbcs	r0, r2
    517c:	40fb      	lsrs	r3, r7
    517e:	4662      	mov	r2, ip
    5180:	4302      	orrs	r2, r0
    5182:	1c1f      	adds	r7, r3, #0
    5184:	1aa2      	subs	r2, r4, r2
    5186:	4294      	cmp	r4, r2
    5188:	41a4      	sbcs	r4, r4
    518a:	4264      	negs	r4, r4
    518c:	1bc9      	subs	r1, r1, r7
    518e:	1b09      	subs	r1, r1, r4
    5190:	1c14      	adds	r4, r2, #0
    5192:	020b      	lsls	r3, r1, #8
    5194:	d59f      	bpl.n	50d6 <__aeabi_dadd+0x52>
    5196:	0249      	lsls	r1, r1, #9
    5198:	0a4f      	lsrs	r7, r1, #9
    519a:	2f00      	cmp	r7, #0
    519c:	d100      	bne.n	51a0 <__aeabi_dadd+0x11c>
    519e:	e0c8      	b.n	5332 <__aeabi_dadd+0x2ae>
    51a0:	1c38      	adds	r0, r7, #0
    51a2:	f001 fdb7 	bl	6d14 <__clzsi2>
    51a6:	1c02      	adds	r2, r0, #0
    51a8:	3a08      	subs	r2, #8
    51aa:	2a1f      	cmp	r2, #31
    51ac:	dd00      	ble.n	51b0 <__aeabi_dadd+0x12c>
    51ae:	e0b5      	b.n	531c <__aeabi_dadd+0x298>
    51b0:	2128      	movs	r1, #40	; 0x28
    51b2:	1a09      	subs	r1, r1, r0
    51b4:	1c20      	adds	r0, r4, #0
    51b6:	4097      	lsls	r7, r2
    51b8:	40c8      	lsrs	r0, r1
    51ba:	4307      	orrs	r7, r0
    51bc:	4094      	lsls	r4, r2
    51be:	4295      	cmp	r5, r2
    51c0:	dd00      	ble.n	51c4 <__aeabi_dadd+0x140>
    51c2:	e0b2      	b.n	532a <__aeabi_dadd+0x2a6>
    51c4:	1b55      	subs	r5, r2, r5
    51c6:	1c69      	adds	r1, r5, #1
    51c8:	291f      	cmp	r1, #31
    51ca:	dd00      	ble.n	51ce <__aeabi_dadd+0x14a>
    51cc:	e0dc      	b.n	5388 <__aeabi_dadd+0x304>
    51ce:	221f      	movs	r2, #31
    51d0:	1b55      	subs	r5, r2, r5
    51d2:	1c3b      	adds	r3, r7, #0
    51d4:	1c22      	adds	r2, r4, #0
    51d6:	40ab      	lsls	r3, r5
    51d8:	40ca      	lsrs	r2, r1
    51da:	40ac      	lsls	r4, r5
    51dc:	1e65      	subs	r5, r4, #1
    51de:	41ac      	sbcs	r4, r5
    51e0:	4313      	orrs	r3, r2
    51e2:	40cf      	lsrs	r7, r1
    51e4:	431c      	orrs	r4, r3
    51e6:	1c39      	adds	r1, r7, #0
    51e8:	2500      	movs	r5, #0
    51ea:	e774      	b.n	50d6 <__aeabi_dadd+0x52>
    51ec:	2380      	movs	r3, #128	; 0x80
    51ee:	041b      	lsls	r3, r3, #16
    51f0:	400b      	ands	r3, r1
    51f2:	1c37      	adds	r7, r6, #0
    51f4:	2b00      	cmp	r3, #0
    51f6:	d000      	beq.n	51fa <__aeabi_dadd+0x176>
    51f8:	e782      	b.n	5100 <__aeabi_dadd+0x7c>
    51fa:	4b90      	ldr	r3, [pc, #576]	; (543c <__aeabi_dadd+0x3b8>)
    51fc:	0748      	lsls	r0, r1, #29
    51fe:	08e4      	lsrs	r4, r4, #3
    5200:	4304      	orrs	r4, r0
    5202:	08c9      	lsrs	r1, r1, #3
    5204:	429d      	cmp	r5, r3
    5206:	d048      	beq.n	529a <__aeabi_dadd+0x216>
    5208:	0309      	lsls	r1, r1, #12
    520a:	0b0b      	lsrs	r3, r1, #12
    520c:	e784      	b.n	5118 <__aeabi_dadd+0x94>
    520e:	1aaa      	subs	r2, r5, r2
    5210:	4694      	mov	ip, r2
    5212:	2a00      	cmp	r2, #0
    5214:	dc00      	bgt.n	5218 <__aeabi_dadd+0x194>
    5216:	e098      	b.n	534a <__aeabi_dadd+0x2c6>
    5218:	4650      	mov	r0, sl
    521a:	2800      	cmp	r0, #0
    521c:	d052      	beq.n	52c4 <__aeabi_dadd+0x240>
    521e:	4887      	ldr	r0, [pc, #540]	; (543c <__aeabi_dadd+0x3b8>)
    5220:	4285      	cmp	r5, r0
    5222:	d100      	bne.n	5226 <__aeabi_dadd+0x1a2>
    5224:	e757      	b.n	50d6 <__aeabi_dadd+0x52>
    5226:	2080      	movs	r0, #128	; 0x80
    5228:	0400      	lsls	r0, r0, #16
    522a:	4303      	orrs	r3, r0
    522c:	4662      	mov	r2, ip
    522e:	2a38      	cmp	r2, #56	; 0x38
    5230:	dd00      	ble.n	5234 <__aeabi_dadd+0x1b0>
    5232:	e0fc      	b.n	542e <__aeabi_dadd+0x3aa>
    5234:	2a1f      	cmp	r2, #31
    5236:	dd00      	ble.n	523a <__aeabi_dadd+0x1b6>
    5238:	e14a      	b.n	54d0 <__aeabi_dadd+0x44c>
    523a:	2220      	movs	r2, #32
    523c:	4660      	mov	r0, ip
    523e:	1a10      	subs	r0, r2, r0
    5240:	1c1a      	adds	r2, r3, #0
    5242:	4082      	lsls	r2, r0
    5244:	4682      	mov	sl, r0
    5246:	4691      	mov	r9, r2
    5248:	4658      	mov	r0, fp
    524a:	4662      	mov	r2, ip
    524c:	40d0      	lsrs	r0, r2
    524e:	464a      	mov	r2, r9
    5250:	4302      	orrs	r2, r0
    5252:	4690      	mov	r8, r2
    5254:	4658      	mov	r0, fp
    5256:	4652      	mov	r2, sl
    5258:	4090      	lsls	r0, r2
    525a:	1e42      	subs	r2, r0, #1
    525c:	4190      	sbcs	r0, r2
    525e:	4642      	mov	r2, r8
    5260:	4302      	orrs	r2, r0
    5262:	4660      	mov	r0, ip
    5264:	40c3      	lsrs	r3, r0
    5266:	1912      	adds	r2, r2, r4
    5268:	42a2      	cmp	r2, r4
    526a:	41a4      	sbcs	r4, r4
    526c:	4264      	negs	r4, r4
    526e:	1859      	adds	r1, r3, r1
    5270:	1909      	adds	r1, r1, r4
    5272:	1c14      	adds	r4, r2, #0
    5274:	0208      	lsls	r0, r1, #8
    5276:	d400      	bmi.n	527a <__aeabi_dadd+0x1f6>
    5278:	e72d      	b.n	50d6 <__aeabi_dadd+0x52>
    527a:	4b70      	ldr	r3, [pc, #448]	; (543c <__aeabi_dadd+0x3b8>)
    527c:	3501      	adds	r5, #1
    527e:	429d      	cmp	r5, r3
    5280:	d100      	bne.n	5284 <__aeabi_dadd+0x200>
    5282:	e122      	b.n	54ca <__aeabi_dadd+0x446>
    5284:	4b6e      	ldr	r3, [pc, #440]	; (5440 <__aeabi_dadd+0x3bc>)
    5286:	0860      	lsrs	r0, r4, #1
    5288:	4019      	ands	r1, r3
    528a:	2301      	movs	r3, #1
    528c:	4023      	ands	r3, r4
    528e:	1c1c      	adds	r4, r3, #0
    5290:	4304      	orrs	r4, r0
    5292:	07cb      	lsls	r3, r1, #31
    5294:	431c      	orrs	r4, r3
    5296:	0849      	lsrs	r1, r1, #1
    5298:	e71d      	b.n	50d6 <__aeabi_dadd+0x52>
    529a:	1c23      	adds	r3, r4, #0
    529c:	430b      	orrs	r3, r1
    529e:	d03a      	beq.n	5316 <__aeabi_dadd+0x292>
    52a0:	2380      	movs	r3, #128	; 0x80
    52a2:	031b      	lsls	r3, r3, #12
    52a4:	430b      	orrs	r3, r1
    52a6:	031b      	lsls	r3, r3, #12
    52a8:	0b1b      	lsrs	r3, r3, #12
    52aa:	e735      	b.n	5118 <__aeabi_dadd+0x94>
    52ac:	3f01      	subs	r7, #1
    52ae:	2f00      	cmp	r7, #0
    52b0:	d165      	bne.n	537e <__aeabi_dadd+0x2fa>
    52b2:	4658      	mov	r0, fp
    52b4:	1a22      	subs	r2, r4, r0
    52b6:	4294      	cmp	r4, r2
    52b8:	41a4      	sbcs	r4, r4
    52ba:	4264      	negs	r4, r4
    52bc:	1ac9      	subs	r1, r1, r3
    52be:	1b09      	subs	r1, r1, r4
    52c0:	1c14      	adds	r4, r2, #0
    52c2:	e766      	b.n	5192 <__aeabi_dadd+0x10e>
    52c4:	4658      	mov	r0, fp
    52c6:	4318      	orrs	r0, r3
    52c8:	d100      	bne.n	52cc <__aeabi_dadd+0x248>
    52ca:	e704      	b.n	50d6 <__aeabi_dadd+0x52>
    52cc:	2201      	movs	r2, #1
    52ce:	4252      	negs	r2, r2
    52d0:	4494      	add	ip, r2
    52d2:	4660      	mov	r0, ip
    52d4:	2800      	cmp	r0, #0
    52d6:	d000      	beq.n	52da <__aeabi_dadd+0x256>
    52d8:	e0c5      	b.n	5466 <__aeabi_dadd+0x3e2>
    52da:	4658      	mov	r0, fp
    52dc:	1902      	adds	r2, r0, r4
    52de:	e7c3      	b.n	5268 <__aeabi_dadd+0x1e4>
    52e0:	2f00      	cmp	r7, #0
    52e2:	d173      	bne.n	53cc <__aeabi_dadd+0x348>
    52e4:	1c68      	adds	r0, r5, #1
    52e6:	0540      	lsls	r0, r0, #21
    52e8:	0d40      	lsrs	r0, r0, #21
    52ea:	2801      	cmp	r0, #1
    52ec:	dc00      	bgt.n	52f0 <__aeabi_dadd+0x26c>
    52ee:	e0de      	b.n	54ae <__aeabi_dadd+0x42a>
    52f0:	465a      	mov	r2, fp
    52f2:	1aa2      	subs	r2, r4, r2
    52f4:	4294      	cmp	r4, r2
    52f6:	41bf      	sbcs	r7, r7
    52f8:	1ac8      	subs	r0, r1, r3
    52fa:	427f      	negs	r7, r7
    52fc:	1bc7      	subs	r7, r0, r7
    52fe:	0238      	lsls	r0, r7, #8
    5300:	d400      	bmi.n	5304 <__aeabi_dadd+0x280>
    5302:	e089      	b.n	5418 <__aeabi_dadd+0x394>
    5304:	465a      	mov	r2, fp
    5306:	1b14      	subs	r4, r2, r4
    5308:	45a3      	cmp	fp, r4
    530a:	4192      	sbcs	r2, r2
    530c:	1a59      	subs	r1, r3, r1
    530e:	4252      	negs	r2, r2
    5310:	1a8f      	subs	r7, r1, r2
    5312:	4666      	mov	r6, ip
    5314:	e741      	b.n	519a <__aeabi_dadd+0x116>
    5316:	2300      	movs	r3, #0
    5318:	2400      	movs	r4, #0
    531a:	e6fd      	b.n	5118 <__aeabi_dadd+0x94>
    531c:	1c27      	adds	r7, r4, #0
    531e:	3828      	subs	r0, #40	; 0x28
    5320:	4087      	lsls	r7, r0
    5322:	2400      	movs	r4, #0
    5324:	4295      	cmp	r5, r2
    5326:	dc00      	bgt.n	532a <__aeabi_dadd+0x2a6>
    5328:	e74c      	b.n	51c4 <__aeabi_dadd+0x140>
    532a:	4945      	ldr	r1, [pc, #276]	; (5440 <__aeabi_dadd+0x3bc>)
    532c:	1aad      	subs	r5, r5, r2
    532e:	4039      	ands	r1, r7
    5330:	e6d1      	b.n	50d6 <__aeabi_dadd+0x52>
    5332:	1c20      	adds	r0, r4, #0
    5334:	f001 fcee 	bl	6d14 <__clzsi2>
    5338:	3020      	adds	r0, #32
    533a:	e734      	b.n	51a6 <__aeabi_dadd+0x122>
    533c:	465a      	mov	r2, fp
    533e:	431a      	orrs	r2, r3
    5340:	1e53      	subs	r3, r2, #1
    5342:	419a      	sbcs	r2, r3
    5344:	b2d2      	uxtb	r2, r2
    5346:	2700      	movs	r7, #0
    5348:	e71c      	b.n	5184 <__aeabi_dadd+0x100>
    534a:	2a00      	cmp	r2, #0
    534c:	d000      	beq.n	5350 <__aeabi_dadd+0x2cc>
    534e:	e0dc      	b.n	550a <__aeabi_dadd+0x486>
    5350:	1c68      	adds	r0, r5, #1
    5352:	0542      	lsls	r2, r0, #21
    5354:	0d52      	lsrs	r2, r2, #21
    5356:	2a01      	cmp	r2, #1
    5358:	dc00      	bgt.n	535c <__aeabi_dadd+0x2d8>
    535a:	e08d      	b.n	5478 <__aeabi_dadd+0x3f4>
    535c:	4d37      	ldr	r5, [pc, #220]	; (543c <__aeabi_dadd+0x3b8>)
    535e:	42a8      	cmp	r0, r5
    5360:	d100      	bne.n	5364 <__aeabi_dadd+0x2e0>
    5362:	e0f3      	b.n	554c <__aeabi_dadd+0x4c8>
    5364:	465d      	mov	r5, fp
    5366:	192a      	adds	r2, r5, r4
    5368:	42a2      	cmp	r2, r4
    536a:	41a4      	sbcs	r4, r4
    536c:	4264      	negs	r4, r4
    536e:	1859      	adds	r1, r3, r1
    5370:	1909      	adds	r1, r1, r4
    5372:	07cc      	lsls	r4, r1, #31
    5374:	0852      	lsrs	r2, r2, #1
    5376:	4314      	orrs	r4, r2
    5378:	0849      	lsrs	r1, r1, #1
    537a:	1c05      	adds	r5, r0, #0
    537c:	e6ab      	b.n	50d6 <__aeabi_dadd+0x52>
    537e:	482f      	ldr	r0, [pc, #188]	; (543c <__aeabi_dadd+0x3b8>)
    5380:	4285      	cmp	r5, r0
    5382:	d000      	beq.n	5386 <__aeabi_dadd+0x302>
    5384:	e6e6      	b.n	5154 <__aeabi_dadd+0xd0>
    5386:	e6a6      	b.n	50d6 <__aeabi_dadd+0x52>
    5388:	1c2b      	adds	r3, r5, #0
    538a:	3b1f      	subs	r3, #31
    538c:	1c3a      	adds	r2, r7, #0
    538e:	40da      	lsrs	r2, r3
    5390:	1c13      	adds	r3, r2, #0
    5392:	2920      	cmp	r1, #32
    5394:	d06c      	beq.n	5470 <__aeabi_dadd+0x3ec>
    5396:	223f      	movs	r2, #63	; 0x3f
    5398:	1b55      	subs	r5, r2, r5
    539a:	40af      	lsls	r7, r5
    539c:	433c      	orrs	r4, r7
    539e:	1e60      	subs	r0, r4, #1
    53a0:	4184      	sbcs	r4, r0
    53a2:	431c      	orrs	r4, r3
    53a4:	2100      	movs	r1, #0
    53a6:	2500      	movs	r5, #0
    53a8:	e695      	b.n	50d6 <__aeabi_dadd+0x52>
    53aa:	1c38      	adds	r0, r7, #0
    53ac:	3820      	subs	r0, #32
    53ae:	1c1a      	adds	r2, r3, #0
    53b0:	40c2      	lsrs	r2, r0
    53b2:	1c10      	adds	r0, r2, #0
    53b4:	2f20      	cmp	r7, #32
    53b6:	d05d      	beq.n	5474 <__aeabi_dadd+0x3f0>
    53b8:	2240      	movs	r2, #64	; 0x40
    53ba:	1bd7      	subs	r7, r2, r7
    53bc:	40bb      	lsls	r3, r7
    53be:	465a      	mov	r2, fp
    53c0:	431a      	orrs	r2, r3
    53c2:	1e53      	subs	r3, r2, #1
    53c4:	419a      	sbcs	r2, r3
    53c6:	4302      	orrs	r2, r0
    53c8:	2700      	movs	r7, #0
    53ca:	e6db      	b.n	5184 <__aeabi_dadd+0x100>
    53cc:	2d00      	cmp	r5, #0
    53ce:	d03b      	beq.n	5448 <__aeabi_dadd+0x3c4>
    53d0:	4d1a      	ldr	r5, [pc, #104]	; (543c <__aeabi_dadd+0x3b8>)
    53d2:	45aa      	cmp	sl, r5
    53d4:	d100      	bne.n	53d8 <__aeabi_dadd+0x354>
    53d6:	e093      	b.n	5500 <__aeabi_dadd+0x47c>
    53d8:	2580      	movs	r5, #128	; 0x80
    53da:	042d      	lsls	r5, r5, #16
    53dc:	427f      	negs	r7, r7
    53de:	4329      	orrs	r1, r5
    53e0:	2f38      	cmp	r7, #56	; 0x38
    53e2:	dd00      	ble.n	53e6 <__aeabi_dadd+0x362>
    53e4:	e0ac      	b.n	5540 <__aeabi_dadd+0x4bc>
    53e6:	2f1f      	cmp	r7, #31
    53e8:	dd00      	ble.n	53ec <__aeabi_dadd+0x368>
    53ea:	e129      	b.n	5640 <__aeabi_dadd+0x5bc>
    53ec:	2520      	movs	r5, #32
    53ee:	1bed      	subs	r5, r5, r7
    53f0:	1c08      	adds	r0, r1, #0
    53f2:	1c26      	adds	r6, r4, #0
    53f4:	40a8      	lsls	r0, r5
    53f6:	40fe      	lsrs	r6, r7
    53f8:	40ac      	lsls	r4, r5
    53fa:	4306      	orrs	r6, r0
    53fc:	1e65      	subs	r5, r4, #1
    53fe:	41ac      	sbcs	r4, r5
    5400:	4334      	orrs	r4, r6
    5402:	40f9      	lsrs	r1, r7
    5404:	465d      	mov	r5, fp
    5406:	1b2c      	subs	r4, r5, r4
    5408:	45a3      	cmp	fp, r4
    540a:	4192      	sbcs	r2, r2
    540c:	1a5b      	subs	r3, r3, r1
    540e:	4252      	negs	r2, r2
    5410:	1a99      	subs	r1, r3, r2
    5412:	4655      	mov	r5, sl
    5414:	4666      	mov	r6, ip
    5416:	e6bc      	b.n	5192 <__aeabi_dadd+0x10e>
    5418:	1c13      	adds	r3, r2, #0
    541a:	433b      	orrs	r3, r7
    541c:	1c14      	adds	r4, r2, #0
    541e:	2b00      	cmp	r3, #0
    5420:	d000      	beq.n	5424 <__aeabi_dadd+0x3a0>
    5422:	e6ba      	b.n	519a <__aeabi_dadd+0x116>
    5424:	2700      	movs	r7, #0
    5426:	2100      	movs	r1, #0
    5428:	2500      	movs	r5, #0
    542a:	2400      	movs	r4, #0
    542c:	e6e5      	b.n	51fa <__aeabi_dadd+0x176>
    542e:	465a      	mov	r2, fp
    5430:	431a      	orrs	r2, r3
    5432:	1e53      	subs	r3, r2, #1
    5434:	419a      	sbcs	r2, r3
    5436:	b2d2      	uxtb	r2, r2
    5438:	2300      	movs	r3, #0
    543a:	e714      	b.n	5266 <__aeabi_dadd+0x1e2>
    543c:	000007ff 	.word	0x000007ff
    5440:	ff7fffff 	.word	0xff7fffff
    5444:	800fffff 	.word	0x800fffff
    5448:	1c0d      	adds	r5, r1, #0
    544a:	4325      	orrs	r5, r4
    544c:	d058      	beq.n	5500 <__aeabi_dadd+0x47c>
    544e:	43ff      	mvns	r7, r7
    5450:	2f00      	cmp	r7, #0
    5452:	d151      	bne.n	54f8 <__aeabi_dadd+0x474>
    5454:	1b04      	subs	r4, r0, r4
    5456:	45a3      	cmp	fp, r4
    5458:	4192      	sbcs	r2, r2
    545a:	1a59      	subs	r1, r3, r1
    545c:	4252      	negs	r2, r2
    545e:	1a89      	subs	r1, r1, r2
    5460:	4655      	mov	r5, sl
    5462:	4666      	mov	r6, ip
    5464:	e695      	b.n	5192 <__aeabi_dadd+0x10e>
    5466:	4896      	ldr	r0, [pc, #600]	; (56c0 <__aeabi_dadd+0x63c>)
    5468:	4285      	cmp	r5, r0
    546a:	d000      	beq.n	546e <__aeabi_dadd+0x3ea>
    546c:	e6de      	b.n	522c <__aeabi_dadd+0x1a8>
    546e:	e632      	b.n	50d6 <__aeabi_dadd+0x52>
    5470:	2700      	movs	r7, #0
    5472:	e793      	b.n	539c <__aeabi_dadd+0x318>
    5474:	2300      	movs	r3, #0
    5476:	e7a2      	b.n	53be <__aeabi_dadd+0x33a>
    5478:	1c08      	adds	r0, r1, #0
    547a:	4320      	orrs	r0, r4
    547c:	2d00      	cmp	r5, #0
    547e:	d000      	beq.n	5482 <__aeabi_dadd+0x3fe>
    5480:	e0c4      	b.n	560c <__aeabi_dadd+0x588>
    5482:	2800      	cmp	r0, #0
    5484:	d100      	bne.n	5488 <__aeabi_dadd+0x404>
    5486:	e0f7      	b.n	5678 <__aeabi_dadd+0x5f4>
    5488:	4658      	mov	r0, fp
    548a:	4318      	orrs	r0, r3
    548c:	d100      	bne.n	5490 <__aeabi_dadd+0x40c>
    548e:	e622      	b.n	50d6 <__aeabi_dadd+0x52>
    5490:	4658      	mov	r0, fp
    5492:	1902      	adds	r2, r0, r4
    5494:	42a2      	cmp	r2, r4
    5496:	41a4      	sbcs	r4, r4
    5498:	4264      	negs	r4, r4
    549a:	1859      	adds	r1, r3, r1
    549c:	1909      	adds	r1, r1, r4
    549e:	1c14      	adds	r4, r2, #0
    54a0:	020a      	lsls	r2, r1, #8
    54a2:	d400      	bmi.n	54a6 <__aeabi_dadd+0x422>
    54a4:	e617      	b.n	50d6 <__aeabi_dadd+0x52>
    54a6:	4b87      	ldr	r3, [pc, #540]	; (56c4 <__aeabi_dadd+0x640>)
    54a8:	2501      	movs	r5, #1
    54aa:	4019      	ands	r1, r3
    54ac:	e613      	b.n	50d6 <__aeabi_dadd+0x52>
    54ae:	1c08      	adds	r0, r1, #0
    54b0:	4320      	orrs	r0, r4
    54b2:	2d00      	cmp	r5, #0
    54b4:	d139      	bne.n	552a <__aeabi_dadd+0x4a6>
    54b6:	2800      	cmp	r0, #0
    54b8:	d171      	bne.n	559e <__aeabi_dadd+0x51a>
    54ba:	4659      	mov	r1, fp
    54bc:	4319      	orrs	r1, r3
    54be:	d003      	beq.n	54c8 <__aeabi_dadd+0x444>
    54c0:	1c19      	adds	r1, r3, #0
    54c2:	465c      	mov	r4, fp
    54c4:	4666      	mov	r6, ip
    54c6:	e606      	b.n	50d6 <__aeabi_dadd+0x52>
    54c8:	2700      	movs	r7, #0
    54ca:	2100      	movs	r1, #0
    54cc:	2400      	movs	r4, #0
    54ce:	e694      	b.n	51fa <__aeabi_dadd+0x176>
    54d0:	4660      	mov	r0, ip
    54d2:	3820      	subs	r0, #32
    54d4:	1c1a      	adds	r2, r3, #0
    54d6:	40c2      	lsrs	r2, r0
    54d8:	4660      	mov	r0, ip
    54da:	4691      	mov	r9, r2
    54dc:	2820      	cmp	r0, #32
    54de:	d100      	bne.n	54e2 <__aeabi_dadd+0x45e>
    54e0:	e0ac      	b.n	563c <__aeabi_dadd+0x5b8>
    54e2:	2240      	movs	r2, #64	; 0x40
    54e4:	1a12      	subs	r2, r2, r0
    54e6:	4093      	lsls	r3, r2
    54e8:	465a      	mov	r2, fp
    54ea:	431a      	orrs	r2, r3
    54ec:	1e53      	subs	r3, r2, #1
    54ee:	419a      	sbcs	r2, r3
    54f0:	464b      	mov	r3, r9
    54f2:	431a      	orrs	r2, r3
    54f4:	2300      	movs	r3, #0
    54f6:	e6b6      	b.n	5266 <__aeabi_dadd+0x1e2>
    54f8:	4d71      	ldr	r5, [pc, #452]	; (56c0 <__aeabi_dadd+0x63c>)
    54fa:	45aa      	cmp	sl, r5
    54fc:	d000      	beq.n	5500 <__aeabi_dadd+0x47c>
    54fe:	e76f      	b.n	53e0 <__aeabi_dadd+0x35c>
    5500:	1c19      	adds	r1, r3, #0
    5502:	465c      	mov	r4, fp
    5504:	4655      	mov	r5, sl
    5506:	4666      	mov	r6, ip
    5508:	e5e5      	b.n	50d6 <__aeabi_dadd+0x52>
    550a:	2d00      	cmp	r5, #0
    550c:	d122      	bne.n	5554 <__aeabi_dadd+0x4d0>
    550e:	1c0d      	adds	r5, r1, #0
    5510:	4325      	orrs	r5, r4
    5512:	d077      	beq.n	5604 <__aeabi_dadd+0x580>
    5514:	43d5      	mvns	r5, r2
    5516:	2d00      	cmp	r5, #0
    5518:	d171      	bne.n	55fe <__aeabi_dadd+0x57a>
    551a:	445c      	add	r4, fp
    551c:	455c      	cmp	r4, fp
    551e:	4192      	sbcs	r2, r2
    5520:	1859      	adds	r1, r3, r1
    5522:	4252      	negs	r2, r2
    5524:	1889      	adds	r1, r1, r2
    5526:	4655      	mov	r5, sl
    5528:	e6a4      	b.n	5274 <__aeabi_dadd+0x1f0>
    552a:	2800      	cmp	r0, #0
    552c:	d14d      	bne.n	55ca <__aeabi_dadd+0x546>
    552e:	4659      	mov	r1, fp
    5530:	4319      	orrs	r1, r3
    5532:	d100      	bne.n	5536 <__aeabi_dadd+0x4b2>
    5534:	e094      	b.n	5660 <__aeabi_dadd+0x5dc>
    5536:	1c19      	adds	r1, r3, #0
    5538:	465c      	mov	r4, fp
    553a:	4666      	mov	r6, ip
    553c:	4d60      	ldr	r5, [pc, #384]	; (56c0 <__aeabi_dadd+0x63c>)
    553e:	e5ca      	b.n	50d6 <__aeabi_dadd+0x52>
    5540:	430c      	orrs	r4, r1
    5542:	1e61      	subs	r1, r4, #1
    5544:	418c      	sbcs	r4, r1
    5546:	b2e4      	uxtb	r4, r4
    5548:	2100      	movs	r1, #0
    554a:	e75b      	b.n	5404 <__aeabi_dadd+0x380>
    554c:	1c05      	adds	r5, r0, #0
    554e:	2100      	movs	r1, #0
    5550:	2400      	movs	r4, #0
    5552:	e652      	b.n	51fa <__aeabi_dadd+0x176>
    5554:	4d5a      	ldr	r5, [pc, #360]	; (56c0 <__aeabi_dadd+0x63c>)
    5556:	45aa      	cmp	sl, r5
    5558:	d054      	beq.n	5604 <__aeabi_dadd+0x580>
    555a:	4255      	negs	r5, r2
    555c:	2280      	movs	r2, #128	; 0x80
    555e:	0410      	lsls	r0, r2, #16
    5560:	4301      	orrs	r1, r0
    5562:	2d38      	cmp	r5, #56	; 0x38
    5564:	dd00      	ble.n	5568 <__aeabi_dadd+0x4e4>
    5566:	e081      	b.n	566c <__aeabi_dadd+0x5e8>
    5568:	2d1f      	cmp	r5, #31
    556a:	dd00      	ble.n	556e <__aeabi_dadd+0x4ea>
    556c:	e092      	b.n	5694 <__aeabi_dadd+0x610>
    556e:	2220      	movs	r2, #32
    5570:	1b50      	subs	r0, r2, r5
    5572:	1c0a      	adds	r2, r1, #0
    5574:	4684      	mov	ip, r0
    5576:	4082      	lsls	r2, r0
    5578:	1c20      	adds	r0, r4, #0
    557a:	40e8      	lsrs	r0, r5
    557c:	4302      	orrs	r2, r0
    557e:	4690      	mov	r8, r2
    5580:	4662      	mov	r2, ip
    5582:	4094      	lsls	r4, r2
    5584:	1e60      	subs	r0, r4, #1
    5586:	4184      	sbcs	r4, r0
    5588:	4642      	mov	r2, r8
    558a:	4314      	orrs	r4, r2
    558c:	40e9      	lsrs	r1, r5
    558e:	445c      	add	r4, fp
    5590:	455c      	cmp	r4, fp
    5592:	4192      	sbcs	r2, r2
    5594:	18cb      	adds	r3, r1, r3
    5596:	4252      	negs	r2, r2
    5598:	1899      	adds	r1, r3, r2
    559a:	4655      	mov	r5, sl
    559c:	e66a      	b.n	5274 <__aeabi_dadd+0x1f0>
    559e:	4658      	mov	r0, fp
    55a0:	4318      	orrs	r0, r3
    55a2:	d100      	bne.n	55a6 <__aeabi_dadd+0x522>
    55a4:	e597      	b.n	50d6 <__aeabi_dadd+0x52>
    55a6:	4658      	mov	r0, fp
    55a8:	1a27      	subs	r7, r4, r0
    55aa:	42bc      	cmp	r4, r7
    55ac:	4192      	sbcs	r2, r2
    55ae:	1ac8      	subs	r0, r1, r3
    55b0:	4252      	negs	r2, r2
    55b2:	1a80      	subs	r0, r0, r2
    55b4:	0202      	lsls	r2, r0, #8
    55b6:	d566      	bpl.n	5686 <__aeabi_dadd+0x602>
    55b8:	4658      	mov	r0, fp
    55ba:	1b04      	subs	r4, r0, r4
    55bc:	45a3      	cmp	fp, r4
    55be:	4192      	sbcs	r2, r2
    55c0:	1a59      	subs	r1, r3, r1
    55c2:	4252      	negs	r2, r2
    55c4:	1a89      	subs	r1, r1, r2
    55c6:	4666      	mov	r6, ip
    55c8:	e585      	b.n	50d6 <__aeabi_dadd+0x52>
    55ca:	4658      	mov	r0, fp
    55cc:	4318      	orrs	r0, r3
    55ce:	d033      	beq.n	5638 <__aeabi_dadd+0x5b4>
    55d0:	0748      	lsls	r0, r1, #29
    55d2:	08e4      	lsrs	r4, r4, #3
    55d4:	4304      	orrs	r4, r0
    55d6:	2080      	movs	r0, #128	; 0x80
    55d8:	08c9      	lsrs	r1, r1, #3
    55da:	0300      	lsls	r0, r0, #12
    55dc:	4201      	tst	r1, r0
    55de:	d008      	beq.n	55f2 <__aeabi_dadd+0x56e>
    55e0:	08dd      	lsrs	r5, r3, #3
    55e2:	4205      	tst	r5, r0
    55e4:	d105      	bne.n	55f2 <__aeabi_dadd+0x56e>
    55e6:	4659      	mov	r1, fp
    55e8:	08ca      	lsrs	r2, r1, #3
    55ea:	075c      	lsls	r4, r3, #29
    55ec:	4314      	orrs	r4, r2
    55ee:	1c29      	adds	r1, r5, #0
    55f0:	4666      	mov	r6, ip
    55f2:	0f63      	lsrs	r3, r4, #29
    55f4:	00c9      	lsls	r1, r1, #3
    55f6:	4319      	orrs	r1, r3
    55f8:	00e4      	lsls	r4, r4, #3
    55fa:	4d31      	ldr	r5, [pc, #196]	; (56c0 <__aeabi_dadd+0x63c>)
    55fc:	e56b      	b.n	50d6 <__aeabi_dadd+0x52>
    55fe:	4a30      	ldr	r2, [pc, #192]	; (56c0 <__aeabi_dadd+0x63c>)
    5600:	4592      	cmp	sl, r2
    5602:	d1ae      	bne.n	5562 <__aeabi_dadd+0x4de>
    5604:	1c19      	adds	r1, r3, #0
    5606:	465c      	mov	r4, fp
    5608:	4655      	mov	r5, sl
    560a:	e564      	b.n	50d6 <__aeabi_dadd+0x52>
    560c:	2800      	cmp	r0, #0
    560e:	d036      	beq.n	567e <__aeabi_dadd+0x5fa>
    5610:	4658      	mov	r0, fp
    5612:	4318      	orrs	r0, r3
    5614:	d010      	beq.n	5638 <__aeabi_dadd+0x5b4>
    5616:	2580      	movs	r5, #128	; 0x80
    5618:	0748      	lsls	r0, r1, #29
    561a:	08e4      	lsrs	r4, r4, #3
    561c:	08c9      	lsrs	r1, r1, #3
    561e:	032d      	lsls	r5, r5, #12
    5620:	4304      	orrs	r4, r0
    5622:	4229      	tst	r1, r5
    5624:	d0e5      	beq.n	55f2 <__aeabi_dadd+0x56e>
    5626:	08d8      	lsrs	r0, r3, #3
    5628:	4228      	tst	r0, r5
    562a:	d1e2      	bne.n	55f2 <__aeabi_dadd+0x56e>
    562c:	465d      	mov	r5, fp
    562e:	08ea      	lsrs	r2, r5, #3
    5630:	075c      	lsls	r4, r3, #29
    5632:	4314      	orrs	r4, r2
    5634:	1c01      	adds	r1, r0, #0
    5636:	e7dc      	b.n	55f2 <__aeabi_dadd+0x56e>
    5638:	4d21      	ldr	r5, [pc, #132]	; (56c0 <__aeabi_dadd+0x63c>)
    563a:	e54c      	b.n	50d6 <__aeabi_dadd+0x52>
    563c:	2300      	movs	r3, #0
    563e:	e753      	b.n	54e8 <__aeabi_dadd+0x464>
    5640:	1c3d      	adds	r5, r7, #0
    5642:	3d20      	subs	r5, #32
    5644:	1c0a      	adds	r2, r1, #0
    5646:	40ea      	lsrs	r2, r5
    5648:	1c15      	adds	r5, r2, #0
    564a:	2f20      	cmp	r7, #32
    564c:	d034      	beq.n	56b8 <__aeabi_dadd+0x634>
    564e:	2640      	movs	r6, #64	; 0x40
    5650:	1bf7      	subs	r7, r6, r7
    5652:	40b9      	lsls	r1, r7
    5654:	430c      	orrs	r4, r1
    5656:	1e61      	subs	r1, r4, #1
    5658:	418c      	sbcs	r4, r1
    565a:	432c      	orrs	r4, r5
    565c:	2100      	movs	r1, #0
    565e:	e6d1      	b.n	5404 <__aeabi_dadd+0x380>
    5660:	2180      	movs	r1, #128	; 0x80
    5662:	2700      	movs	r7, #0
    5664:	03c9      	lsls	r1, r1, #15
    5666:	4d16      	ldr	r5, [pc, #88]	; (56c0 <__aeabi_dadd+0x63c>)
    5668:	2400      	movs	r4, #0
    566a:	e5c6      	b.n	51fa <__aeabi_dadd+0x176>
    566c:	430c      	orrs	r4, r1
    566e:	1e61      	subs	r1, r4, #1
    5670:	418c      	sbcs	r4, r1
    5672:	b2e4      	uxtb	r4, r4
    5674:	2100      	movs	r1, #0
    5676:	e78a      	b.n	558e <__aeabi_dadd+0x50a>
    5678:	1c19      	adds	r1, r3, #0
    567a:	465c      	mov	r4, fp
    567c:	e52b      	b.n	50d6 <__aeabi_dadd+0x52>
    567e:	1c19      	adds	r1, r3, #0
    5680:	465c      	mov	r4, fp
    5682:	4d0f      	ldr	r5, [pc, #60]	; (56c0 <__aeabi_dadd+0x63c>)
    5684:	e527      	b.n	50d6 <__aeabi_dadd+0x52>
    5686:	1c03      	adds	r3, r0, #0
    5688:	433b      	orrs	r3, r7
    568a:	d100      	bne.n	568e <__aeabi_dadd+0x60a>
    568c:	e71c      	b.n	54c8 <__aeabi_dadd+0x444>
    568e:	1c01      	adds	r1, r0, #0
    5690:	1c3c      	adds	r4, r7, #0
    5692:	e520      	b.n	50d6 <__aeabi_dadd+0x52>
    5694:	2020      	movs	r0, #32
    5696:	4240      	negs	r0, r0
    5698:	1940      	adds	r0, r0, r5
    569a:	1c0a      	adds	r2, r1, #0
    569c:	40c2      	lsrs	r2, r0
    569e:	4690      	mov	r8, r2
    56a0:	2d20      	cmp	r5, #32
    56a2:	d00b      	beq.n	56bc <__aeabi_dadd+0x638>
    56a4:	2040      	movs	r0, #64	; 0x40
    56a6:	1b45      	subs	r5, r0, r5
    56a8:	40a9      	lsls	r1, r5
    56aa:	430c      	orrs	r4, r1
    56ac:	1e61      	subs	r1, r4, #1
    56ae:	418c      	sbcs	r4, r1
    56b0:	4645      	mov	r5, r8
    56b2:	432c      	orrs	r4, r5
    56b4:	2100      	movs	r1, #0
    56b6:	e76a      	b.n	558e <__aeabi_dadd+0x50a>
    56b8:	2100      	movs	r1, #0
    56ba:	e7cb      	b.n	5654 <__aeabi_dadd+0x5d0>
    56bc:	2100      	movs	r1, #0
    56be:	e7f4      	b.n	56aa <__aeabi_dadd+0x626>
    56c0:	000007ff 	.word	0x000007ff
    56c4:	ff7fffff 	.word	0xff7fffff

000056c8 <__aeabi_ddiv>:
    56c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ca:	4656      	mov	r6, sl
    56cc:	4644      	mov	r4, r8
    56ce:	465f      	mov	r7, fp
    56d0:	464d      	mov	r5, r9
    56d2:	b4f0      	push	{r4, r5, r6, r7}
    56d4:	1c1f      	adds	r7, r3, #0
    56d6:	030b      	lsls	r3, r1, #12
    56d8:	0b1b      	lsrs	r3, r3, #12
    56da:	4698      	mov	r8, r3
    56dc:	004b      	lsls	r3, r1, #1
    56de:	b087      	sub	sp, #28
    56e0:	1c04      	adds	r4, r0, #0
    56e2:	4681      	mov	r9, r0
    56e4:	0d5b      	lsrs	r3, r3, #21
    56e6:	0fc8      	lsrs	r0, r1, #31
    56e8:	1c16      	adds	r6, r2, #0
    56ea:	469a      	mov	sl, r3
    56ec:	9000      	str	r0, [sp, #0]
    56ee:	2b00      	cmp	r3, #0
    56f0:	d051      	beq.n	5796 <__aeabi_ddiv+0xce>
    56f2:	4b6a      	ldr	r3, [pc, #424]	; (589c <__aeabi_ddiv+0x1d4>)
    56f4:	459a      	cmp	sl, r3
    56f6:	d031      	beq.n	575c <__aeabi_ddiv+0x94>
    56f8:	2280      	movs	r2, #128	; 0x80
    56fa:	4641      	mov	r1, r8
    56fc:	0352      	lsls	r2, r2, #13
    56fe:	430a      	orrs	r2, r1
    5700:	0f63      	lsrs	r3, r4, #29
    5702:	00d2      	lsls	r2, r2, #3
    5704:	431a      	orrs	r2, r3
    5706:	4b66      	ldr	r3, [pc, #408]	; (58a0 <__aeabi_ddiv+0x1d8>)
    5708:	4690      	mov	r8, r2
    570a:	2500      	movs	r5, #0
    570c:	00e2      	lsls	r2, r4, #3
    570e:	4691      	mov	r9, r2
    5710:	449a      	add	sl, r3
    5712:	2400      	movs	r4, #0
    5714:	9502      	str	r5, [sp, #8]
    5716:	033b      	lsls	r3, r7, #12
    5718:	0b1b      	lsrs	r3, r3, #12
    571a:	469b      	mov	fp, r3
    571c:	0ffd      	lsrs	r5, r7, #31
    571e:	007b      	lsls	r3, r7, #1
    5720:	1c31      	adds	r1, r6, #0
    5722:	0d5b      	lsrs	r3, r3, #21
    5724:	9501      	str	r5, [sp, #4]
    5726:	d060      	beq.n	57ea <__aeabi_ddiv+0x122>
    5728:	4a5c      	ldr	r2, [pc, #368]	; (589c <__aeabi_ddiv+0x1d4>)
    572a:	4293      	cmp	r3, r2
    572c:	d054      	beq.n	57d8 <__aeabi_ddiv+0x110>
    572e:	2180      	movs	r1, #128	; 0x80
    5730:	4658      	mov	r0, fp
    5732:	0349      	lsls	r1, r1, #13
    5734:	4301      	orrs	r1, r0
    5736:	0f72      	lsrs	r2, r6, #29
    5738:	00c9      	lsls	r1, r1, #3
    573a:	4311      	orrs	r1, r2
    573c:	4a58      	ldr	r2, [pc, #352]	; (58a0 <__aeabi_ddiv+0x1d8>)
    573e:	468b      	mov	fp, r1
    5740:	189b      	adds	r3, r3, r2
    5742:	00f1      	lsls	r1, r6, #3
    5744:	2000      	movs	r0, #0
    5746:	9a00      	ldr	r2, [sp, #0]
    5748:	4304      	orrs	r4, r0
    574a:	406a      	eors	r2, r5
    574c:	9203      	str	r2, [sp, #12]
    574e:	2c0f      	cmp	r4, #15
    5750:	d900      	bls.n	5754 <__aeabi_ddiv+0x8c>
    5752:	e0ad      	b.n	58b0 <__aeabi_ddiv+0x1e8>
    5754:	4e53      	ldr	r6, [pc, #332]	; (58a4 <__aeabi_ddiv+0x1dc>)
    5756:	00a4      	lsls	r4, r4, #2
    5758:	5934      	ldr	r4, [r6, r4]
    575a:	46a7      	mov	pc, r4
    575c:	4640      	mov	r0, r8
    575e:	4304      	orrs	r4, r0
    5760:	d16e      	bne.n	5840 <__aeabi_ddiv+0x178>
    5762:	2100      	movs	r1, #0
    5764:	2502      	movs	r5, #2
    5766:	2408      	movs	r4, #8
    5768:	4688      	mov	r8, r1
    576a:	4689      	mov	r9, r1
    576c:	9502      	str	r5, [sp, #8]
    576e:	e7d2      	b.n	5716 <__aeabi_ddiv+0x4e>
    5770:	9c00      	ldr	r4, [sp, #0]
    5772:	9802      	ldr	r0, [sp, #8]
    5774:	46c3      	mov	fp, r8
    5776:	4649      	mov	r1, r9
    5778:	9401      	str	r4, [sp, #4]
    577a:	2802      	cmp	r0, #2
    577c:	d064      	beq.n	5848 <__aeabi_ddiv+0x180>
    577e:	2803      	cmp	r0, #3
    5780:	d100      	bne.n	5784 <__aeabi_ddiv+0xbc>
    5782:	e2ab      	b.n	5cdc <__aeabi_ddiv+0x614>
    5784:	2801      	cmp	r0, #1
    5786:	d000      	beq.n	578a <__aeabi_ddiv+0xc2>
    5788:	e238      	b.n	5bfc <__aeabi_ddiv+0x534>
    578a:	9a01      	ldr	r2, [sp, #4]
    578c:	2400      	movs	r4, #0
    578e:	4002      	ands	r2, r0
    5790:	2500      	movs	r5, #0
    5792:	46a1      	mov	r9, r4
    5794:	e060      	b.n	5858 <__aeabi_ddiv+0x190>
    5796:	4643      	mov	r3, r8
    5798:	4323      	orrs	r3, r4
    579a:	d04a      	beq.n	5832 <__aeabi_ddiv+0x16a>
    579c:	4640      	mov	r0, r8
    579e:	2800      	cmp	r0, #0
    57a0:	d100      	bne.n	57a4 <__aeabi_ddiv+0xdc>
    57a2:	e1c0      	b.n	5b26 <__aeabi_ddiv+0x45e>
    57a4:	f001 fab6 	bl	6d14 <__clzsi2>
    57a8:	1e03      	subs	r3, r0, #0
    57aa:	2b27      	cmp	r3, #39	; 0x27
    57ac:	dd00      	ble.n	57b0 <__aeabi_ddiv+0xe8>
    57ae:	e1b3      	b.n	5b18 <__aeabi_ddiv+0x450>
    57b0:	2128      	movs	r1, #40	; 0x28
    57b2:	1a0d      	subs	r5, r1, r0
    57b4:	1c21      	adds	r1, r4, #0
    57b6:	3b08      	subs	r3, #8
    57b8:	4642      	mov	r2, r8
    57ba:	40e9      	lsrs	r1, r5
    57bc:	409a      	lsls	r2, r3
    57be:	1c0d      	adds	r5, r1, #0
    57c0:	4315      	orrs	r5, r2
    57c2:	1c22      	adds	r2, r4, #0
    57c4:	409a      	lsls	r2, r3
    57c6:	46a8      	mov	r8, r5
    57c8:	4691      	mov	r9, r2
    57ca:	4b37      	ldr	r3, [pc, #220]	; (58a8 <__aeabi_ddiv+0x1e0>)
    57cc:	2500      	movs	r5, #0
    57ce:	1a1b      	subs	r3, r3, r0
    57d0:	469a      	mov	sl, r3
    57d2:	2400      	movs	r4, #0
    57d4:	9502      	str	r5, [sp, #8]
    57d6:	e79e      	b.n	5716 <__aeabi_ddiv+0x4e>
    57d8:	465a      	mov	r2, fp
    57da:	4316      	orrs	r6, r2
    57dc:	2003      	movs	r0, #3
    57de:	2e00      	cmp	r6, #0
    57e0:	d1b1      	bne.n	5746 <__aeabi_ddiv+0x7e>
    57e2:	46b3      	mov	fp, r6
    57e4:	2100      	movs	r1, #0
    57e6:	2002      	movs	r0, #2
    57e8:	e7ad      	b.n	5746 <__aeabi_ddiv+0x7e>
    57ea:	465a      	mov	r2, fp
    57ec:	4332      	orrs	r2, r6
    57ee:	d01b      	beq.n	5828 <__aeabi_ddiv+0x160>
    57f0:	465b      	mov	r3, fp
    57f2:	2b00      	cmp	r3, #0
    57f4:	d100      	bne.n	57f8 <__aeabi_ddiv+0x130>
    57f6:	e18a      	b.n	5b0e <__aeabi_ddiv+0x446>
    57f8:	4658      	mov	r0, fp
    57fa:	f001 fa8b 	bl	6d14 <__clzsi2>
    57fe:	2827      	cmp	r0, #39	; 0x27
    5800:	dd00      	ble.n	5804 <__aeabi_ddiv+0x13c>
    5802:	e17d      	b.n	5b00 <__aeabi_ddiv+0x438>
    5804:	2228      	movs	r2, #40	; 0x28
    5806:	1a17      	subs	r7, r2, r0
    5808:	1c01      	adds	r1, r0, #0
    580a:	1c32      	adds	r2, r6, #0
    580c:	3908      	subs	r1, #8
    580e:	465b      	mov	r3, fp
    5810:	40fa      	lsrs	r2, r7
    5812:	408b      	lsls	r3, r1
    5814:	1c17      	adds	r7, r2, #0
    5816:	431f      	orrs	r7, r3
    5818:	1c33      	adds	r3, r6, #0
    581a:	408b      	lsls	r3, r1
    581c:	46bb      	mov	fp, r7
    581e:	1c19      	adds	r1, r3, #0
    5820:	4b21      	ldr	r3, [pc, #132]	; (58a8 <__aeabi_ddiv+0x1e0>)
    5822:	1a1b      	subs	r3, r3, r0
    5824:	2000      	movs	r0, #0
    5826:	e78e      	b.n	5746 <__aeabi_ddiv+0x7e>
    5828:	2700      	movs	r7, #0
    582a:	46bb      	mov	fp, r7
    582c:	2100      	movs	r1, #0
    582e:	2001      	movs	r0, #1
    5830:	e789      	b.n	5746 <__aeabi_ddiv+0x7e>
    5832:	2000      	movs	r0, #0
    5834:	2501      	movs	r5, #1
    5836:	2404      	movs	r4, #4
    5838:	4680      	mov	r8, r0
    583a:	4681      	mov	r9, r0
    583c:	9502      	str	r5, [sp, #8]
    583e:	e76a      	b.n	5716 <__aeabi_ddiv+0x4e>
    5840:	2503      	movs	r5, #3
    5842:	240c      	movs	r4, #12
    5844:	9502      	str	r5, [sp, #8]
    5846:	e766      	b.n	5716 <__aeabi_ddiv+0x4e>
    5848:	9c01      	ldr	r4, [sp, #4]
    584a:	9403      	str	r4, [sp, #12]
    584c:	9d03      	ldr	r5, [sp, #12]
    584e:	2201      	movs	r2, #1
    5850:	402a      	ands	r2, r5
    5852:	2400      	movs	r4, #0
    5854:	4d11      	ldr	r5, [pc, #68]	; (589c <__aeabi_ddiv+0x1d4>)
    5856:	46a1      	mov	r9, r4
    5858:	2000      	movs	r0, #0
    585a:	2100      	movs	r1, #0
    585c:	0324      	lsls	r4, r4, #12
    585e:	0b26      	lsrs	r6, r4, #12
    5860:	0d0c      	lsrs	r4, r1, #20
    5862:	0524      	lsls	r4, r4, #20
    5864:	4b11      	ldr	r3, [pc, #68]	; (58ac <__aeabi_ddiv+0x1e4>)
    5866:	4334      	orrs	r4, r6
    5868:	052d      	lsls	r5, r5, #20
    586a:	4023      	ands	r3, r4
    586c:	432b      	orrs	r3, r5
    586e:	005b      	lsls	r3, r3, #1
    5870:	085b      	lsrs	r3, r3, #1
    5872:	07d2      	lsls	r2, r2, #31
    5874:	1c19      	adds	r1, r3, #0
    5876:	4648      	mov	r0, r9
    5878:	4311      	orrs	r1, r2
    587a:	b007      	add	sp, #28
    587c:	bc3c      	pop	{r2, r3, r4, r5}
    587e:	4690      	mov	r8, r2
    5880:	4699      	mov	r9, r3
    5882:	46a2      	mov	sl, r4
    5884:	46ab      	mov	fp, r5
    5886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5888:	2200      	movs	r2, #0
    588a:	2480      	movs	r4, #128	; 0x80
    588c:	0324      	lsls	r4, r4, #12
    588e:	4691      	mov	r9, r2
    5890:	4d02      	ldr	r5, [pc, #8]	; (589c <__aeabi_ddiv+0x1d4>)
    5892:	e7e1      	b.n	5858 <__aeabi_ddiv+0x190>
    5894:	2400      	movs	r4, #0
    5896:	2500      	movs	r5, #0
    5898:	46a1      	mov	r9, r4
    589a:	e7dd      	b.n	5858 <__aeabi_ddiv+0x190>
    589c:	000007ff 	.word	0x000007ff
    58a0:	fffffc01 	.word	0xfffffc01
    58a4:	000070f4 	.word	0x000070f4
    58a8:	fffffc0d 	.word	0xfffffc0d
    58ac:	800fffff 	.word	0x800fffff
    58b0:	4655      	mov	r5, sl
    58b2:	1aed      	subs	r5, r5, r3
    58b4:	9504      	str	r5, [sp, #16]
    58b6:	45d8      	cmp	r8, fp
    58b8:	d900      	bls.n	58bc <__aeabi_ddiv+0x1f4>
    58ba:	e153      	b.n	5b64 <__aeabi_ddiv+0x49c>
    58bc:	d100      	bne.n	58c0 <__aeabi_ddiv+0x1f8>
    58be:	e14e      	b.n	5b5e <__aeabi_ddiv+0x496>
    58c0:	9c04      	ldr	r4, [sp, #16]
    58c2:	2500      	movs	r5, #0
    58c4:	3c01      	subs	r4, #1
    58c6:	464e      	mov	r6, r9
    58c8:	9404      	str	r4, [sp, #16]
    58ca:	4647      	mov	r7, r8
    58cc:	46a9      	mov	r9, r5
    58ce:	4658      	mov	r0, fp
    58d0:	0203      	lsls	r3, r0, #8
    58d2:	0e0c      	lsrs	r4, r1, #24
    58d4:	431c      	orrs	r4, r3
    58d6:	0209      	lsls	r1, r1, #8
    58d8:	0c25      	lsrs	r5, r4, #16
    58da:	0423      	lsls	r3, r4, #16
    58dc:	0c1b      	lsrs	r3, r3, #16
    58de:	9100      	str	r1, [sp, #0]
    58e0:	1c38      	adds	r0, r7, #0
    58e2:	1c29      	adds	r1, r5, #0
    58e4:	9301      	str	r3, [sp, #4]
    58e6:	f7ff f947 	bl	4b78 <__aeabi_uidiv>
    58ea:	9901      	ldr	r1, [sp, #4]
    58ec:	4683      	mov	fp, r0
    58ee:	4341      	muls	r1, r0
    58f0:	1c38      	adds	r0, r7, #0
    58f2:	468a      	mov	sl, r1
    58f4:	1c29      	adds	r1, r5, #0
    58f6:	f7ff f983 	bl	4c00 <__aeabi_uidivmod>
    58fa:	0c33      	lsrs	r3, r6, #16
    58fc:	0409      	lsls	r1, r1, #16
    58fe:	4319      	orrs	r1, r3
    5900:	458a      	cmp	sl, r1
    5902:	d90c      	bls.n	591e <__aeabi_ddiv+0x256>
    5904:	465b      	mov	r3, fp
    5906:	1909      	adds	r1, r1, r4
    5908:	3b01      	subs	r3, #1
    590a:	428c      	cmp	r4, r1
    590c:	d900      	bls.n	5910 <__aeabi_ddiv+0x248>
    590e:	e147      	b.n	5ba0 <__aeabi_ddiv+0x4d8>
    5910:	458a      	cmp	sl, r1
    5912:	d800      	bhi.n	5916 <__aeabi_ddiv+0x24e>
    5914:	e144      	b.n	5ba0 <__aeabi_ddiv+0x4d8>
    5916:	2202      	movs	r2, #2
    5918:	4252      	negs	r2, r2
    591a:	4493      	add	fp, r2
    591c:	1909      	adds	r1, r1, r4
    591e:	4653      	mov	r3, sl
    5920:	1acb      	subs	r3, r1, r3
    5922:	1c18      	adds	r0, r3, #0
    5924:	1c29      	adds	r1, r5, #0
    5926:	4698      	mov	r8, r3
    5928:	f7ff f926 	bl	4b78 <__aeabi_uidiv>
    592c:	1c07      	adds	r7, r0, #0
    592e:	9801      	ldr	r0, [sp, #4]
    5930:	1c29      	adds	r1, r5, #0
    5932:	4378      	muls	r0, r7
    5934:	4682      	mov	sl, r0
    5936:	4640      	mov	r0, r8
    5938:	f7ff f962 	bl	4c00 <__aeabi_uidivmod>
    593c:	0436      	lsls	r6, r6, #16
    593e:	040b      	lsls	r3, r1, #16
    5940:	0c36      	lsrs	r6, r6, #16
    5942:	4333      	orrs	r3, r6
    5944:	459a      	cmp	sl, r3
    5946:	d909      	bls.n	595c <__aeabi_ddiv+0x294>
    5948:	191b      	adds	r3, r3, r4
    594a:	1e7a      	subs	r2, r7, #1
    594c:	429c      	cmp	r4, r3
    594e:	d900      	bls.n	5952 <__aeabi_ddiv+0x28a>
    5950:	e124      	b.n	5b9c <__aeabi_ddiv+0x4d4>
    5952:	459a      	cmp	sl, r3
    5954:	d800      	bhi.n	5958 <__aeabi_ddiv+0x290>
    5956:	e121      	b.n	5b9c <__aeabi_ddiv+0x4d4>
    5958:	3f02      	subs	r7, #2
    595a:	191b      	adds	r3, r3, r4
    595c:	465e      	mov	r6, fp
    595e:	0432      	lsls	r2, r6, #16
    5960:	4317      	orrs	r7, r2
    5962:	0c38      	lsrs	r0, r7, #16
    5964:	46bb      	mov	fp, r7
    5966:	9e00      	ldr	r6, [sp, #0]
    5968:	9f00      	ldr	r7, [sp, #0]
    596a:	4651      	mov	r1, sl
    596c:	0c3f      	lsrs	r7, r7, #16
    596e:	0432      	lsls	r2, r6, #16
    5970:	1a5b      	subs	r3, r3, r1
    5972:	4659      	mov	r1, fp
    5974:	46ba      	mov	sl, r7
    5976:	0c12      	lsrs	r2, r2, #16
    5978:	040f      	lsls	r7, r1, #16
    597a:	0c3f      	lsrs	r7, r7, #16
    597c:	4690      	mov	r8, r2
    597e:	4651      	mov	r1, sl
    5980:	437a      	muls	r2, r7
    5982:	434f      	muls	r7, r1
    5984:	4641      	mov	r1, r8
    5986:	4341      	muls	r1, r0
    5988:	4656      	mov	r6, sl
    598a:	4370      	muls	r0, r6
    598c:	19cf      	adds	r7, r1, r7
    598e:	0c16      	lsrs	r6, r2, #16
    5990:	19be      	adds	r6, r7, r6
    5992:	42b1      	cmp	r1, r6
    5994:	d902      	bls.n	599c <__aeabi_ddiv+0x2d4>
    5996:	2780      	movs	r7, #128	; 0x80
    5998:	027f      	lsls	r7, r7, #9
    599a:	19c0      	adds	r0, r0, r7
    599c:	0c31      	lsrs	r1, r6, #16
    599e:	0412      	lsls	r2, r2, #16
    59a0:	0436      	lsls	r6, r6, #16
    59a2:	0c12      	lsrs	r2, r2, #16
    59a4:	1840      	adds	r0, r0, r1
    59a6:	18b6      	adds	r6, r6, r2
    59a8:	4283      	cmp	r3, r0
    59aa:	d200      	bcs.n	59ae <__aeabi_ddiv+0x2e6>
    59ac:	e0c4      	b.n	5b38 <__aeabi_ddiv+0x470>
    59ae:	d100      	bne.n	59b2 <__aeabi_ddiv+0x2ea>
    59b0:	e0be      	b.n	5b30 <__aeabi_ddiv+0x468>
    59b2:	1a19      	subs	r1, r3, r0
    59b4:	4648      	mov	r0, r9
    59b6:	1b86      	subs	r6, r0, r6
    59b8:	45b1      	cmp	r9, r6
    59ba:	41bf      	sbcs	r7, r7
    59bc:	427f      	negs	r7, r7
    59be:	1bcf      	subs	r7, r1, r7
    59c0:	42a7      	cmp	r7, r4
    59c2:	d100      	bne.n	59c6 <__aeabi_ddiv+0x2fe>
    59c4:	e113      	b.n	5bee <__aeabi_ddiv+0x526>
    59c6:	1c29      	adds	r1, r5, #0
    59c8:	1c38      	adds	r0, r7, #0
    59ca:	f7ff f8d5 	bl	4b78 <__aeabi_uidiv>
    59ce:	9901      	ldr	r1, [sp, #4]
    59d0:	9002      	str	r0, [sp, #8]
    59d2:	4341      	muls	r1, r0
    59d4:	1c38      	adds	r0, r7, #0
    59d6:	4689      	mov	r9, r1
    59d8:	1c29      	adds	r1, r5, #0
    59da:	f7ff f911 	bl	4c00 <__aeabi_uidivmod>
    59de:	0c33      	lsrs	r3, r6, #16
    59e0:	0409      	lsls	r1, r1, #16
    59e2:	4319      	orrs	r1, r3
    59e4:	4589      	cmp	r9, r1
    59e6:	d90c      	bls.n	5a02 <__aeabi_ddiv+0x33a>
    59e8:	9b02      	ldr	r3, [sp, #8]
    59ea:	1909      	adds	r1, r1, r4
    59ec:	3b01      	subs	r3, #1
    59ee:	428c      	cmp	r4, r1
    59f0:	d900      	bls.n	59f4 <__aeabi_ddiv+0x32c>
    59f2:	e0ff      	b.n	5bf4 <__aeabi_ddiv+0x52c>
    59f4:	4589      	cmp	r9, r1
    59f6:	d800      	bhi.n	59fa <__aeabi_ddiv+0x332>
    59f8:	e0fc      	b.n	5bf4 <__aeabi_ddiv+0x52c>
    59fa:	9f02      	ldr	r7, [sp, #8]
    59fc:	1909      	adds	r1, r1, r4
    59fe:	3f02      	subs	r7, #2
    5a00:	9702      	str	r7, [sp, #8]
    5a02:	464f      	mov	r7, r9
    5a04:	1bcf      	subs	r7, r1, r7
    5a06:	1c38      	adds	r0, r7, #0
    5a08:	1c29      	adds	r1, r5, #0
    5a0a:	9705      	str	r7, [sp, #20]
    5a0c:	f7ff f8b4 	bl	4b78 <__aeabi_uidiv>
    5a10:	1c07      	adds	r7, r0, #0
    5a12:	9801      	ldr	r0, [sp, #4]
    5a14:	1c29      	adds	r1, r5, #0
    5a16:	4378      	muls	r0, r7
    5a18:	4681      	mov	r9, r0
    5a1a:	9805      	ldr	r0, [sp, #20]
    5a1c:	f7ff f8f0 	bl	4c00 <__aeabi_uidivmod>
    5a20:	0436      	lsls	r6, r6, #16
    5a22:	0409      	lsls	r1, r1, #16
    5a24:	0c36      	lsrs	r6, r6, #16
    5a26:	430e      	orrs	r6, r1
    5a28:	45b1      	cmp	r9, r6
    5a2a:	d909      	bls.n	5a40 <__aeabi_ddiv+0x378>
    5a2c:	1936      	adds	r6, r6, r4
    5a2e:	1e7b      	subs	r3, r7, #1
    5a30:	42b4      	cmp	r4, r6
    5a32:	d900      	bls.n	5a36 <__aeabi_ddiv+0x36e>
    5a34:	e0e0      	b.n	5bf8 <__aeabi_ddiv+0x530>
    5a36:	45b1      	cmp	r9, r6
    5a38:	d800      	bhi.n	5a3c <__aeabi_ddiv+0x374>
    5a3a:	e0dd      	b.n	5bf8 <__aeabi_ddiv+0x530>
    5a3c:	3f02      	subs	r7, #2
    5a3e:	1936      	adds	r6, r6, r4
    5a40:	9d02      	ldr	r5, [sp, #8]
    5a42:	4649      	mov	r1, r9
    5a44:	1a76      	subs	r6, r6, r1
    5a46:	0429      	lsls	r1, r5, #16
    5a48:	4339      	orrs	r1, r7
    5a4a:	040b      	lsls	r3, r1, #16
    5a4c:	4657      	mov	r7, sl
    5a4e:	0c0a      	lsrs	r2, r1, #16
    5a50:	0c1b      	lsrs	r3, r3, #16
    5a52:	4640      	mov	r0, r8
    5a54:	4645      	mov	r5, r8
    5a56:	4358      	muls	r0, r3
    5a58:	4355      	muls	r5, r2
    5a5a:	437b      	muls	r3, r7
    5a5c:	437a      	muls	r2, r7
    5a5e:	18eb      	adds	r3, r5, r3
    5a60:	0c07      	lsrs	r7, r0, #16
    5a62:	19db      	adds	r3, r3, r7
    5a64:	429d      	cmp	r5, r3
    5a66:	d902      	bls.n	5a6e <__aeabi_ddiv+0x3a6>
    5a68:	2580      	movs	r5, #128	; 0x80
    5a6a:	026d      	lsls	r5, r5, #9
    5a6c:	1952      	adds	r2, r2, r5
    5a6e:	0c1d      	lsrs	r5, r3, #16
    5a70:	0400      	lsls	r0, r0, #16
    5a72:	041b      	lsls	r3, r3, #16
    5a74:	0c00      	lsrs	r0, r0, #16
    5a76:	1952      	adds	r2, r2, r5
    5a78:	181b      	adds	r3, r3, r0
    5a7a:	4296      	cmp	r6, r2
    5a7c:	d335      	bcc.n	5aea <__aeabi_ddiv+0x422>
    5a7e:	d100      	bne.n	5a82 <__aeabi_ddiv+0x3ba>
    5a80:	e0fc      	b.n	5c7c <__aeabi_ddiv+0x5b4>
    5a82:	2301      	movs	r3, #1
    5a84:	4319      	orrs	r1, r3
    5a86:	9e04      	ldr	r6, [sp, #16]
    5a88:	4f99      	ldr	r7, [pc, #612]	; (5cf0 <__aeabi_ddiv+0x628>)
    5a8a:	19f5      	adds	r5, r6, r7
    5a8c:	2d00      	cmp	r5, #0
    5a8e:	dc00      	bgt.n	5a92 <__aeabi_ddiv+0x3ca>
    5a90:	e0a1      	b.n	5bd6 <__aeabi_ddiv+0x50e>
    5a92:	0748      	lsls	r0, r1, #29
    5a94:	d009      	beq.n	5aaa <__aeabi_ddiv+0x3e2>
    5a96:	230f      	movs	r3, #15
    5a98:	400b      	ands	r3, r1
    5a9a:	2b04      	cmp	r3, #4
    5a9c:	d005      	beq.n	5aaa <__aeabi_ddiv+0x3e2>
    5a9e:	1d0b      	adds	r3, r1, #4
    5aa0:	428b      	cmp	r3, r1
    5aa2:	4189      	sbcs	r1, r1
    5aa4:	4249      	negs	r1, r1
    5aa6:	448b      	add	fp, r1
    5aa8:	1c19      	adds	r1, r3, #0
    5aaa:	465a      	mov	r2, fp
    5aac:	01d2      	lsls	r2, r2, #7
    5aae:	d507      	bpl.n	5ac0 <__aeabi_ddiv+0x3f8>
    5ab0:	4b90      	ldr	r3, [pc, #576]	; (5cf4 <__aeabi_ddiv+0x62c>)
    5ab2:	465c      	mov	r4, fp
    5ab4:	9e04      	ldr	r6, [sp, #16]
    5ab6:	2780      	movs	r7, #128	; 0x80
    5ab8:	401c      	ands	r4, r3
    5aba:	00ff      	lsls	r7, r7, #3
    5abc:	46a3      	mov	fp, r4
    5abe:	19f5      	adds	r5, r6, r7
    5ac0:	4b8d      	ldr	r3, [pc, #564]	; (5cf8 <__aeabi_ddiv+0x630>)
    5ac2:	429d      	cmp	r5, r3
    5ac4:	dd7a      	ble.n	5bbc <__aeabi_ddiv+0x4f4>
    5ac6:	9c03      	ldr	r4, [sp, #12]
    5ac8:	2201      	movs	r2, #1
    5aca:	4022      	ands	r2, r4
    5acc:	2400      	movs	r4, #0
    5ace:	4d8b      	ldr	r5, [pc, #556]	; (5cfc <__aeabi_ddiv+0x634>)
    5ad0:	46a1      	mov	r9, r4
    5ad2:	e6c1      	b.n	5858 <__aeabi_ddiv+0x190>
    5ad4:	2480      	movs	r4, #128	; 0x80
    5ad6:	0324      	lsls	r4, r4, #12
    5ad8:	4647      	mov	r7, r8
    5ada:	4227      	tst	r7, r4
    5adc:	d14c      	bne.n	5b78 <__aeabi_ddiv+0x4b0>
    5ade:	433c      	orrs	r4, r7
    5ae0:	0324      	lsls	r4, r4, #12
    5ae2:	0b24      	lsrs	r4, r4, #12
    5ae4:	9a00      	ldr	r2, [sp, #0]
    5ae6:	4d85      	ldr	r5, [pc, #532]	; (5cfc <__aeabi_ddiv+0x634>)
    5ae8:	e6b6      	b.n	5858 <__aeabi_ddiv+0x190>
    5aea:	1936      	adds	r6, r6, r4
    5aec:	1e48      	subs	r0, r1, #1
    5aee:	42b4      	cmp	r4, r6
    5af0:	d95e      	bls.n	5bb0 <__aeabi_ddiv+0x4e8>
    5af2:	1c01      	adds	r1, r0, #0
    5af4:	4296      	cmp	r6, r2
    5af6:	d1c4      	bne.n	5a82 <__aeabi_ddiv+0x3ba>
    5af8:	9e00      	ldr	r6, [sp, #0]
    5afa:	429e      	cmp	r6, r3
    5afc:	d1c1      	bne.n	5a82 <__aeabi_ddiv+0x3ba>
    5afe:	e7c2      	b.n	5a86 <__aeabi_ddiv+0x3be>
    5b00:	1c03      	adds	r3, r0, #0
    5b02:	3b28      	subs	r3, #40	; 0x28
    5b04:	1c31      	adds	r1, r6, #0
    5b06:	4099      	lsls	r1, r3
    5b08:	468b      	mov	fp, r1
    5b0a:	2100      	movs	r1, #0
    5b0c:	e688      	b.n	5820 <__aeabi_ddiv+0x158>
    5b0e:	1c30      	adds	r0, r6, #0
    5b10:	f001 f900 	bl	6d14 <__clzsi2>
    5b14:	3020      	adds	r0, #32
    5b16:	e672      	b.n	57fe <__aeabi_ddiv+0x136>
    5b18:	3b28      	subs	r3, #40	; 0x28
    5b1a:	1c21      	adds	r1, r4, #0
    5b1c:	4099      	lsls	r1, r3
    5b1e:	2200      	movs	r2, #0
    5b20:	4688      	mov	r8, r1
    5b22:	4691      	mov	r9, r2
    5b24:	e651      	b.n	57ca <__aeabi_ddiv+0x102>
    5b26:	1c20      	adds	r0, r4, #0
    5b28:	f001 f8f4 	bl	6d14 <__clzsi2>
    5b2c:	3020      	adds	r0, #32
    5b2e:	e63b      	b.n	57a8 <__aeabi_ddiv+0xe0>
    5b30:	2100      	movs	r1, #0
    5b32:	45b1      	cmp	r9, r6
    5b34:	d300      	bcc.n	5b38 <__aeabi_ddiv+0x470>
    5b36:	e73d      	b.n	59b4 <__aeabi_ddiv+0x2ec>
    5b38:	9f00      	ldr	r7, [sp, #0]
    5b3a:	465a      	mov	r2, fp
    5b3c:	44b9      	add	r9, r7
    5b3e:	45b9      	cmp	r9, r7
    5b40:	41bf      	sbcs	r7, r7
    5b42:	427f      	negs	r7, r7
    5b44:	193f      	adds	r7, r7, r4
    5b46:	18fb      	adds	r3, r7, r3
    5b48:	3a01      	subs	r2, #1
    5b4a:	429c      	cmp	r4, r3
    5b4c:	d21e      	bcs.n	5b8c <__aeabi_ddiv+0x4c4>
    5b4e:	4298      	cmp	r0, r3
    5b50:	d900      	bls.n	5b54 <__aeabi_ddiv+0x48c>
    5b52:	e07e      	b.n	5c52 <__aeabi_ddiv+0x58a>
    5b54:	d100      	bne.n	5b58 <__aeabi_ddiv+0x490>
    5b56:	e0b5      	b.n	5cc4 <__aeabi_ddiv+0x5fc>
    5b58:	1a19      	subs	r1, r3, r0
    5b5a:	4693      	mov	fp, r2
    5b5c:	e72a      	b.n	59b4 <__aeabi_ddiv+0x2ec>
    5b5e:	4589      	cmp	r9, r1
    5b60:	d800      	bhi.n	5b64 <__aeabi_ddiv+0x49c>
    5b62:	e6ad      	b.n	58c0 <__aeabi_ddiv+0x1f8>
    5b64:	4648      	mov	r0, r9
    5b66:	4646      	mov	r6, r8
    5b68:	4642      	mov	r2, r8
    5b6a:	0877      	lsrs	r7, r6, #1
    5b6c:	07d3      	lsls	r3, r2, #31
    5b6e:	0846      	lsrs	r6, r0, #1
    5b70:	07c0      	lsls	r0, r0, #31
    5b72:	431e      	orrs	r6, r3
    5b74:	4681      	mov	r9, r0
    5b76:	e6aa      	b.n	58ce <__aeabi_ddiv+0x206>
    5b78:	4658      	mov	r0, fp
    5b7a:	4220      	tst	r0, r4
    5b7c:	d112      	bne.n	5ba4 <__aeabi_ddiv+0x4dc>
    5b7e:	4304      	orrs	r4, r0
    5b80:	0324      	lsls	r4, r4, #12
    5b82:	1c2a      	adds	r2, r5, #0
    5b84:	0b24      	lsrs	r4, r4, #12
    5b86:	4689      	mov	r9, r1
    5b88:	4d5c      	ldr	r5, [pc, #368]	; (5cfc <__aeabi_ddiv+0x634>)
    5b8a:	e665      	b.n	5858 <__aeabi_ddiv+0x190>
    5b8c:	42a3      	cmp	r3, r4
    5b8e:	d1e3      	bne.n	5b58 <__aeabi_ddiv+0x490>
    5b90:	9f00      	ldr	r7, [sp, #0]
    5b92:	454f      	cmp	r7, r9
    5b94:	d9db      	bls.n	5b4e <__aeabi_ddiv+0x486>
    5b96:	1a21      	subs	r1, r4, r0
    5b98:	4693      	mov	fp, r2
    5b9a:	e70b      	b.n	59b4 <__aeabi_ddiv+0x2ec>
    5b9c:	1c17      	adds	r7, r2, #0
    5b9e:	e6dd      	b.n	595c <__aeabi_ddiv+0x294>
    5ba0:	469b      	mov	fp, r3
    5ba2:	e6bc      	b.n	591e <__aeabi_ddiv+0x256>
    5ba4:	433c      	orrs	r4, r7
    5ba6:	0324      	lsls	r4, r4, #12
    5ba8:	0b24      	lsrs	r4, r4, #12
    5baa:	9a00      	ldr	r2, [sp, #0]
    5bac:	4d53      	ldr	r5, [pc, #332]	; (5cfc <__aeabi_ddiv+0x634>)
    5bae:	e653      	b.n	5858 <__aeabi_ddiv+0x190>
    5bb0:	42b2      	cmp	r2, r6
    5bb2:	d859      	bhi.n	5c68 <__aeabi_ddiv+0x5a0>
    5bb4:	d100      	bne.n	5bb8 <__aeabi_ddiv+0x4f0>
    5bb6:	e08a      	b.n	5cce <__aeabi_ddiv+0x606>
    5bb8:	1c01      	adds	r1, r0, #0
    5bba:	e762      	b.n	5a82 <__aeabi_ddiv+0x3ba>
    5bbc:	465f      	mov	r7, fp
    5bbe:	08c9      	lsrs	r1, r1, #3
    5bc0:	077b      	lsls	r3, r7, #29
    5bc2:	9e03      	ldr	r6, [sp, #12]
    5bc4:	430b      	orrs	r3, r1
    5bc6:	027c      	lsls	r4, r7, #9
    5bc8:	056d      	lsls	r5, r5, #21
    5bca:	2201      	movs	r2, #1
    5bcc:	4699      	mov	r9, r3
    5bce:	0b24      	lsrs	r4, r4, #12
    5bd0:	0d6d      	lsrs	r5, r5, #21
    5bd2:	4032      	ands	r2, r6
    5bd4:	e640      	b.n	5858 <__aeabi_ddiv+0x190>
    5bd6:	4b4a      	ldr	r3, [pc, #296]	; (5d00 <__aeabi_ddiv+0x638>)
    5bd8:	9f04      	ldr	r7, [sp, #16]
    5bda:	1bdb      	subs	r3, r3, r7
    5bdc:	2b38      	cmp	r3, #56	; 0x38
    5bde:	dd10      	ble.n	5c02 <__aeabi_ddiv+0x53a>
    5be0:	9c03      	ldr	r4, [sp, #12]
    5be2:	2201      	movs	r2, #1
    5be4:	4022      	ands	r2, r4
    5be6:	2400      	movs	r4, #0
    5be8:	2500      	movs	r5, #0
    5bea:	46a1      	mov	r9, r4
    5bec:	e634      	b.n	5858 <__aeabi_ddiv+0x190>
    5bee:	2101      	movs	r1, #1
    5bf0:	4249      	negs	r1, r1
    5bf2:	e748      	b.n	5a86 <__aeabi_ddiv+0x3be>
    5bf4:	9302      	str	r3, [sp, #8]
    5bf6:	e704      	b.n	5a02 <__aeabi_ddiv+0x33a>
    5bf8:	1c1f      	adds	r7, r3, #0
    5bfa:	e721      	b.n	5a40 <__aeabi_ddiv+0x378>
    5bfc:	9c01      	ldr	r4, [sp, #4]
    5bfe:	9403      	str	r4, [sp, #12]
    5c00:	e741      	b.n	5a86 <__aeabi_ddiv+0x3be>
    5c02:	2b1f      	cmp	r3, #31
    5c04:	dc40      	bgt.n	5c88 <__aeabi_ddiv+0x5c0>
    5c06:	483f      	ldr	r0, [pc, #252]	; (5d04 <__aeabi_ddiv+0x63c>)
    5c08:	9f04      	ldr	r7, [sp, #16]
    5c0a:	1c0c      	adds	r4, r1, #0
    5c0c:	183a      	adds	r2, r7, r0
    5c0e:	4658      	mov	r0, fp
    5c10:	4091      	lsls	r1, r2
    5c12:	40dc      	lsrs	r4, r3
    5c14:	4090      	lsls	r0, r2
    5c16:	4320      	orrs	r0, r4
    5c18:	1c0a      	adds	r2, r1, #0
    5c1a:	1e51      	subs	r1, r2, #1
    5c1c:	418a      	sbcs	r2, r1
    5c1e:	1c01      	adds	r1, r0, #0
    5c20:	4311      	orrs	r1, r2
    5c22:	465a      	mov	r2, fp
    5c24:	40da      	lsrs	r2, r3
    5c26:	1c13      	adds	r3, r2, #0
    5c28:	0748      	lsls	r0, r1, #29
    5c2a:	d009      	beq.n	5c40 <__aeabi_ddiv+0x578>
    5c2c:	220f      	movs	r2, #15
    5c2e:	400a      	ands	r2, r1
    5c30:	2a04      	cmp	r2, #4
    5c32:	d005      	beq.n	5c40 <__aeabi_ddiv+0x578>
    5c34:	1d0a      	adds	r2, r1, #4
    5c36:	428a      	cmp	r2, r1
    5c38:	4189      	sbcs	r1, r1
    5c3a:	4249      	negs	r1, r1
    5c3c:	185b      	adds	r3, r3, r1
    5c3e:	1c11      	adds	r1, r2, #0
    5c40:	021a      	lsls	r2, r3, #8
    5c42:	d534      	bpl.n	5cae <__aeabi_ddiv+0x5e6>
    5c44:	9c03      	ldr	r4, [sp, #12]
    5c46:	2201      	movs	r2, #1
    5c48:	4022      	ands	r2, r4
    5c4a:	2400      	movs	r4, #0
    5c4c:	2501      	movs	r5, #1
    5c4e:	46a1      	mov	r9, r4
    5c50:	e602      	b.n	5858 <__aeabi_ddiv+0x190>
    5c52:	9f00      	ldr	r7, [sp, #0]
    5c54:	2102      	movs	r1, #2
    5c56:	4249      	negs	r1, r1
    5c58:	44b9      	add	r9, r7
    5c5a:	448b      	add	fp, r1
    5c5c:	45b9      	cmp	r9, r7
    5c5e:	4189      	sbcs	r1, r1
    5c60:	4249      	negs	r1, r1
    5c62:	1909      	adds	r1, r1, r4
    5c64:	18cb      	adds	r3, r1, r3
    5c66:	e6a4      	b.n	59b2 <__aeabi_ddiv+0x2ea>
    5c68:	9d00      	ldr	r5, [sp, #0]
    5c6a:	1e88      	subs	r0, r1, #2
    5c6c:	0069      	lsls	r1, r5, #1
    5c6e:	42a9      	cmp	r1, r5
    5c70:	41ad      	sbcs	r5, r5
    5c72:	426d      	negs	r5, r5
    5c74:	192c      	adds	r4, r5, r4
    5c76:	1936      	adds	r6, r6, r4
    5c78:	9100      	str	r1, [sp, #0]
    5c7a:	e73a      	b.n	5af2 <__aeabi_ddiv+0x42a>
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d000      	beq.n	5c82 <__aeabi_ddiv+0x5ba>
    5c80:	e733      	b.n	5aea <__aeabi_ddiv+0x422>
    5c82:	2400      	movs	r4, #0
    5c84:	9400      	str	r4, [sp, #0]
    5c86:	e737      	b.n	5af8 <__aeabi_ddiv+0x430>
    5c88:	4a1f      	ldr	r2, [pc, #124]	; (5d08 <__aeabi_ddiv+0x640>)
    5c8a:	9c04      	ldr	r4, [sp, #16]
    5c8c:	465d      	mov	r5, fp
    5c8e:	1b12      	subs	r2, r2, r4
    5c90:	40d5      	lsrs	r5, r2
    5c92:	1c2a      	adds	r2, r5, #0
    5c94:	2b20      	cmp	r3, #32
    5c96:	d01f      	beq.n	5cd8 <__aeabi_ddiv+0x610>
    5c98:	4e1c      	ldr	r6, [pc, #112]	; (5d0c <__aeabi_ddiv+0x644>)
    5c9a:	465f      	mov	r7, fp
    5c9c:	19a3      	adds	r3, r4, r6
    5c9e:	409f      	lsls	r7, r3
    5ca0:	1c3b      	adds	r3, r7, #0
    5ca2:	4319      	orrs	r1, r3
    5ca4:	1e4b      	subs	r3, r1, #1
    5ca6:	4199      	sbcs	r1, r3
    5ca8:	4311      	orrs	r1, r2
    5caa:	2300      	movs	r3, #0
    5cac:	e7bc      	b.n	5c28 <__aeabi_ddiv+0x560>
    5cae:	075a      	lsls	r2, r3, #29
    5cb0:	08c9      	lsrs	r1, r1, #3
    5cb2:	430a      	orrs	r2, r1
    5cb4:	9f03      	ldr	r7, [sp, #12]
    5cb6:	4691      	mov	r9, r2
    5cb8:	025b      	lsls	r3, r3, #9
    5cba:	2201      	movs	r2, #1
    5cbc:	0b1c      	lsrs	r4, r3, #12
    5cbe:	403a      	ands	r2, r7
    5cc0:	2500      	movs	r5, #0
    5cc2:	e5c9      	b.n	5858 <__aeabi_ddiv+0x190>
    5cc4:	454e      	cmp	r6, r9
    5cc6:	d8c4      	bhi.n	5c52 <__aeabi_ddiv+0x58a>
    5cc8:	4693      	mov	fp, r2
    5cca:	2100      	movs	r1, #0
    5ccc:	e672      	b.n	59b4 <__aeabi_ddiv+0x2ec>
    5cce:	9f00      	ldr	r7, [sp, #0]
    5cd0:	429f      	cmp	r7, r3
    5cd2:	d3c9      	bcc.n	5c68 <__aeabi_ddiv+0x5a0>
    5cd4:	1c01      	adds	r1, r0, #0
    5cd6:	e70f      	b.n	5af8 <__aeabi_ddiv+0x430>
    5cd8:	2300      	movs	r3, #0
    5cda:	e7e2      	b.n	5ca2 <__aeabi_ddiv+0x5da>
    5cdc:	2480      	movs	r4, #128	; 0x80
    5cde:	0324      	lsls	r4, r4, #12
    5ce0:	465f      	mov	r7, fp
    5ce2:	433c      	orrs	r4, r7
    5ce4:	0324      	lsls	r4, r4, #12
    5ce6:	0b24      	lsrs	r4, r4, #12
    5ce8:	9a01      	ldr	r2, [sp, #4]
    5cea:	4689      	mov	r9, r1
    5cec:	4d03      	ldr	r5, [pc, #12]	; (5cfc <__aeabi_ddiv+0x634>)
    5cee:	e5b3      	b.n	5858 <__aeabi_ddiv+0x190>
    5cf0:	000003ff 	.word	0x000003ff
    5cf4:	feffffff 	.word	0xfeffffff
    5cf8:	000007fe 	.word	0x000007fe
    5cfc:	000007ff 	.word	0x000007ff
    5d00:	fffffc02 	.word	0xfffffc02
    5d04:	0000041e 	.word	0x0000041e
    5d08:	fffffbe2 	.word	0xfffffbe2
    5d0c:	0000043e 	.word	0x0000043e

00005d10 <__eqdf2>:
    5d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d12:	465f      	mov	r7, fp
    5d14:	4656      	mov	r6, sl
    5d16:	464d      	mov	r5, r9
    5d18:	4644      	mov	r4, r8
    5d1a:	b4f0      	push	{r4, r5, r6, r7}
    5d1c:	1c0d      	adds	r5, r1, #0
    5d1e:	1c04      	adds	r4, r0, #0
    5d20:	4680      	mov	r8, r0
    5d22:	0fe8      	lsrs	r0, r5, #31
    5d24:	4681      	mov	r9, r0
    5d26:	0318      	lsls	r0, r3, #12
    5d28:	030f      	lsls	r7, r1, #12
    5d2a:	0b00      	lsrs	r0, r0, #12
    5d2c:	0b3f      	lsrs	r7, r7, #12
    5d2e:	b083      	sub	sp, #12
    5d30:	4684      	mov	ip, r0
    5d32:	481b      	ldr	r0, [pc, #108]	; (5da0 <__eqdf2+0x90>)
    5d34:	9700      	str	r7, [sp, #0]
    5d36:	0049      	lsls	r1, r1, #1
    5d38:	005e      	lsls	r6, r3, #1
    5d3a:	0fdf      	lsrs	r7, r3, #31
    5d3c:	0d49      	lsrs	r1, r1, #21
    5d3e:	4692      	mov	sl, r2
    5d40:	0d76      	lsrs	r6, r6, #21
    5d42:	46bb      	mov	fp, r7
    5d44:	4281      	cmp	r1, r0
    5d46:	d00c      	beq.n	5d62 <__eqdf2+0x52>
    5d48:	4815      	ldr	r0, [pc, #84]	; (5da0 <__eqdf2+0x90>)
    5d4a:	4286      	cmp	r6, r0
    5d4c:	d010      	beq.n	5d70 <__eqdf2+0x60>
    5d4e:	2001      	movs	r0, #1
    5d50:	42b1      	cmp	r1, r6
    5d52:	d015      	beq.n	5d80 <__eqdf2+0x70>
    5d54:	b003      	add	sp, #12
    5d56:	bc3c      	pop	{r2, r3, r4, r5}
    5d58:	4690      	mov	r8, r2
    5d5a:	4699      	mov	r9, r3
    5d5c:	46a2      	mov	sl, r4
    5d5e:	46ab      	mov	fp, r5
    5d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d62:	9f00      	ldr	r7, [sp, #0]
    5d64:	2001      	movs	r0, #1
    5d66:	4327      	orrs	r7, r4
    5d68:	d1f4      	bne.n	5d54 <__eqdf2+0x44>
    5d6a:	480d      	ldr	r0, [pc, #52]	; (5da0 <__eqdf2+0x90>)
    5d6c:	4286      	cmp	r6, r0
    5d6e:	d1ee      	bne.n	5d4e <__eqdf2+0x3e>
    5d70:	4660      	mov	r0, ip
    5d72:	4302      	orrs	r2, r0
    5d74:	2001      	movs	r0, #1
    5d76:	2a00      	cmp	r2, #0
    5d78:	d1ec      	bne.n	5d54 <__eqdf2+0x44>
    5d7a:	2001      	movs	r0, #1
    5d7c:	42b1      	cmp	r1, r6
    5d7e:	d1e9      	bne.n	5d54 <__eqdf2+0x44>
    5d80:	9b00      	ldr	r3, [sp, #0]
    5d82:	4563      	cmp	r3, ip
    5d84:	d1e6      	bne.n	5d54 <__eqdf2+0x44>
    5d86:	45d0      	cmp	r8, sl
    5d88:	d1e4      	bne.n	5d54 <__eqdf2+0x44>
    5d8a:	45d9      	cmp	r9, fp
    5d8c:	d006      	beq.n	5d9c <__eqdf2+0x8c>
    5d8e:	2900      	cmp	r1, #0
    5d90:	d1e0      	bne.n	5d54 <__eqdf2+0x44>
    5d92:	431c      	orrs	r4, r3
    5d94:	1c20      	adds	r0, r4, #0
    5d96:	1e44      	subs	r4, r0, #1
    5d98:	41a0      	sbcs	r0, r4
    5d9a:	e7db      	b.n	5d54 <__eqdf2+0x44>
    5d9c:	2000      	movs	r0, #0
    5d9e:	e7d9      	b.n	5d54 <__eqdf2+0x44>
    5da0:	000007ff 	.word	0x000007ff

00005da4 <__gedf2>:
    5da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5da6:	465f      	mov	r7, fp
    5da8:	4656      	mov	r6, sl
    5daa:	464d      	mov	r5, r9
    5dac:	4644      	mov	r4, r8
    5dae:	b4f0      	push	{r4, r5, r6, r7}
    5db0:	0fcd      	lsrs	r5, r1, #31
    5db2:	0fde      	lsrs	r6, r3, #31
    5db4:	46ac      	mov	ip, r5
    5db6:	031d      	lsls	r5, r3, #12
    5db8:	0b2d      	lsrs	r5, r5, #12
    5dba:	46b1      	mov	r9, r6
    5dbc:	4e37      	ldr	r6, [pc, #220]	; (5e9c <__gedf2+0xf8>)
    5dbe:	030f      	lsls	r7, r1, #12
    5dc0:	004c      	lsls	r4, r1, #1
    5dc2:	46ab      	mov	fp, r5
    5dc4:	005d      	lsls	r5, r3, #1
    5dc6:	4680      	mov	r8, r0
    5dc8:	0b3f      	lsrs	r7, r7, #12
    5dca:	0d64      	lsrs	r4, r4, #21
    5dcc:	4692      	mov	sl, r2
    5dce:	0d6d      	lsrs	r5, r5, #21
    5dd0:	42b4      	cmp	r4, r6
    5dd2:	d032      	beq.n	5e3a <__gedf2+0x96>
    5dd4:	4e31      	ldr	r6, [pc, #196]	; (5e9c <__gedf2+0xf8>)
    5dd6:	42b5      	cmp	r5, r6
    5dd8:	d035      	beq.n	5e46 <__gedf2+0xa2>
    5dda:	2c00      	cmp	r4, #0
    5ddc:	d10e      	bne.n	5dfc <__gedf2+0x58>
    5dde:	4338      	orrs	r0, r7
    5de0:	4241      	negs	r1, r0
    5de2:	4141      	adcs	r1, r0
    5de4:	1c08      	adds	r0, r1, #0
    5de6:	2d00      	cmp	r5, #0
    5de8:	d00b      	beq.n	5e02 <__gedf2+0x5e>
    5dea:	2900      	cmp	r1, #0
    5dec:	d119      	bne.n	5e22 <__gedf2+0x7e>
    5dee:	45cc      	cmp	ip, r9
    5df0:	d02d      	beq.n	5e4e <__gedf2+0xaa>
    5df2:	4665      	mov	r5, ip
    5df4:	4268      	negs	r0, r5
    5df6:	2301      	movs	r3, #1
    5df8:	4318      	orrs	r0, r3
    5dfa:	e018      	b.n	5e2e <__gedf2+0x8a>
    5dfc:	2d00      	cmp	r5, #0
    5dfe:	d1f6      	bne.n	5dee <__gedf2+0x4a>
    5e00:	1c28      	adds	r0, r5, #0
    5e02:	4659      	mov	r1, fp
    5e04:	430a      	orrs	r2, r1
    5e06:	4253      	negs	r3, r2
    5e08:	4153      	adcs	r3, r2
    5e0a:	2800      	cmp	r0, #0
    5e0c:	d106      	bne.n	5e1c <__gedf2+0x78>
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d0ed      	beq.n	5dee <__gedf2+0x4a>
    5e12:	4663      	mov	r3, ip
    5e14:	4258      	negs	r0, r3
    5e16:	2301      	movs	r3, #1
    5e18:	4318      	orrs	r0, r3
    5e1a:	e008      	b.n	5e2e <__gedf2+0x8a>
    5e1c:	2000      	movs	r0, #0
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d105      	bne.n	5e2e <__gedf2+0x8a>
    5e22:	464a      	mov	r2, r9
    5e24:	4250      	negs	r0, r2
    5e26:	4150      	adcs	r0, r2
    5e28:	4240      	negs	r0, r0
    5e2a:	2301      	movs	r3, #1
    5e2c:	4318      	orrs	r0, r3
    5e2e:	bc3c      	pop	{r2, r3, r4, r5}
    5e30:	4690      	mov	r8, r2
    5e32:	4699      	mov	r9, r3
    5e34:	46a2      	mov	sl, r4
    5e36:	46ab      	mov	fp, r5
    5e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e3a:	1c3e      	adds	r6, r7, #0
    5e3c:	4306      	orrs	r6, r0
    5e3e:	d0c9      	beq.n	5dd4 <__gedf2+0x30>
    5e40:	2002      	movs	r0, #2
    5e42:	4240      	negs	r0, r0
    5e44:	e7f3      	b.n	5e2e <__gedf2+0x8a>
    5e46:	465e      	mov	r6, fp
    5e48:	4316      	orrs	r6, r2
    5e4a:	d0c6      	beq.n	5dda <__gedf2+0x36>
    5e4c:	e7f8      	b.n	5e40 <__gedf2+0x9c>
    5e4e:	42ac      	cmp	r4, r5
    5e50:	dc07      	bgt.n	5e62 <__gedf2+0xbe>
    5e52:	da0b      	bge.n	5e6c <__gedf2+0xc8>
    5e54:	4661      	mov	r1, ip
    5e56:	4248      	negs	r0, r1
    5e58:	4148      	adcs	r0, r1
    5e5a:	4240      	negs	r0, r0
    5e5c:	2301      	movs	r3, #1
    5e5e:	4318      	orrs	r0, r3
    5e60:	e7e5      	b.n	5e2e <__gedf2+0x8a>
    5e62:	4666      	mov	r6, ip
    5e64:	4270      	negs	r0, r6
    5e66:	2301      	movs	r3, #1
    5e68:	4318      	orrs	r0, r3
    5e6a:	e7e0      	b.n	5e2e <__gedf2+0x8a>
    5e6c:	455f      	cmp	r7, fp
    5e6e:	d80a      	bhi.n	5e86 <__gedf2+0xe2>
    5e70:	d00e      	beq.n	5e90 <__gedf2+0xec>
    5e72:	2000      	movs	r0, #0
    5e74:	455f      	cmp	r7, fp
    5e76:	d2da      	bcs.n	5e2e <__gedf2+0x8a>
    5e78:	4665      	mov	r5, ip
    5e7a:	4268      	negs	r0, r5
    5e7c:	4168      	adcs	r0, r5
    5e7e:	4240      	negs	r0, r0
    5e80:	2301      	movs	r3, #1
    5e82:	4318      	orrs	r0, r3
    5e84:	e7d3      	b.n	5e2e <__gedf2+0x8a>
    5e86:	4662      	mov	r2, ip
    5e88:	4250      	negs	r0, r2
    5e8a:	2301      	movs	r3, #1
    5e8c:	4318      	orrs	r0, r3
    5e8e:	e7ce      	b.n	5e2e <__gedf2+0x8a>
    5e90:	45d0      	cmp	r8, sl
    5e92:	d8f8      	bhi.n	5e86 <__gedf2+0xe2>
    5e94:	2000      	movs	r0, #0
    5e96:	45d0      	cmp	r8, sl
    5e98:	d3ee      	bcc.n	5e78 <__gedf2+0xd4>
    5e9a:	e7c8      	b.n	5e2e <__gedf2+0x8a>
    5e9c:	000007ff 	.word	0x000007ff

00005ea0 <__ledf2>:
    5ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ea2:	4656      	mov	r6, sl
    5ea4:	464d      	mov	r5, r9
    5ea6:	4644      	mov	r4, r8
    5ea8:	465f      	mov	r7, fp
    5eaa:	b4f0      	push	{r4, r5, r6, r7}
    5eac:	1c0d      	adds	r5, r1, #0
    5eae:	b083      	sub	sp, #12
    5eb0:	1c04      	adds	r4, r0, #0
    5eb2:	9001      	str	r0, [sp, #4]
    5eb4:	0fe8      	lsrs	r0, r5, #31
    5eb6:	4681      	mov	r9, r0
    5eb8:	0318      	lsls	r0, r3, #12
    5eba:	030f      	lsls	r7, r1, #12
    5ebc:	0b00      	lsrs	r0, r0, #12
    5ebe:	0b3f      	lsrs	r7, r7, #12
    5ec0:	4684      	mov	ip, r0
    5ec2:	4835      	ldr	r0, [pc, #212]	; (5f98 <__ledf2+0xf8>)
    5ec4:	9700      	str	r7, [sp, #0]
    5ec6:	0049      	lsls	r1, r1, #1
    5ec8:	005e      	lsls	r6, r3, #1
    5eca:	0fdf      	lsrs	r7, r3, #31
    5ecc:	0d49      	lsrs	r1, r1, #21
    5ece:	4692      	mov	sl, r2
    5ed0:	0d76      	lsrs	r6, r6, #21
    5ed2:	46b8      	mov	r8, r7
    5ed4:	4281      	cmp	r1, r0
    5ed6:	d034      	beq.n	5f42 <__ledf2+0xa2>
    5ed8:	482f      	ldr	r0, [pc, #188]	; (5f98 <__ledf2+0xf8>)
    5eda:	4286      	cmp	r6, r0
    5edc:	d036      	beq.n	5f4c <__ledf2+0xac>
    5ede:	2900      	cmp	r1, #0
    5ee0:	d018      	beq.n	5f14 <__ledf2+0x74>
    5ee2:	2e00      	cmp	r6, #0
    5ee4:	d11f      	bne.n	5f26 <__ledf2+0x86>
    5ee6:	1c34      	adds	r4, r6, #0
    5ee8:	4667      	mov	r7, ip
    5eea:	433a      	orrs	r2, r7
    5eec:	4253      	negs	r3, r2
    5eee:	4153      	adcs	r3, r2
    5ef0:	2c00      	cmp	r4, #0
    5ef2:	d01f      	beq.n	5f34 <__ledf2+0x94>
    5ef4:	2000      	movs	r0, #0
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d105      	bne.n	5f06 <__ledf2+0x66>
    5efa:	4642      	mov	r2, r8
    5efc:	4250      	negs	r0, r2
    5efe:	4150      	adcs	r0, r2
    5f00:	4240      	negs	r0, r0
    5f02:	2301      	movs	r3, #1
    5f04:	4318      	orrs	r0, r3
    5f06:	b003      	add	sp, #12
    5f08:	bc3c      	pop	{r2, r3, r4, r5}
    5f0a:	4690      	mov	r8, r2
    5f0c:	4699      	mov	r9, r3
    5f0e:	46a2      	mov	sl, r4
    5f10:	46ab      	mov	fp, r5
    5f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f14:	9800      	ldr	r0, [sp, #0]
    5f16:	4304      	orrs	r4, r0
    5f18:	4260      	negs	r0, r4
    5f1a:	4160      	adcs	r0, r4
    5f1c:	1c04      	adds	r4, r0, #0
    5f1e:	2e00      	cmp	r6, #0
    5f20:	d0e2      	beq.n	5ee8 <__ledf2+0x48>
    5f22:	2800      	cmp	r0, #0
    5f24:	d1e9      	bne.n	5efa <__ledf2+0x5a>
    5f26:	45c1      	cmp	r9, r8
    5f28:	d015      	beq.n	5f56 <__ledf2+0xb6>
    5f2a:	464f      	mov	r7, r9
    5f2c:	4278      	negs	r0, r7
    5f2e:	2301      	movs	r3, #1
    5f30:	4318      	orrs	r0, r3
    5f32:	e7e8      	b.n	5f06 <__ledf2+0x66>
    5f34:	2b00      	cmp	r3, #0
    5f36:	d0f6      	beq.n	5f26 <__ledf2+0x86>
    5f38:	464b      	mov	r3, r9
    5f3a:	4258      	negs	r0, r3
    5f3c:	2301      	movs	r3, #1
    5f3e:	4318      	orrs	r0, r3
    5f40:	e7e1      	b.n	5f06 <__ledf2+0x66>
    5f42:	9f00      	ldr	r7, [sp, #0]
    5f44:	2002      	movs	r0, #2
    5f46:	4327      	orrs	r7, r4
    5f48:	d1dd      	bne.n	5f06 <__ledf2+0x66>
    5f4a:	e7c5      	b.n	5ed8 <__ledf2+0x38>
    5f4c:	4667      	mov	r7, ip
    5f4e:	2002      	movs	r0, #2
    5f50:	4317      	orrs	r7, r2
    5f52:	d1d8      	bne.n	5f06 <__ledf2+0x66>
    5f54:	e7c3      	b.n	5ede <__ledf2+0x3e>
    5f56:	42b1      	cmp	r1, r6
    5f58:	dd04      	ble.n	5f64 <__ledf2+0xc4>
    5f5a:	464a      	mov	r2, r9
    5f5c:	4250      	negs	r0, r2
    5f5e:	2301      	movs	r3, #1
    5f60:	4318      	orrs	r0, r3
    5f62:	e7d0      	b.n	5f06 <__ledf2+0x66>
    5f64:	42b1      	cmp	r1, r6
    5f66:	db07      	blt.n	5f78 <__ledf2+0xd8>
    5f68:	9800      	ldr	r0, [sp, #0]
    5f6a:	4560      	cmp	r0, ip
    5f6c:	d8e4      	bhi.n	5f38 <__ledf2+0x98>
    5f6e:	d00a      	beq.n	5f86 <__ledf2+0xe6>
    5f70:	9f00      	ldr	r7, [sp, #0]
    5f72:	2000      	movs	r0, #0
    5f74:	4567      	cmp	r7, ip
    5f76:	d2c6      	bcs.n	5f06 <__ledf2+0x66>
    5f78:	464f      	mov	r7, r9
    5f7a:	4278      	negs	r0, r7
    5f7c:	4178      	adcs	r0, r7
    5f7e:	4240      	negs	r0, r0
    5f80:	2301      	movs	r3, #1
    5f82:	4318      	orrs	r0, r3
    5f84:	e7bf      	b.n	5f06 <__ledf2+0x66>
    5f86:	9a01      	ldr	r2, [sp, #4]
    5f88:	4552      	cmp	r2, sl
    5f8a:	d8d5      	bhi.n	5f38 <__ledf2+0x98>
    5f8c:	9a01      	ldr	r2, [sp, #4]
    5f8e:	2000      	movs	r0, #0
    5f90:	4552      	cmp	r2, sl
    5f92:	d3f1      	bcc.n	5f78 <__ledf2+0xd8>
    5f94:	e7b7      	b.n	5f06 <__ledf2+0x66>
    5f96:	46c0      	nop			; (mov r8, r8)
    5f98:	000007ff 	.word	0x000007ff

00005f9c <__aeabi_dmul>:
    5f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f9e:	4656      	mov	r6, sl
    5fa0:	4644      	mov	r4, r8
    5fa2:	465f      	mov	r7, fp
    5fa4:	464d      	mov	r5, r9
    5fa6:	b4f0      	push	{r4, r5, r6, r7}
    5fa8:	1c1f      	adds	r7, r3, #0
    5faa:	030b      	lsls	r3, r1, #12
    5fac:	0b1b      	lsrs	r3, r3, #12
    5fae:	469a      	mov	sl, r3
    5fb0:	004b      	lsls	r3, r1, #1
    5fb2:	b087      	sub	sp, #28
    5fb4:	1c04      	adds	r4, r0, #0
    5fb6:	4680      	mov	r8, r0
    5fb8:	0d5b      	lsrs	r3, r3, #21
    5fba:	0fc8      	lsrs	r0, r1, #31
    5fbc:	1c16      	adds	r6, r2, #0
    5fbe:	9302      	str	r3, [sp, #8]
    5fc0:	4681      	mov	r9, r0
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d068      	beq.n	6098 <__aeabi_dmul+0xfc>
    5fc6:	4b69      	ldr	r3, [pc, #420]	; (616c <__aeabi_dmul+0x1d0>)
    5fc8:	9902      	ldr	r1, [sp, #8]
    5fca:	4299      	cmp	r1, r3
    5fcc:	d032      	beq.n	6034 <__aeabi_dmul+0x98>
    5fce:	2280      	movs	r2, #128	; 0x80
    5fd0:	4653      	mov	r3, sl
    5fd2:	0352      	lsls	r2, r2, #13
    5fd4:	431a      	orrs	r2, r3
    5fd6:	00d2      	lsls	r2, r2, #3
    5fd8:	0f63      	lsrs	r3, r4, #29
    5fda:	431a      	orrs	r2, r3
    5fdc:	4692      	mov	sl, r2
    5fde:	4a64      	ldr	r2, [pc, #400]	; (6170 <__aeabi_dmul+0x1d4>)
    5fe0:	00e0      	lsls	r0, r4, #3
    5fe2:	1889      	adds	r1, r1, r2
    5fe4:	4680      	mov	r8, r0
    5fe6:	9102      	str	r1, [sp, #8]
    5fe8:	2400      	movs	r4, #0
    5fea:	2500      	movs	r5, #0
    5fec:	033b      	lsls	r3, r7, #12
    5fee:	0b1b      	lsrs	r3, r3, #12
    5ff0:	469b      	mov	fp, r3
    5ff2:	0078      	lsls	r0, r7, #1
    5ff4:	0ffb      	lsrs	r3, r7, #31
    5ff6:	1c32      	adds	r2, r6, #0
    5ff8:	0d40      	lsrs	r0, r0, #21
    5ffa:	9303      	str	r3, [sp, #12]
    5ffc:	d100      	bne.n	6000 <__aeabi_dmul+0x64>
    5ffe:	e075      	b.n	60ec <__aeabi_dmul+0x150>
    6000:	4b5a      	ldr	r3, [pc, #360]	; (616c <__aeabi_dmul+0x1d0>)
    6002:	4298      	cmp	r0, r3
    6004:	d069      	beq.n	60da <__aeabi_dmul+0x13e>
    6006:	2280      	movs	r2, #128	; 0x80
    6008:	4659      	mov	r1, fp
    600a:	0352      	lsls	r2, r2, #13
    600c:	430a      	orrs	r2, r1
    600e:	0f73      	lsrs	r3, r6, #29
    6010:	00d2      	lsls	r2, r2, #3
    6012:	431a      	orrs	r2, r3
    6014:	4b56      	ldr	r3, [pc, #344]	; (6170 <__aeabi_dmul+0x1d4>)
    6016:	4693      	mov	fp, r2
    6018:	18c0      	adds	r0, r0, r3
    601a:	00f2      	lsls	r2, r6, #3
    601c:	2300      	movs	r3, #0
    601e:	9903      	ldr	r1, [sp, #12]
    6020:	464e      	mov	r6, r9
    6022:	4071      	eors	r1, r6
    6024:	431c      	orrs	r4, r3
    6026:	2c0f      	cmp	r4, #15
    6028:	d900      	bls.n	602c <__aeabi_dmul+0x90>
    602a:	e0a9      	b.n	6180 <__aeabi_dmul+0x1e4>
    602c:	4e51      	ldr	r6, [pc, #324]	; (6174 <__aeabi_dmul+0x1d8>)
    602e:	00a4      	lsls	r4, r4, #2
    6030:	5934      	ldr	r4, [r6, r4]
    6032:	46a7      	mov	pc, r4
    6034:	4653      	mov	r3, sl
    6036:	431c      	orrs	r4, r3
    6038:	d000      	beq.n	603c <__aeabi_dmul+0xa0>
    603a:	e087      	b.n	614c <__aeabi_dmul+0x1b0>
    603c:	2500      	movs	r5, #0
    603e:	46aa      	mov	sl, r5
    6040:	46a8      	mov	r8, r5
    6042:	2408      	movs	r4, #8
    6044:	2502      	movs	r5, #2
    6046:	e7d1      	b.n	5fec <__aeabi_dmul+0x50>
    6048:	4649      	mov	r1, r9
    604a:	2d02      	cmp	r5, #2
    604c:	d06c      	beq.n	6128 <__aeabi_dmul+0x18c>
    604e:	2d03      	cmp	r5, #3
    6050:	d100      	bne.n	6054 <__aeabi_dmul+0xb8>
    6052:	e217      	b.n	6484 <__aeabi_dmul+0x4e8>
    6054:	2d01      	cmp	r5, #1
    6056:	d000      	beq.n	605a <__aeabi_dmul+0xbe>
    6058:	e158      	b.n	630c <__aeabi_dmul+0x370>
    605a:	400d      	ands	r5, r1
    605c:	b2ed      	uxtb	r5, r5
    605e:	2400      	movs	r4, #0
    6060:	46a9      	mov	r9, r5
    6062:	2300      	movs	r3, #0
    6064:	46a0      	mov	r8, r4
    6066:	2000      	movs	r0, #0
    6068:	2100      	movs	r1, #0
    606a:	0325      	lsls	r5, r4, #12
    606c:	0d0a      	lsrs	r2, r1, #20
    606e:	051c      	lsls	r4, r3, #20
    6070:	0b2d      	lsrs	r5, r5, #12
    6072:	0512      	lsls	r2, r2, #20
    6074:	4b40      	ldr	r3, [pc, #256]	; (6178 <__aeabi_dmul+0x1dc>)
    6076:	432a      	orrs	r2, r5
    6078:	4013      	ands	r3, r2
    607a:	4323      	orrs	r3, r4
    607c:	005b      	lsls	r3, r3, #1
    607e:	464c      	mov	r4, r9
    6080:	085b      	lsrs	r3, r3, #1
    6082:	07e2      	lsls	r2, r4, #31
    6084:	1c19      	adds	r1, r3, #0
    6086:	4640      	mov	r0, r8
    6088:	4311      	orrs	r1, r2
    608a:	b007      	add	sp, #28
    608c:	bc3c      	pop	{r2, r3, r4, r5}
    608e:	4690      	mov	r8, r2
    6090:	4699      	mov	r9, r3
    6092:	46a2      	mov	sl, r4
    6094:	46ab      	mov	fp, r5
    6096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6098:	4653      	mov	r3, sl
    609a:	4323      	orrs	r3, r4
    609c:	d050      	beq.n	6140 <__aeabi_dmul+0x1a4>
    609e:	4653      	mov	r3, sl
    60a0:	2b00      	cmp	r3, #0
    60a2:	d100      	bne.n	60a6 <__aeabi_dmul+0x10a>
    60a4:	e184      	b.n	63b0 <__aeabi_dmul+0x414>
    60a6:	4650      	mov	r0, sl
    60a8:	f000 fe34 	bl	6d14 <__clzsi2>
    60ac:	1e03      	subs	r3, r0, #0
    60ae:	2b27      	cmp	r3, #39	; 0x27
    60b0:	dd00      	ble.n	60b4 <__aeabi_dmul+0x118>
    60b2:	e176      	b.n	63a2 <__aeabi_dmul+0x406>
    60b4:	2128      	movs	r1, #40	; 0x28
    60b6:	1a0d      	subs	r5, r1, r0
    60b8:	1c21      	adds	r1, r4, #0
    60ba:	3b08      	subs	r3, #8
    60bc:	4652      	mov	r2, sl
    60be:	40e9      	lsrs	r1, r5
    60c0:	409a      	lsls	r2, r3
    60c2:	1c0d      	adds	r5, r1, #0
    60c4:	4315      	orrs	r5, r2
    60c6:	1c22      	adds	r2, r4, #0
    60c8:	409a      	lsls	r2, r3
    60ca:	46aa      	mov	sl, r5
    60cc:	4690      	mov	r8, r2
    60ce:	4b2b      	ldr	r3, [pc, #172]	; (617c <__aeabi_dmul+0x1e0>)
    60d0:	2400      	movs	r4, #0
    60d2:	1a1b      	subs	r3, r3, r0
    60d4:	9302      	str	r3, [sp, #8]
    60d6:	2500      	movs	r5, #0
    60d8:	e788      	b.n	5fec <__aeabi_dmul+0x50>
    60da:	465b      	mov	r3, fp
    60dc:	431e      	orrs	r6, r3
    60de:	2303      	movs	r3, #3
    60e0:	2e00      	cmp	r6, #0
    60e2:	d19c      	bne.n	601e <__aeabi_dmul+0x82>
    60e4:	46b3      	mov	fp, r6
    60e6:	2200      	movs	r2, #0
    60e8:	2302      	movs	r3, #2
    60ea:	e798      	b.n	601e <__aeabi_dmul+0x82>
    60ec:	465b      	mov	r3, fp
    60ee:	4333      	orrs	r3, r6
    60f0:	d021      	beq.n	6136 <__aeabi_dmul+0x19a>
    60f2:	4658      	mov	r0, fp
    60f4:	2800      	cmp	r0, #0
    60f6:	d100      	bne.n	60fa <__aeabi_dmul+0x15e>
    60f8:	e14e      	b.n	6398 <__aeabi_dmul+0x3fc>
    60fa:	f000 fe0b 	bl	6d14 <__clzsi2>
    60fe:	2827      	cmp	r0, #39	; 0x27
    6100:	dd00      	ble.n	6104 <__aeabi_dmul+0x168>
    6102:	e142      	b.n	638a <__aeabi_dmul+0x3ee>
    6104:	2128      	movs	r1, #40	; 0x28
    6106:	1a0f      	subs	r7, r1, r0
    6108:	1c02      	adds	r2, r0, #0
    610a:	1c31      	adds	r1, r6, #0
    610c:	3a08      	subs	r2, #8
    610e:	465b      	mov	r3, fp
    6110:	40f9      	lsrs	r1, r7
    6112:	4093      	lsls	r3, r2
    6114:	1c0f      	adds	r7, r1, #0
    6116:	431f      	orrs	r7, r3
    6118:	1c33      	adds	r3, r6, #0
    611a:	4093      	lsls	r3, r2
    611c:	46bb      	mov	fp, r7
    611e:	1c1a      	adds	r2, r3, #0
    6120:	4b16      	ldr	r3, [pc, #88]	; (617c <__aeabi_dmul+0x1e0>)
    6122:	1a18      	subs	r0, r3, r0
    6124:	2300      	movs	r3, #0
    6126:	e77a      	b.n	601e <__aeabi_dmul+0x82>
    6128:	2301      	movs	r3, #1
    612a:	400b      	ands	r3, r1
    612c:	2400      	movs	r4, #0
    612e:	4699      	mov	r9, r3
    6130:	46a0      	mov	r8, r4
    6132:	4b0e      	ldr	r3, [pc, #56]	; (616c <__aeabi_dmul+0x1d0>)
    6134:	e797      	b.n	6066 <__aeabi_dmul+0xca>
    6136:	2700      	movs	r7, #0
    6138:	46bb      	mov	fp, r7
    613a:	2200      	movs	r2, #0
    613c:	2301      	movs	r3, #1
    613e:	e76e      	b.n	601e <__aeabi_dmul+0x82>
    6140:	2100      	movs	r1, #0
    6142:	2404      	movs	r4, #4
    6144:	468a      	mov	sl, r1
    6146:	4688      	mov	r8, r1
    6148:	2501      	movs	r5, #1
    614a:	e74f      	b.n	5fec <__aeabi_dmul+0x50>
    614c:	240c      	movs	r4, #12
    614e:	2503      	movs	r5, #3
    6150:	e74c      	b.n	5fec <__aeabi_dmul+0x50>
    6152:	2500      	movs	r5, #0
    6154:	2480      	movs	r4, #128	; 0x80
    6156:	46a9      	mov	r9, r5
    6158:	0324      	lsls	r4, r4, #12
    615a:	46a8      	mov	r8, r5
    615c:	4b03      	ldr	r3, [pc, #12]	; (616c <__aeabi_dmul+0x1d0>)
    615e:	e782      	b.n	6066 <__aeabi_dmul+0xca>
    6160:	46da      	mov	sl, fp
    6162:	4690      	mov	r8, r2
    6164:	9903      	ldr	r1, [sp, #12]
    6166:	1c1d      	adds	r5, r3, #0
    6168:	e76f      	b.n	604a <__aeabi_dmul+0xae>
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	000007ff 	.word	0x000007ff
    6170:	fffffc01 	.word	0xfffffc01
    6174:	00007134 	.word	0x00007134
    6178:	800fffff 	.word	0x800fffff
    617c:	fffffc0d 	.word	0xfffffc0d
    6180:	9f02      	ldr	r7, [sp, #8]
    6182:	0c16      	lsrs	r6, r2, #16
    6184:	1838      	adds	r0, r7, r0
    6186:	9004      	str	r0, [sp, #16]
    6188:	4640      	mov	r0, r8
    618a:	0c07      	lsrs	r7, r0, #16
    618c:	0400      	lsls	r0, r0, #16
    618e:	0c00      	lsrs	r0, r0, #16
    6190:	0412      	lsls	r2, r2, #16
    6192:	0c12      	lsrs	r2, r2, #16
    6194:	1c03      	adds	r3, r0, #0
    6196:	4353      	muls	r3, r2
    6198:	1c04      	adds	r4, r0, #0
    619a:	1c3d      	adds	r5, r7, #0
    619c:	4374      	muls	r4, r6
    619e:	4355      	muls	r5, r2
    61a0:	4698      	mov	r8, r3
    61a2:	1c3b      	adds	r3, r7, #0
    61a4:	4373      	muls	r3, r6
    61a6:	1964      	adds	r4, r4, r5
    61a8:	46a4      	mov	ip, r4
    61aa:	4644      	mov	r4, r8
    61ac:	9302      	str	r3, [sp, #8]
    61ae:	0c23      	lsrs	r3, r4, #16
    61b0:	4463      	add	r3, ip
    61b2:	429d      	cmp	r5, r3
    61b4:	d904      	bls.n	61c0 <__aeabi_dmul+0x224>
    61b6:	9d02      	ldr	r5, [sp, #8]
    61b8:	2480      	movs	r4, #128	; 0x80
    61ba:	0264      	lsls	r4, r4, #9
    61bc:	192d      	adds	r5, r5, r4
    61be:	9502      	str	r5, [sp, #8]
    61c0:	0c1d      	lsrs	r5, r3, #16
    61c2:	9503      	str	r5, [sp, #12]
    61c4:	4645      	mov	r5, r8
    61c6:	042c      	lsls	r4, r5, #16
    61c8:	041b      	lsls	r3, r3, #16
    61ca:	0c24      	lsrs	r4, r4, #16
    61cc:	191c      	adds	r4, r3, r4
    61ce:	9405      	str	r4, [sp, #20]
    61d0:	465c      	mov	r4, fp
    61d2:	0c23      	lsrs	r3, r4, #16
    61d4:	1c05      	adds	r5, r0, #0
    61d6:	4358      	muls	r0, r3
    61d8:	0424      	lsls	r4, r4, #16
    61da:	0c24      	lsrs	r4, r4, #16
    61dc:	4684      	mov	ip, r0
    61de:	1c38      	adds	r0, r7, #0
    61e0:	4360      	muls	r0, r4
    61e2:	4365      	muls	r5, r4
    61e4:	435f      	muls	r7, r3
    61e6:	4681      	mov	r9, r0
    61e8:	44cc      	add	ip, r9
    61ea:	0c28      	lsrs	r0, r5, #16
    61ec:	4460      	add	r0, ip
    61ee:	46bb      	mov	fp, r7
    61f0:	4581      	cmp	r9, r0
    61f2:	d902      	bls.n	61fa <__aeabi_dmul+0x25e>
    61f4:	2780      	movs	r7, #128	; 0x80
    61f6:	027f      	lsls	r7, r7, #9
    61f8:	44bb      	add	fp, r7
    61fa:	042d      	lsls	r5, r5, #16
    61fc:	0c07      	lsrs	r7, r0, #16
    61fe:	0c2d      	lsrs	r5, r5, #16
    6200:	0400      	lsls	r0, r0, #16
    6202:	1940      	adds	r0, r0, r5
    6204:	4655      	mov	r5, sl
    6206:	46bc      	mov	ip, r7
    6208:	042f      	lsls	r7, r5, #16
    620a:	44e3      	add	fp, ip
    620c:	4684      	mov	ip, r0
    620e:	0c28      	lsrs	r0, r5, #16
    6210:	0c3d      	lsrs	r5, r7, #16
    6212:	1c2f      	adds	r7, r5, #0
    6214:	4357      	muls	r7, r2
    6216:	46b8      	mov	r8, r7
    6218:	1c2f      	adds	r7, r5, #0
    621a:	4377      	muls	r7, r6
    621c:	4342      	muls	r2, r0
    621e:	46b9      	mov	r9, r7
    6220:	4647      	mov	r7, r8
    6222:	0c3f      	lsrs	r7, r7, #16
    6224:	4491      	add	r9, r2
    6226:	46ba      	mov	sl, r7
    6228:	44d1      	add	r9, sl
    622a:	4346      	muls	r6, r0
    622c:	454a      	cmp	r2, r9
    622e:	d902      	bls.n	6236 <__aeabi_dmul+0x29a>
    6230:	2280      	movs	r2, #128	; 0x80
    6232:	0252      	lsls	r2, r2, #9
    6234:	18b6      	adds	r6, r6, r2
    6236:	464f      	mov	r7, r9
    6238:	0c3a      	lsrs	r2, r7, #16
    623a:	18b6      	adds	r6, r6, r2
    623c:	043a      	lsls	r2, r7, #16
    623e:	4647      	mov	r7, r8
    6240:	043f      	lsls	r7, r7, #16
    6242:	0c3f      	lsrs	r7, r7, #16
    6244:	46b8      	mov	r8, r7
    6246:	1c2f      	adds	r7, r5, #0
    6248:	4367      	muls	r7, r4
    624a:	435d      	muls	r5, r3
    624c:	4344      	muls	r4, r0
    624e:	4358      	muls	r0, r3
    6250:	1965      	adds	r5, r4, r5
    6252:	9001      	str	r0, [sp, #4]
    6254:	0c38      	lsrs	r0, r7, #16
    6256:	182d      	adds	r5, r5, r0
    6258:	4442      	add	r2, r8
    625a:	46b8      	mov	r8, r7
    625c:	42ac      	cmp	r4, r5
    625e:	d904      	bls.n	626a <__aeabi_dmul+0x2ce>
    6260:	9801      	ldr	r0, [sp, #4]
    6262:	2380      	movs	r3, #128	; 0x80
    6264:	025b      	lsls	r3, r3, #9
    6266:	18c0      	adds	r0, r0, r3
    6268:	9001      	str	r0, [sp, #4]
    626a:	9c03      	ldr	r4, [sp, #12]
    626c:	9f02      	ldr	r7, [sp, #8]
    626e:	1c20      	adds	r0, r4, #0
    6270:	4460      	add	r0, ip
    6272:	19c0      	adds	r0, r0, r7
    6274:	4560      	cmp	r0, ip
    6276:	41a4      	sbcs	r4, r4
    6278:	4647      	mov	r7, r8
    627a:	4264      	negs	r4, r4
    627c:	46a4      	mov	ip, r4
    627e:	042b      	lsls	r3, r5, #16
    6280:	043c      	lsls	r4, r7, #16
    6282:	4699      	mov	r9, r3
    6284:	0c24      	lsrs	r4, r4, #16
    6286:	444c      	add	r4, r9
    6288:	46a0      	mov	r8, r4
    628a:	44d8      	add	r8, fp
    628c:	1880      	adds	r0, r0, r2
    628e:	46c2      	mov	sl, r8
    6290:	44e2      	add	sl, ip
    6292:	4290      	cmp	r0, r2
    6294:	4192      	sbcs	r2, r2
    6296:	4657      	mov	r7, sl
    6298:	4252      	negs	r2, r2
    629a:	4691      	mov	r9, r2
    629c:	19f2      	adds	r2, r6, r7
    629e:	45e2      	cmp	sl, ip
    62a0:	41bf      	sbcs	r7, r7
    62a2:	427f      	negs	r7, r7
    62a4:	464b      	mov	r3, r9
    62a6:	46bc      	mov	ip, r7
    62a8:	45d8      	cmp	r8, fp
    62aa:	41bf      	sbcs	r7, r7
    62ac:	18d4      	adds	r4, r2, r3
    62ae:	427f      	negs	r7, r7
    62b0:	4663      	mov	r3, ip
    62b2:	431f      	orrs	r7, r3
    62b4:	0c2d      	lsrs	r5, r5, #16
    62b6:	197f      	adds	r7, r7, r5
    62b8:	42b2      	cmp	r2, r6
    62ba:	4192      	sbcs	r2, r2
    62bc:	454c      	cmp	r4, r9
    62be:	41ad      	sbcs	r5, r5
    62c0:	4252      	negs	r2, r2
    62c2:	426d      	negs	r5, r5
    62c4:	4315      	orrs	r5, r2
    62c6:	9e01      	ldr	r6, [sp, #4]
    62c8:	197d      	adds	r5, r7, r5
    62ca:	19ab      	adds	r3, r5, r6
    62cc:	0de2      	lsrs	r2, r4, #23
    62ce:	025b      	lsls	r3, r3, #9
    62d0:	9f05      	ldr	r7, [sp, #20]
    62d2:	4313      	orrs	r3, r2
    62d4:	0242      	lsls	r2, r0, #9
    62d6:	433a      	orrs	r2, r7
    62d8:	469a      	mov	sl, r3
    62da:	1e53      	subs	r3, r2, #1
    62dc:	419a      	sbcs	r2, r3
    62de:	0dc3      	lsrs	r3, r0, #23
    62e0:	1c10      	adds	r0, r2, #0
    62e2:	4318      	orrs	r0, r3
    62e4:	0264      	lsls	r4, r4, #9
    62e6:	4320      	orrs	r0, r4
    62e8:	4680      	mov	r8, r0
    62ea:	4650      	mov	r0, sl
    62ec:	01c0      	lsls	r0, r0, #7
    62ee:	d50d      	bpl.n	630c <__aeabi_dmul+0x370>
    62f0:	4645      	mov	r5, r8
    62f2:	2201      	movs	r2, #1
    62f4:	4656      	mov	r6, sl
    62f6:	9c04      	ldr	r4, [sp, #16]
    62f8:	086b      	lsrs	r3, r5, #1
    62fa:	402a      	ands	r2, r5
    62fc:	431a      	orrs	r2, r3
    62fe:	07f3      	lsls	r3, r6, #31
    6300:	3401      	adds	r4, #1
    6302:	431a      	orrs	r2, r3
    6304:	0876      	lsrs	r6, r6, #1
    6306:	9404      	str	r4, [sp, #16]
    6308:	4690      	mov	r8, r2
    630a:	46b2      	mov	sl, r6
    630c:	9e04      	ldr	r6, [sp, #16]
    630e:	4f63      	ldr	r7, [pc, #396]	; (649c <__aeabi_dmul+0x500>)
    6310:	19f3      	adds	r3, r6, r7
    6312:	2b00      	cmp	r3, #0
    6314:	dd61      	ble.n	63da <__aeabi_dmul+0x43e>
    6316:	4640      	mov	r0, r8
    6318:	0740      	lsls	r0, r0, #29
    631a:	d00b      	beq.n	6334 <__aeabi_dmul+0x398>
    631c:	220f      	movs	r2, #15
    631e:	4644      	mov	r4, r8
    6320:	4022      	ands	r2, r4
    6322:	2a04      	cmp	r2, #4
    6324:	d006      	beq.n	6334 <__aeabi_dmul+0x398>
    6326:	4642      	mov	r2, r8
    6328:	3204      	adds	r2, #4
    632a:	4542      	cmp	r2, r8
    632c:	4180      	sbcs	r0, r0
    632e:	4240      	negs	r0, r0
    6330:	4482      	add	sl, r0
    6332:	4690      	mov	r8, r2
    6334:	4655      	mov	r5, sl
    6336:	01ed      	lsls	r5, r5, #7
    6338:	d507      	bpl.n	634a <__aeabi_dmul+0x3ae>
    633a:	4b59      	ldr	r3, [pc, #356]	; (64a0 <__aeabi_dmul+0x504>)
    633c:	4656      	mov	r6, sl
    633e:	9f04      	ldr	r7, [sp, #16]
    6340:	2080      	movs	r0, #128	; 0x80
    6342:	401e      	ands	r6, r3
    6344:	00c0      	lsls	r0, r0, #3
    6346:	46b2      	mov	sl, r6
    6348:	183b      	adds	r3, r7, r0
    634a:	4a56      	ldr	r2, [pc, #344]	; (64a4 <__aeabi_dmul+0x508>)
    634c:	4293      	cmp	r3, r2
    634e:	dd00      	ble.n	6352 <__aeabi_dmul+0x3b6>
    6350:	e6ea      	b.n	6128 <__aeabi_dmul+0x18c>
    6352:	4644      	mov	r4, r8
    6354:	4655      	mov	r5, sl
    6356:	08e2      	lsrs	r2, r4, #3
    6358:	0768      	lsls	r0, r5, #29
    635a:	4310      	orrs	r0, r2
    635c:	2201      	movs	r2, #1
    635e:	026c      	lsls	r4, r5, #9
    6360:	055b      	lsls	r3, r3, #21
    6362:	400a      	ands	r2, r1
    6364:	4680      	mov	r8, r0
    6366:	0b24      	lsrs	r4, r4, #12
    6368:	0d5b      	lsrs	r3, r3, #21
    636a:	4691      	mov	r9, r2
    636c:	e67b      	b.n	6066 <__aeabi_dmul+0xca>
    636e:	46da      	mov	sl, fp
    6370:	4690      	mov	r8, r2
    6372:	1c1d      	adds	r5, r3, #0
    6374:	e669      	b.n	604a <__aeabi_dmul+0xae>
    6376:	2480      	movs	r4, #128	; 0x80
    6378:	0324      	lsls	r4, r4, #12
    637a:	4657      	mov	r7, sl
    637c:	4227      	tst	r7, r4
    637e:	d11c      	bne.n	63ba <__aeabi_dmul+0x41e>
    6380:	433c      	orrs	r4, r7
    6382:	0324      	lsls	r4, r4, #12
    6384:	0b24      	lsrs	r4, r4, #12
    6386:	4b48      	ldr	r3, [pc, #288]	; (64a8 <__aeabi_dmul+0x50c>)
    6388:	e66d      	b.n	6066 <__aeabi_dmul+0xca>
    638a:	1c03      	adds	r3, r0, #0
    638c:	3b28      	subs	r3, #40	; 0x28
    638e:	1c31      	adds	r1, r6, #0
    6390:	4099      	lsls	r1, r3
    6392:	468b      	mov	fp, r1
    6394:	2200      	movs	r2, #0
    6396:	e6c3      	b.n	6120 <__aeabi_dmul+0x184>
    6398:	1c30      	adds	r0, r6, #0
    639a:	f000 fcbb 	bl	6d14 <__clzsi2>
    639e:	3020      	adds	r0, #32
    63a0:	e6ad      	b.n	60fe <__aeabi_dmul+0x162>
    63a2:	3b28      	subs	r3, #40	; 0x28
    63a4:	1c21      	adds	r1, r4, #0
    63a6:	4099      	lsls	r1, r3
    63a8:	2200      	movs	r2, #0
    63aa:	468a      	mov	sl, r1
    63ac:	4690      	mov	r8, r2
    63ae:	e68e      	b.n	60ce <__aeabi_dmul+0x132>
    63b0:	1c20      	adds	r0, r4, #0
    63b2:	f000 fcaf 	bl	6d14 <__clzsi2>
    63b6:	3020      	adds	r0, #32
    63b8:	e678      	b.n	60ac <__aeabi_dmul+0x110>
    63ba:	4658      	mov	r0, fp
    63bc:	4220      	tst	r0, r4
    63be:	d107      	bne.n	63d0 <__aeabi_dmul+0x434>
    63c0:	4304      	orrs	r4, r0
    63c2:	9903      	ldr	r1, [sp, #12]
    63c4:	0324      	lsls	r4, r4, #12
    63c6:	0b24      	lsrs	r4, r4, #12
    63c8:	4689      	mov	r9, r1
    63ca:	4690      	mov	r8, r2
    63cc:	4b36      	ldr	r3, [pc, #216]	; (64a8 <__aeabi_dmul+0x50c>)
    63ce:	e64a      	b.n	6066 <__aeabi_dmul+0xca>
    63d0:	433c      	orrs	r4, r7
    63d2:	0324      	lsls	r4, r4, #12
    63d4:	0b24      	lsrs	r4, r4, #12
    63d6:	4b34      	ldr	r3, [pc, #208]	; (64a8 <__aeabi_dmul+0x50c>)
    63d8:	e645      	b.n	6066 <__aeabi_dmul+0xca>
    63da:	4b34      	ldr	r3, [pc, #208]	; (64ac <__aeabi_dmul+0x510>)
    63dc:	9e04      	ldr	r6, [sp, #16]
    63de:	1b9b      	subs	r3, r3, r6
    63e0:	2b38      	cmp	r3, #56	; 0x38
    63e2:	dd06      	ble.n	63f2 <__aeabi_dmul+0x456>
    63e4:	2301      	movs	r3, #1
    63e6:	400b      	ands	r3, r1
    63e8:	2400      	movs	r4, #0
    63ea:	4699      	mov	r9, r3
    63ec:	46a0      	mov	r8, r4
    63ee:	2300      	movs	r3, #0
    63f0:	e639      	b.n	6066 <__aeabi_dmul+0xca>
    63f2:	2b1f      	cmp	r3, #31
    63f4:	dc25      	bgt.n	6442 <__aeabi_dmul+0x4a6>
    63f6:	9c04      	ldr	r4, [sp, #16]
    63f8:	4d2d      	ldr	r5, [pc, #180]	; (64b0 <__aeabi_dmul+0x514>)
    63fa:	4646      	mov	r6, r8
    63fc:	1960      	adds	r0, r4, r5
    63fe:	4652      	mov	r2, sl
    6400:	4644      	mov	r4, r8
    6402:	4086      	lsls	r6, r0
    6404:	40dc      	lsrs	r4, r3
    6406:	4082      	lsls	r2, r0
    6408:	4657      	mov	r7, sl
    640a:	1c30      	adds	r0, r6, #0
    640c:	4322      	orrs	r2, r4
    640e:	40df      	lsrs	r7, r3
    6410:	1e44      	subs	r4, r0, #1
    6412:	41a0      	sbcs	r0, r4
    6414:	4302      	orrs	r2, r0
    6416:	1c3b      	adds	r3, r7, #0
    6418:	0754      	lsls	r4, r2, #29
    641a:	d009      	beq.n	6430 <__aeabi_dmul+0x494>
    641c:	200f      	movs	r0, #15
    641e:	4010      	ands	r0, r2
    6420:	2804      	cmp	r0, #4
    6422:	d005      	beq.n	6430 <__aeabi_dmul+0x494>
    6424:	1d10      	adds	r0, r2, #4
    6426:	4290      	cmp	r0, r2
    6428:	4192      	sbcs	r2, r2
    642a:	4252      	negs	r2, r2
    642c:	189b      	adds	r3, r3, r2
    642e:	1c02      	adds	r2, r0, #0
    6430:	021d      	lsls	r5, r3, #8
    6432:	d51a      	bpl.n	646a <__aeabi_dmul+0x4ce>
    6434:	2301      	movs	r3, #1
    6436:	400b      	ands	r3, r1
    6438:	2400      	movs	r4, #0
    643a:	4699      	mov	r9, r3
    643c:	46a0      	mov	r8, r4
    643e:	2301      	movs	r3, #1
    6440:	e611      	b.n	6066 <__aeabi_dmul+0xca>
    6442:	481c      	ldr	r0, [pc, #112]	; (64b4 <__aeabi_dmul+0x518>)
    6444:	9c04      	ldr	r4, [sp, #16]
    6446:	4655      	mov	r5, sl
    6448:	1b00      	subs	r0, r0, r4
    644a:	40c5      	lsrs	r5, r0
    644c:	1c28      	adds	r0, r5, #0
    644e:	2b20      	cmp	r3, #32
    6450:	d016      	beq.n	6480 <__aeabi_dmul+0x4e4>
    6452:	4e19      	ldr	r6, [pc, #100]	; (64b8 <__aeabi_dmul+0x51c>)
    6454:	4657      	mov	r7, sl
    6456:	19a2      	adds	r2, r4, r6
    6458:	4097      	lsls	r7, r2
    645a:	1c3a      	adds	r2, r7, #0
    645c:	4643      	mov	r3, r8
    645e:	431a      	orrs	r2, r3
    6460:	1e53      	subs	r3, r2, #1
    6462:	419a      	sbcs	r2, r3
    6464:	4302      	orrs	r2, r0
    6466:	2300      	movs	r3, #0
    6468:	e7d6      	b.n	6418 <__aeabi_dmul+0x47c>
    646a:	0758      	lsls	r0, r3, #29
    646c:	025b      	lsls	r3, r3, #9
    646e:	08d2      	lsrs	r2, r2, #3
    6470:	0b1c      	lsrs	r4, r3, #12
    6472:	2301      	movs	r3, #1
    6474:	400b      	ands	r3, r1
    6476:	4310      	orrs	r0, r2
    6478:	4699      	mov	r9, r3
    647a:	4680      	mov	r8, r0
    647c:	2300      	movs	r3, #0
    647e:	e5f2      	b.n	6066 <__aeabi_dmul+0xca>
    6480:	2200      	movs	r2, #0
    6482:	e7eb      	b.n	645c <__aeabi_dmul+0x4c0>
    6484:	2480      	movs	r4, #128	; 0x80
    6486:	0324      	lsls	r4, r4, #12
    6488:	4650      	mov	r0, sl
    648a:	2301      	movs	r3, #1
    648c:	4304      	orrs	r4, r0
    648e:	4019      	ands	r1, r3
    6490:	0324      	lsls	r4, r4, #12
    6492:	0b24      	lsrs	r4, r4, #12
    6494:	4689      	mov	r9, r1
    6496:	4b04      	ldr	r3, [pc, #16]	; (64a8 <__aeabi_dmul+0x50c>)
    6498:	e5e5      	b.n	6066 <__aeabi_dmul+0xca>
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	000003ff 	.word	0x000003ff
    64a0:	feffffff 	.word	0xfeffffff
    64a4:	000007fe 	.word	0x000007fe
    64a8:	000007ff 	.word	0x000007ff
    64ac:	fffffc02 	.word	0xfffffc02
    64b0:	0000041e 	.word	0x0000041e
    64b4:	fffffbe2 	.word	0xfffffbe2
    64b8:	0000043e 	.word	0x0000043e

000064bc <__aeabi_dsub>:
    64bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64be:	465f      	mov	r7, fp
    64c0:	4656      	mov	r6, sl
    64c2:	4644      	mov	r4, r8
    64c4:	464d      	mov	r5, r9
    64c6:	b4f0      	push	{r4, r5, r6, r7}
    64c8:	030c      	lsls	r4, r1, #12
    64ca:	004d      	lsls	r5, r1, #1
    64cc:	0fcf      	lsrs	r7, r1, #31
    64ce:	0a61      	lsrs	r1, r4, #9
    64d0:	0f44      	lsrs	r4, r0, #29
    64d2:	4321      	orrs	r1, r4
    64d4:	00c4      	lsls	r4, r0, #3
    64d6:	0318      	lsls	r0, r3, #12
    64d8:	0fde      	lsrs	r6, r3, #31
    64da:	4680      	mov	r8, r0
    64dc:	46b4      	mov	ip, r6
    64de:	4646      	mov	r6, r8
    64e0:	0058      	lsls	r0, r3, #1
    64e2:	0a76      	lsrs	r6, r6, #9
    64e4:	0f53      	lsrs	r3, r2, #29
    64e6:	4333      	orrs	r3, r6
    64e8:	00d6      	lsls	r6, r2, #3
    64ea:	4ad1      	ldr	r2, [pc, #836]	; (6830 <__aeabi_dsub+0x374>)
    64ec:	0d6d      	lsrs	r5, r5, #21
    64ee:	46ba      	mov	sl, r7
    64f0:	0d40      	lsrs	r0, r0, #21
    64f2:	46b3      	mov	fp, r6
    64f4:	4290      	cmp	r0, r2
    64f6:	d100      	bne.n	64fa <__aeabi_dsub+0x3e>
    64f8:	e0f5      	b.n	66e6 <__aeabi_dsub+0x22a>
    64fa:	4662      	mov	r2, ip
    64fc:	2601      	movs	r6, #1
    64fe:	4072      	eors	r2, r6
    6500:	4694      	mov	ip, r2
    6502:	4567      	cmp	r7, ip
    6504:	d100      	bne.n	6508 <__aeabi_dsub+0x4c>
    6506:	e0ab      	b.n	6660 <__aeabi_dsub+0x1a4>
    6508:	1a2f      	subs	r7, r5, r0
    650a:	2f00      	cmp	r7, #0
    650c:	dc00      	bgt.n	6510 <__aeabi_dsub+0x54>
    650e:	e111      	b.n	6734 <__aeabi_dsub+0x278>
    6510:	2800      	cmp	r0, #0
    6512:	d13e      	bne.n	6592 <__aeabi_dsub+0xd6>
    6514:	4658      	mov	r0, fp
    6516:	4318      	orrs	r0, r3
    6518:	d000      	beq.n	651c <__aeabi_dsub+0x60>
    651a:	e0f1      	b.n	6700 <__aeabi_dsub+0x244>
    651c:	0760      	lsls	r0, r4, #29
    651e:	d100      	bne.n	6522 <__aeabi_dsub+0x66>
    6520:	e097      	b.n	6652 <__aeabi_dsub+0x196>
    6522:	230f      	movs	r3, #15
    6524:	4023      	ands	r3, r4
    6526:	2b04      	cmp	r3, #4
    6528:	d100      	bne.n	652c <__aeabi_dsub+0x70>
    652a:	e122      	b.n	6772 <__aeabi_dsub+0x2b6>
    652c:	1d22      	adds	r2, r4, #4
    652e:	42a2      	cmp	r2, r4
    6530:	41a4      	sbcs	r4, r4
    6532:	4264      	negs	r4, r4
    6534:	2380      	movs	r3, #128	; 0x80
    6536:	1909      	adds	r1, r1, r4
    6538:	041b      	lsls	r3, r3, #16
    653a:	2701      	movs	r7, #1
    653c:	4650      	mov	r0, sl
    653e:	400b      	ands	r3, r1
    6540:	4007      	ands	r7, r0
    6542:	1c14      	adds	r4, r2, #0
    6544:	2b00      	cmp	r3, #0
    6546:	d100      	bne.n	654a <__aeabi_dsub+0x8e>
    6548:	e079      	b.n	663e <__aeabi_dsub+0x182>
    654a:	4bb9      	ldr	r3, [pc, #740]	; (6830 <__aeabi_dsub+0x374>)
    654c:	3501      	adds	r5, #1
    654e:	429d      	cmp	r5, r3
    6550:	d100      	bne.n	6554 <__aeabi_dsub+0x98>
    6552:	e10b      	b.n	676c <__aeabi_dsub+0x2b0>
    6554:	4bb7      	ldr	r3, [pc, #732]	; (6834 <__aeabi_dsub+0x378>)
    6556:	08e4      	lsrs	r4, r4, #3
    6558:	4019      	ands	r1, r3
    655a:	0748      	lsls	r0, r1, #29
    655c:	0249      	lsls	r1, r1, #9
    655e:	4304      	orrs	r4, r0
    6560:	0b0b      	lsrs	r3, r1, #12
    6562:	2000      	movs	r0, #0
    6564:	2100      	movs	r1, #0
    6566:	031b      	lsls	r3, r3, #12
    6568:	0b1a      	lsrs	r2, r3, #12
    656a:	0d0b      	lsrs	r3, r1, #20
    656c:	056d      	lsls	r5, r5, #21
    656e:	051b      	lsls	r3, r3, #20
    6570:	4313      	orrs	r3, r2
    6572:	086a      	lsrs	r2, r5, #1
    6574:	4db0      	ldr	r5, [pc, #704]	; (6838 <__aeabi_dsub+0x37c>)
    6576:	07ff      	lsls	r7, r7, #31
    6578:	401d      	ands	r5, r3
    657a:	4315      	orrs	r5, r2
    657c:	006d      	lsls	r5, r5, #1
    657e:	086d      	lsrs	r5, r5, #1
    6580:	1c29      	adds	r1, r5, #0
    6582:	4339      	orrs	r1, r7
    6584:	1c20      	adds	r0, r4, #0
    6586:	bc3c      	pop	{r2, r3, r4, r5}
    6588:	4690      	mov	r8, r2
    658a:	4699      	mov	r9, r3
    658c:	46a2      	mov	sl, r4
    658e:	46ab      	mov	fp, r5
    6590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6592:	48a7      	ldr	r0, [pc, #668]	; (6830 <__aeabi_dsub+0x374>)
    6594:	4285      	cmp	r5, r0
    6596:	d0c1      	beq.n	651c <__aeabi_dsub+0x60>
    6598:	2080      	movs	r0, #128	; 0x80
    659a:	0400      	lsls	r0, r0, #16
    659c:	4303      	orrs	r3, r0
    659e:	2f38      	cmp	r7, #56	; 0x38
    65a0:	dd00      	ble.n	65a4 <__aeabi_dsub+0xe8>
    65a2:	e0fd      	b.n	67a0 <__aeabi_dsub+0x2e4>
    65a4:	2f1f      	cmp	r7, #31
    65a6:	dd00      	ble.n	65aa <__aeabi_dsub+0xee>
    65a8:	e131      	b.n	680e <__aeabi_dsub+0x352>
    65aa:	2020      	movs	r0, #32
    65ac:	1bc0      	subs	r0, r0, r7
    65ae:	1c1a      	adds	r2, r3, #0
    65b0:	465e      	mov	r6, fp
    65b2:	4082      	lsls	r2, r0
    65b4:	40fe      	lsrs	r6, r7
    65b6:	4332      	orrs	r2, r6
    65b8:	4694      	mov	ip, r2
    65ba:	465a      	mov	r2, fp
    65bc:	4082      	lsls	r2, r0
    65be:	1c10      	adds	r0, r2, #0
    65c0:	1e42      	subs	r2, r0, #1
    65c2:	4190      	sbcs	r0, r2
    65c4:	40fb      	lsrs	r3, r7
    65c6:	4662      	mov	r2, ip
    65c8:	4302      	orrs	r2, r0
    65ca:	1c1f      	adds	r7, r3, #0
    65cc:	1aa2      	subs	r2, r4, r2
    65ce:	4294      	cmp	r4, r2
    65d0:	41a4      	sbcs	r4, r4
    65d2:	4264      	negs	r4, r4
    65d4:	1bc9      	subs	r1, r1, r7
    65d6:	1b09      	subs	r1, r1, r4
    65d8:	1c14      	adds	r4, r2, #0
    65da:	020a      	lsls	r2, r1, #8
    65dc:	d59e      	bpl.n	651c <__aeabi_dsub+0x60>
    65de:	0249      	lsls	r1, r1, #9
    65e0:	0a4f      	lsrs	r7, r1, #9
    65e2:	2f00      	cmp	r7, #0
    65e4:	d100      	bne.n	65e8 <__aeabi_dsub+0x12c>
    65e6:	e0d6      	b.n	6796 <__aeabi_dsub+0x2da>
    65e8:	1c38      	adds	r0, r7, #0
    65ea:	f000 fb93 	bl	6d14 <__clzsi2>
    65ee:	1c02      	adds	r2, r0, #0
    65f0:	3a08      	subs	r2, #8
    65f2:	2a1f      	cmp	r2, #31
    65f4:	dd00      	ble.n	65f8 <__aeabi_dsub+0x13c>
    65f6:	e0c3      	b.n	6780 <__aeabi_dsub+0x2c4>
    65f8:	2128      	movs	r1, #40	; 0x28
    65fa:	1c23      	adds	r3, r4, #0
    65fc:	1a09      	subs	r1, r1, r0
    65fe:	4097      	lsls	r7, r2
    6600:	40cb      	lsrs	r3, r1
    6602:	431f      	orrs	r7, r3
    6604:	4094      	lsls	r4, r2
    6606:	4295      	cmp	r5, r2
    6608:	dd00      	ble.n	660c <__aeabi_dsub+0x150>
    660a:	e0c0      	b.n	678e <__aeabi_dsub+0x2d2>
    660c:	1b55      	subs	r5, r2, r5
    660e:	1c69      	adds	r1, r5, #1
    6610:	291f      	cmp	r1, #31
    6612:	dd00      	ble.n	6616 <__aeabi_dsub+0x15a>
    6614:	e0ea      	b.n	67ec <__aeabi_dsub+0x330>
    6616:	221f      	movs	r2, #31
    6618:	1b55      	subs	r5, r2, r5
    661a:	1c3b      	adds	r3, r7, #0
    661c:	1c22      	adds	r2, r4, #0
    661e:	40ab      	lsls	r3, r5
    6620:	40ca      	lsrs	r2, r1
    6622:	40ac      	lsls	r4, r5
    6624:	1e65      	subs	r5, r4, #1
    6626:	41ac      	sbcs	r4, r5
    6628:	4313      	orrs	r3, r2
    662a:	40cf      	lsrs	r7, r1
    662c:	431c      	orrs	r4, r3
    662e:	1c39      	adds	r1, r7, #0
    6630:	2500      	movs	r5, #0
    6632:	e773      	b.n	651c <__aeabi_dsub+0x60>
    6634:	2180      	movs	r1, #128	; 0x80
    6636:	4d7e      	ldr	r5, [pc, #504]	; (6830 <__aeabi_dsub+0x374>)
    6638:	2700      	movs	r7, #0
    663a:	03c9      	lsls	r1, r1, #15
    663c:	2400      	movs	r4, #0
    663e:	4b7c      	ldr	r3, [pc, #496]	; (6830 <__aeabi_dsub+0x374>)
    6640:	0748      	lsls	r0, r1, #29
    6642:	08e4      	lsrs	r4, r4, #3
    6644:	4304      	orrs	r4, r0
    6646:	08c9      	lsrs	r1, r1, #3
    6648:	429d      	cmp	r5, r3
    664a:	d050      	beq.n	66ee <__aeabi_dsub+0x232>
    664c:	0309      	lsls	r1, r1, #12
    664e:	0b0b      	lsrs	r3, r1, #12
    6650:	e787      	b.n	6562 <__aeabi_dsub+0xa6>
    6652:	2380      	movs	r3, #128	; 0x80
    6654:	041b      	lsls	r3, r3, #16
    6656:	2701      	movs	r7, #1
    6658:	4652      	mov	r2, sl
    665a:	400b      	ands	r3, r1
    665c:	4017      	ands	r7, r2
    665e:	e771      	b.n	6544 <__aeabi_dsub+0x88>
    6660:	1a2a      	subs	r2, r5, r0
    6662:	4694      	mov	ip, r2
    6664:	2a00      	cmp	r2, #0
    6666:	dc00      	bgt.n	666a <__aeabi_dsub+0x1ae>
    6668:	e0a1      	b.n	67ae <__aeabi_dsub+0x2f2>
    666a:	2800      	cmp	r0, #0
    666c:	d054      	beq.n	6718 <__aeabi_dsub+0x25c>
    666e:	4870      	ldr	r0, [pc, #448]	; (6830 <__aeabi_dsub+0x374>)
    6670:	4285      	cmp	r5, r0
    6672:	d100      	bne.n	6676 <__aeabi_dsub+0x1ba>
    6674:	e752      	b.n	651c <__aeabi_dsub+0x60>
    6676:	2080      	movs	r0, #128	; 0x80
    6678:	0400      	lsls	r0, r0, #16
    667a:	4303      	orrs	r3, r0
    667c:	4660      	mov	r0, ip
    667e:	2838      	cmp	r0, #56	; 0x38
    6680:	dd00      	ble.n	6684 <__aeabi_dsub+0x1c8>
    6682:	e10e      	b.n	68a2 <__aeabi_dsub+0x3e6>
    6684:	281f      	cmp	r0, #31
    6686:	dd00      	ble.n	668a <__aeabi_dsub+0x1ce>
    6688:	e157      	b.n	693a <__aeabi_dsub+0x47e>
    668a:	4662      	mov	r2, ip
    668c:	2020      	movs	r0, #32
    668e:	1a80      	subs	r0, r0, r2
    6690:	1c1e      	adds	r6, r3, #0
    6692:	4086      	lsls	r6, r0
    6694:	46b1      	mov	r9, r6
    6696:	465e      	mov	r6, fp
    6698:	40d6      	lsrs	r6, r2
    669a:	464a      	mov	r2, r9
    669c:	4332      	orrs	r2, r6
    669e:	465e      	mov	r6, fp
    66a0:	4086      	lsls	r6, r0
    66a2:	4690      	mov	r8, r2
    66a4:	1c30      	adds	r0, r6, #0
    66a6:	1e42      	subs	r2, r0, #1
    66a8:	4190      	sbcs	r0, r2
    66aa:	4642      	mov	r2, r8
    66ac:	4302      	orrs	r2, r0
    66ae:	4660      	mov	r0, ip
    66b0:	40c3      	lsrs	r3, r0
    66b2:	1912      	adds	r2, r2, r4
    66b4:	42a2      	cmp	r2, r4
    66b6:	41a4      	sbcs	r4, r4
    66b8:	4264      	negs	r4, r4
    66ba:	1859      	adds	r1, r3, r1
    66bc:	1909      	adds	r1, r1, r4
    66be:	1c14      	adds	r4, r2, #0
    66c0:	0208      	lsls	r0, r1, #8
    66c2:	d400      	bmi.n	66c6 <__aeabi_dsub+0x20a>
    66c4:	e72a      	b.n	651c <__aeabi_dsub+0x60>
    66c6:	4b5a      	ldr	r3, [pc, #360]	; (6830 <__aeabi_dsub+0x374>)
    66c8:	3501      	adds	r5, #1
    66ca:	429d      	cmp	r5, r3
    66cc:	d100      	bne.n	66d0 <__aeabi_dsub+0x214>
    66ce:	e131      	b.n	6934 <__aeabi_dsub+0x478>
    66d0:	4b58      	ldr	r3, [pc, #352]	; (6834 <__aeabi_dsub+0x378>)
    66d2:	0860      	lsrs	r0, r4, #1
    66d4:	4019      	ands	r1, r3
    66d6:	2301      	movs	r3, #1
    66d8:	4023      	ands	r3, r4
    66da:	1c1c      	adds	r4, r3, #0
    66dc:	4304      	orrs	r4, r0
    66de:	07cb      	lsls	r3, r1, #31
    66e0:	431c      	orrs	r4, r3
    66e2:	0849      	lsrs	r1, r1, #1
    66e4:	e71a      	b.n	651c <__aeabi_dsub+0x60>
    66e6:	431e      	orrs	r6, r3
    66e8:	d000      	beq.n	66ec <__aeabi_dsub+0x230>
    66ea:	e70a      	b.n	6502 <__aeabi_dsub+0x46>
    66ec:	e705      	b.n	64fa <__aeabi_dsub+0x3e>
    66ee:	1c23      	adds	r3, r4, #0
    66f0:	430b      	orrs	r3, r1
    66f2:	d03b      	beq.n	676c <__aeabi_dsub+0x2b0>
    66f4:	2380      	movs	r3, #128	; 0x80
    66f6:	031b      	lsls	r3, r3, #12
    66f8:	430b      	orrs	r3, r1
    66fa:	031b      	lsls	r3, r3, #12
    66fc:	0b1b      	lsrs	r3, r3, #12
    66fe:	e730      	b.n	6562 <__aeabi_dsub+0xa6>
    6700:	3f01      	subs	r7, #1
    6702:	2f00      	cmp	r7, #0
    6704:	d16d      	bne.n	67e2 <__aeabi_dsub+0x326>
    6706:	465e      	mov	r6, fp
    6708:	1ba2      	subs	r2, r4, r6
    670a:	4294      	cmp	r4, r2
    670c:	41a4      	sbcs	r4, r4
    670e:	4264      	negs	r4, r4
    6710:	1ac9      	subs	r1, r1, r3
    6712:	1b09      	subs	r1, r1, r4
    6714:	1c14      	adds	r4, r2, #0
    6716:	e760      	b.n	65da <__aeabi_dsub+0x11e>
    6718:	4658      	mov	r0, fp
    671a:	4318      	orrs	r0, r3
    671c:	d100      	bne.n	6720 <__aeabi_dsub+0x264>
    671e:	e6fd      	b.n	651c <__aeabi_dsub+0x60>
    6720:	2601      	movs	r6, #1
    6722:	4276      	negs	r6, r6
    6724:	44b4      	add	ip, r6
    6726:	4660      	mov	r0, ip
    6728:	2800      	cmp	r0, #0
    672a:	d000      	beq.n	672e <__aeabi_dsub+0x272>
    672c:	e0d0      	b.n	68d0 <__aeabi_dsub+0x414>
    672e:	465e      	mov	r6, fp
    6730:	1932      	adds	r2, r6, r4
    6732:	e7bf      	b.n	66b4 <__aeabi_dsub+0x1f8>
    6734:	2f00      	cmp	r7, #0
    6736:	d000      	beq.n	673a <__aeabi_dsub+0x27e>
    6738:	e080      	b.n	683c <__aeabi_dsub+0x380>
    673a:	1c68      	adds	r0, r5, #1
    673c:	0540      	lsls	r0, r0, #21
    673e:	0d40      	lsrs	r0, r0, #21
    6740:	2801      	cmp	r0, #1
    6742:	dc00      	bgt.n	6746 <__aeabi_dsub+0x28a>
    6744:	e0e8      	b.n	6918 <__aeabi_dsub+0x45c>
    6746:	465a      	mov	r2, fp
    6748:	1aa2      	subs	r2, r4, r2
    674a:	4294      	cmp	r4, r2
    674c:	41bf      	sbcs	r7, r7
    674e:	1ac8      	subs	r0, r1, r3
    6750:	427f      	negs	r7, r7
    6752:	1bc7      	subs	r7, r0, r7
    6754:	023e      	lsls	r6, r7, #8
    6756:	d400      	bmi.n	675a <__aeabi_dsub+0x29e>
    6758:	e098      	b.n	688c <__aeabi_dsub+0x3d0>
    675a:	4658      	mov	r0, fp
    675c:	1b04      	subs	r4, r0, r4
    675e:	45a3      	cmp	fp, r4
    6760:	4192      	sbcs	r2, r2
    6762:	1a59      	subs	r1, r3, r1
    6764:	4252      	negs	r2, r2
    6766:	1a8f      	subs	r7, r1, r2
    6768:	46e2      	mov	sl, ip
    676a:	e73a      	b.n	65e2 <__aeabi_dsub+0x126>
    676c:	2300      	movs	r3, #0
    676e:	2400      	movs	r4, #0
    6770:	e6f7      	b.n	6562 <__aeabi_dsub+0xa6>
    6772:	2380      	movs	r3, #128	; 0x80
    6774:	041b      	lsls	r3, r3, #16
    6776:	2701      	movs	r7, #1
    6778:	4656      	mov	r6, sl
    677a:	400b      	ands	r3, r1
    677c:	4037      	ands	r7, r6
    677e:	e6e1      	b.n	6544 <__aeabi_dsub+0x88>
    6780:	1c27      	adds	r7, r4, #0
    6782:	3828      	subs	r0, #40	; 0x28
    6784:	4087      	lsls	r7, r0
    6786:	2400      	movs	r4, #0
    6788:	4295      	cmp	r5, r2
    678a:	dc00      	bgt.n	678e <__aeabi_dsub+0x2d2>
    678c:	e73e      	b.n	660c <__aeabi_dsub+0x150>
    678e:	4929      	ldr	r1, [pc, #164]	; (6834 <__aeabi_dsub+0x378>)
    6790:	1aad      	subs	r5, r5, r2
    6792:	4039      	ands	r1, r7
    6794:	e6c2      	b.n	651c <__aeabi_dsub+0x60>
    6796:	1c20      	adds	r0, r4, #0
    6798:	f000 fabc 	bl	6d14 <__clzsi2>
    679c:	3020      	adds	r0, #32
    679e:	e726      	b.n	65ee <__aeabi_dsub+0x132>
    67a0:	465a      	mov	r2, fp
    67a2:	431a      	orrs	r2, r3
    67a4:	1e53      	subs	r3, r2, #1
    67a6:	419a      	sbcs	r2, r3
    67a8:	b2d2      	uxtb	r2, r2
    67aa:	2700      	movs	r7, #0
    67ac:	e70e      	b.n	65cc <__aeabi_dsub+0x110>
    67ae:	2a00      	cmp	r2, #0
    67b0:	d000      	beq.n	67b4 <__aeabi_dsub+0x2f8>
    67b2:	e0de      	b.n	6972 <__aeabi_dsub+0x4b6>
    67b4:	1c68      	adds	r0, r5, #1
    67b6:	0546      	lsls	r6, r0, #21
    67b8:	0d76      	lsrs	r6, r6, #21
    67ba:	2e01      	cmp	r6, #1
    67bc:	dc00      	bgt.n	67c0 <__aeabi_dsub+0x304>
    67be:	e090      	b.n	68e2 <__aeabi_dsub+0x426>
    67c0:	4d1b      	ldr	r5, [pc, #108]	; (6830 <__aeabi_dsub+0x374>)
    67c2:	42a8      	cmp	r0, r5
    67c4:	d100      	bne.n	67c8 <__aeabi_dsub+0x30c>
    67c6:	e0f5      	b.n	69b4 <__aeabi_dsub+0x4f8>
    67c8:	465e      	mov	r6, fp
    67ca:	1932      	adds	r2, r6, r4
    67cc:	42a2      	cmp	r2, r4
    67ce:	41a4      	sbcs	r4, r4
    67d0:	4264      	negs	r4, r4
    67d2:	1859      	adds	r1, r3, r1
    67d4:	1909      	adds	r1, r1, r4
    67d6:	07cc      	lsls	r4, r1, #31
    67d8:	0852      	lsrs	r2, r2, #1
    67da:	4314      	orrs	r4, r2
    67dc:	0849      	lsrs	r1, r1, #1
    67de:	1c05      	adds	r5, r0, #0
    67e0:	e69c      	b.n	651c <__aeabi_dsub+0x60>
    67e2:	4813      	ldr	r0, [pc, #76]	; (6830 <__aeabi_dsub+0x374>)
    67e4:	4285      	cmp	r5, r0
    67e6:	d000      	beq.n	67ea <__aeabi_dsub+0x32e>
    67e8:	e6d9      	b.n	659e <__aeabi_dsub+0xe2>
    67ea:	e697      	b.n	651c <__aeabi_dsub+0x60>
    67ec:	1c2b      	adds	r3, r5, #0
    67ee:	3b1f      	subs	r3, #31
    67f0:	1c3e      	adds	r6, r7, #0
    67f2:	40de      	lsrs	r6, r3
    67f4:	1c33      	adds	r3, r6, #0
    67f6:	2920      	cmp	r1, #32
    67f8:	d06f      	beq.n	68da <__aeabi_dsub+0x41e>
    67fa:	223f      	movs	r2, #63	; 0x3f
    67fc:	1b55      	subs	r5, r2, r5
    67fe:	40af      	lsls	r7, r5
    6800:	433c      	orrs	r4, r7
    6802:	1e60      	subs	r0, r4, #1
    6804:	4184      	sbcs	r4, r0
    6806:	431c      	orrs	r4, r3
    6808:	2100      	movs	r1, #0
    680a:	2500      	movs	r5, #0
    680c:	e686      	b.n	651c <__aeabi_dsub+0x60>
    680e:	1c38      	adds	r0, r7, #0
    6810:	3820      	subs	r0, #32
    6812:	1c1e      	adds	r6, r3, #0
    6814:	40c6      	lsrs	r6, r0
    6816:	1c30      	adds	r0, r6, #0
    6818:	2f20      	cmp	r7, #32
    681a:	d060      	beq.n	68de <__aeabi_dsub+0x422>
    681c:	2240      	movs	r2, #64	; 0x40
    681e:	1bd7      	subs	r7, r2, r7
    6820:	40bb      	lsls	r3, r7
    6822:	465a      	mov	r2, fp
    6824:	431a      	orrs	r2, r3
    6826:	1e53      	subs	r3, r2, #1
    6828:	419a      	sbcs	r2, r3
    682a:	4302      	orrs	r2, r0
    682c:	2700      	movs	r7, #0
    682e:	e6cd      	b.n	65cc <__aeabi_dsub+0x110>
    6830:	000007ff 	.word	0x000007ff
    6834:	ff7fffff 	.word	0xff7fffff
    6838:	800fffff 	.word	0x800fffff
    683c:	2d00      	cmp	r5, #0
    683e:	d037      	beq.n	68b0 <__aeabi_dsub+0x3f4>
    6840:	4db6      	ldr	r5, [pc, #728]	; (6b1c <__aeabi_dsub+0x660>)
    6842:	42a8      	cmp	r0, r5
    6844:	d100      	bne.n	6848 <__aeabi_dsub+0x38c>
    6846:	e08f      	b.n	6968 <__aeabi_dsub+0x4ac>
    6848:	2580      	movs	r5, #128	; 0x80
    684a:	042d      	lsls	r5, r5, #16
    684c:	427f      	negs	r7, r7
    684e:	4329      	orrs	r1, r5
    6850:	2f38      	cmp	r7, #56	; 0x38
    6852:	dd00      	ble.n	6856 <__aeabi_dsub+0x39a>
    6854:	e0a8      	b.n	69a8 <__aeabi_dsub+0x4ec>
    6856:	2f1f      	cmp	r7, #31
    6858:	dd00      	ble.n	685c <__aeabi_dsub+0x3a0>
    685a:	e124      	b.n	6aa6 <__aeabi_dsub+0x5ea>
    685c:	2520      	movs	r5, #32
    685e:	1bed      	subs	r5, r5, r7
    6860:	1c0e      	adds	r6, r1, #0
    6862:	40ae      	lsls	r6, r5
    6864:	46b0      	mov	r8, r6
    6866:	1c26      	adds	r6, r4, #0
    6868:	40fe      	lsrs	r6, r7
    686a:	4642      	mov	r2, r8
    686c:	40ac      	lsls	r4, r5
    686e:	4316      	orrs	r6, r2
    6870:	1e65      	subs	r5, r4, #1
    6872:	41ac      	sbcs	r4, r5
    6874:	4334      	orrs	r4, r6
    6876:	40f9      	lsrs	r1, r7
    6878:	465a      	mov	r2, fp
    687a:	1b14      	subs	r4, r2, r4
    687c:	45a3      	cmp	fp, r4
    687e:	4192      	sbcs	r2, r2
    6880:	1a5b      	subs	r3, r3, r1
    6882:	4252      	negs	r2, r2
    6884:	1a99      	subs	r1, r3, r2
    6886:	1c05      	adds	r5, r0, #0
    6888:	46e2      	mov	sl, ip
    688a:	e6a6      	b.n	65da <__aeabi_dsub+0x11e>
    688c:	1c13      	adds	r3, r2, #0
    688e:	433b      	orrs	r3, r7
    6890:	1c14      	adds	r4, r2, #0
    6892:	2b00      	cmp	r3, #0
    6894:	d000      	beq.n	6898 <__aeabi_dsub+0x3dc>
    6896:	e6a4      	b.n	65e2 <__aeabi_dsub+0x126>
    6898:	2700      	movs	r7, #0
    689a:	2100      	movs	r1, #0
    689c:	2500      	movs	r5, #0
    689e:	2400      	movs	r4, #0
    68a0:	e6cd      	b.n	663e <__aeabi_dsub+0x182>
    68a2:	465a      	mov	r2, fp
    68a4:	431a      	orrs	r2, r3
    68a6:	1e53      	subs	r3, r2, #1
    68a8:	419a      	sbcs	r2, r3
    68aa:	b2d2      	uxtb	r2, r2
    68ac:	2300      	movs	r3, #0
    68ae:	e700      	b.n	66b2 <__aeabi_dsub+0x1f6>
    68b0:	1c0d      	adds	r5, r1, #0
    68b2:	4325      	orrs	r5, r4
    68b4:	d058      	beq.n	6968 <__aeabi_dsub+0x4ac>
    68b6:	43ff      	mvns	r7, r7
    68b8:	2f00      	cmp	r7, #0
    68ba:	d151      	bne.n	6960 <__aeabi_dsub+0x4a4>
    68bc:	465a      	mov	r2, fp
    68be:	1b14      	subs	r4, r2, r4
    68c0:	45a3      	cmp	fp, r4
    68c2:	4192      	sbcs	r2, r2
    68c4:	1a59      	subs	r1, r3, r1
    68c6:	4252      	negs	r2, r2
    68c8:	1a89      	subs	r1, r1, r2
    68ca:	1c05      	adds	r5, r0, #0
    68cc:	46e2      	mov	sl, ip
    68ce:	e684      	b.n	65da <__aeabi_dsub+0x11e>
    68d0:	4892      	ldr	r0, [pc, #584]	; (6b1c <__aeabi_dsub+0x660>)
    68d2:	4285      	cmp	r5, r0
    68d4:	d000      	beq.n	68d8 <__aeabi_dsub+0x41c>
    68d6:	e6d1      	b.n	667c <__aeabi_dsub+0x1c0>
    68d8:	e620      	b.n	651c <__aeabi_dsub+0x60>
    68da:	2700      	movs	r7, #0
    68dc:	e790      	b.n	6800 <__aeabi_dsub+0x344>
    68de:	2300      	movs	r3, #0
    68e0:	e79f      	b.n	6822 <__aeabi_dsub+0x366>
    68e2:	1c08      	adds	r0, r1, #0
    68e4:	4320      	orrs	r0, r4
    68e6:	2d00      	cmp	r5, #0
    68e8:	d000      	beq.n	68ec <__aeabi_dsub+0x430>
    68ea:	e0c2      	b.n	6a72 <__aeabi_dsub+0x5b6>
    68ec:	2800      	cmp	r0, #0
    68ee:	d100      	bne.n	68f2 <__aeabi_dsub+0x436>
    68f0:	e0ef      	b.n	6ad2 <__aeabi_dsub+0x616>
    68f2:	4658      	mov	r0, fp
    68f4:	4318      	orrs	r0, r3
    68f6:	d100      	bne.n	68fa <__aeabi_dsub+0x43e>
    68f8:	e610      	b.n	651c <__aeabi_dsub+0x60>
    68fa:	4658      	mov	r0, fp
    68fc:	1902      	adds	r2, r0, r4
    68fe:	42a2      	cmp	r2, r4
    6900:	41a4      	sbcs	r4, r4
    6902:	4264      	negs	r4, r4
    6904:	1859      	adds	r1, r3, r1
    6906:	1909      	adds	r1, r1, r4
    6908:	1c14      	adds	r4, r2, #0
    690a:	020a      	lsls	r2, r1, #8
    690c:	d400      	bmi.n	6910 <__aeabi_dsub+0x454>
    690e:	e605      	b.n	651c <__aeabi_dsub+0x60>
    6910:	4b83      	ldr	r3, [pc, #524]	; (6b20 <__aeabi_dsub+0x664>)
    6912:	2501      	movs	r5, #1
    6914:	4019      	ands	r1, r3
    6916:	e601      	b.n	651c <__aeabi_dsub+0x60>
    6918:	1c08      	adds	r0, r1, #0
    691a:	4320      	orrs	r0, r4
    691c:	2d00      	cmp	r5, #0
    691e:	d138      	bne.n	6992 <__aeabi_dsub+0x4d6>
    6920:	2800      	cmp	r0, #0
    6922:	d16f      	bne.n	6a04 <__aeabi_dsub+0x548>
    6924:	4659      	mov	r1, fp
    6926:	4319      	orrs	r1, r3
    6928:	d003      	beq.n	6932 <__aeabi_dsub+0x476>
    692a:	1c19      	adds	r1, r3, #0
    692c:	465c      	mov	r4, fp
    692e:	46e2      	mov	sl, ip
    6930:	e5f4      	b.n	651c <__aeabi_dsub+0x60>
    6932:	2700      	movs	r7, #0
    6934:	2100      	movs	r1, #0
    6936:	2400      	movs	r4, #0
    6938:	e681      	b.n	663e <__aeabi_dsub+0x182>
    693a:	4660      	mov	r0, ip
    693c:	3820      	subs	r0, #32
    693e:	1c1a      	adds	r2, r3, #0
    6940:	40c2      	lsrs	r2, r0
    6942:	4666      	mov	r6, ip
    6944:	1c10      	adds	r0, r2, #0
    6946:	2e20      	cmp	r6, #32
    6948:	d100      	bne.n	694c <__aeabi_dsub+0x490>
    694a:	e0aa      	b.n	6aa2 <__aeabi_dsub+0x5e6>
    694c:	2240      	movs	r2, #64	; 0x40
    694e:	1b92      	subs	r2, r2, r6
    6950:	4093      	lsls	r3, r2
    6952:	465a      	mov	r2, fp
    6954:	431a      	orrs	r2, r3
    6956:	1e53      	subs	r3, r2, #1
    6958:	419a      	sbcs	r2, r3
    695a:	4302      	orrs	r2, r0
    695c:	2300      	movs	r3, #0
    695e:	e6a8      	b.n	66b2 <__aeabi_dsub+0x1f6>
    6960:	4d6e      	ldr	r5, [pc, #440]	; (6b1c <__aeabi_dsub+0x660>)
    6962:	42a8      	cmp	r0, r5
    6964:	d000      	beq.n	6968 <__aeabi_dsub+0x4ac>
    6966:	e773      	b.n	6850 <__aeabi_dsub+0x394>
    6968:	1c19      	adds	r1, r3, #0
    696a:	465c      	mov	r4, fp
    696c:	1c05      	adds	r5, r0, #0
    696e:	46e2      	mov	sl, ip
    6970:	e5d4      	b.n	651c <__aeabi_dsub+0x60>
    6972:	2d00      	cmp	r5, #0
    6974:	d122      	bne.n	69bc <__aeabi_dsub+0x500>
    6976:	1c0d      	adds	r5, r1, #0
    6978:	4325      	orrs	r5, r4
    697a:	d076      	beq.n	6a6a <__aeabi_dsub+0x5ae>
    697c:	43d5      	mvns	r5, r2
    697e:	2d00      	cmp	r5, #0
    6980:	d170      	bne.n	6a64 <__aeabi_dsub+0x5a8>
    6982:	445c      	add	r4, fp
    6984:	455c      	cmp	r4, fp
    6986:	4192      	sbcs	r2, r2
    6988:	1859      	adds	r1, r3, r1
    698a:	4252      	negs	r2, r2
    698c:	1889      	adds	r1, r1, r2
    698e:	1c05      	adds	r5, r0, #0
    6990:	e696      	b.n	66c0 <__aeabi_dsub+0x204>
    6992:	2800      	cmp	r0, #0
    6994:	d14c      	bne.n	6a30 <__aeabi_dsub+0x574>
    6996:	4659      	mov	r1, fp
    6998:	4319      	orrs	r1, r3
    699a:	d100      	bne.n	699e <__aeabi_dsub+0x4e2>
    699c:	e64a      	b.n	6634 <__aeabi_dsub+0x178>
    699e:	1c19      	adds	r1, r3, #0
    69a0:	465c      	mov	r4, fp
    69a2:	46e2      	mov	sl, ip
    69a4:	4d5d      	ldr	r5, [pc, #372]	; (6b1c <__aeabi_dsub+0x660>)
    69a6:	e5b9      	b.n	651c <__aeabi_dsub+0x60>
    69a8:	430c      	orrs	r4, r1
    69aa:	1e61      	subs	r1, r4, #1
    69ac:	418c      	sbcs	r4, r1
    69ae:	b2e4      	uxtb	r4, r4
    69b0:	2100      	movs	r1, #0
    69b2:	e761      	b.n	6878 <__aeabi_dsub+0x3bc>
    69b4:	1c05      	adds	r5, r0, #0
    69b6:	2100      	movs	r1, #0
    69b8:	2400      	movs	r4, #0
    69ba:	e640      	b.n	663e <__aeabi_dsub+0x182>
    69bc:	4d57      	ldr	r5, [pc, #348]	; (6b1c <__aeabi_dsub+0x660>)
    69be:	42a8      	cmp	r0, r5
    69c0:	d053      	beq.n	6a6a <__aeabi_dsub+0x5ae>
    69c2:	4255      	negs	r5, r2
    69c4:	2280      	movs	r2, #128	; 0x80
    69c6:	0416      	lsls	r6, r2, #16
    69c8:	4331      	orrs	r1, r6
    69ca:	2d38      	cmp	r5, #56	; 0x38
    69cc:	dc7b      	bgt.n	6ac6 <__aeabi_dsub+0x60a>
    69ce:	2d1f      	cmp	r5, #31
    69d0:	dd00      	ble.n	69d4 <__aeabi_dsub+0x518>
    69d2:	e08c      	b.n	6aee <__aeabi_dsub+0x632>
    69d4:	2220      	movs	r2, #32
    69d6:	1b56      	subs	r6, r2, r5
    69d8:	1c0a      	adds	r2, r1, #0
    69da:	46b4      	mov	ip, r6
    69dc:	40b2      	lsls	r2, r6
    69de:	1c26      	adds	r6, r4, #0
    69e0:	40ee      	lsrs	r6, r5
    69e2:	4332      	orrs	r2, r6
    69e4:	4690      	mov	r8, r2
    69e6:	4662      	mov	r2, ip
    69e8:	4094      	lsls	r4, r2
    69ea:	1e66      	subs	r6, r4, #1
    69ec:	41b4      	sbcs	r4, r6
    69ee:	4642      	mov	r2, r8
    69f0:	4314      	orrs	r4, r2
    69f2:	40e9      	lsrs	r1, r5
    69f4:	445c      	add	r4, fp
    69f6:	455c      	cmp	r4, fp
    69f8:	4192      	sbcs	r2, r2
    69fa:	18cb      	adds	r3, r1, r3
    69fc:	4252      	negs	r2, r2
    69fe:	1899      	adds	r1, r3, r2
    6a00:	1c05      	adds	r5, r0, #0
    6a02:	e65d      	b.n	66c0 <__aeabi_dsub+0x204>
    6a04:	4658      	mov	r0, fp
    6a06:	4318      	orrs	r0, r3
    6a08:	d100      	bne.n	6a0c <__aeabi_dsub+0x550>
    6a0a:	e587      	b.n	651c <__aeabi_dsub+0x60>
    6a0c:	465e      	mov	r6, fp
    6a0e:	1ba7      	subs	r7, r4, r6
    6a10:	42bc      	cmp	r4, r7
    6a12:	4192      	sbcs	r2, r2
    6a14:	1ac8      	subs	r0, r1, r3
    6a16:	4252      	negs	r2, r2
    6a18:	1a80      	subs	r0, r0, r2
    6a1a:	0206      	lsls	r6, r0, #8
    6a1c:	d560      	bpl.n	6ae0 <__aeabi_dsub+0x624>
    6a1e:	4658      	mov	r0, fp
    6a20:	1b04      	subs	r4, r0, r4
    6a22:	45a3      	cmp	fp, r4
    6a24:	4192      	sbcs	r2, r2
    6a26:	1a59      	subs	r1, r3, r1
    6a28:	4252      	negs	r2, r2
    6a2a:	1a89      	subs	r1, r1, r2
    6a2c:	46e2      	mov	sl, ip
    6a2e:	e575      	b.n	651c <__aeabi_dsub+0x60>
    6a30:	4658      	mov	r0, fp
    6a32:	4318      	orrs	r0, r3
    6a34:	d033      	beq.n	6a9e <__aeabi_dsub+0x5e2>
    6a36:	0748      	lsls	r0, r1, #29
    6a38:	08e4      	lsrs	r4, r4, #3
    6a3a:	4304      	orrs	r4, r0
    6a3c:	2080      	movs	r0, #128	; 0x80
    6a3e:	08c9      	lsrs	r1, r1, #3
    6a40:	0300      	lsls	r0, r0, #12
    6a42:	4201      	tst	r1, r0
    6a44:	d008      	beq.n	6a58 <__aeabi_dsub+0x59c>
    6a46:	08dd      	lsrs	r5, r3, #3
    6a48:	4205      	tst	r5, r0
    6a4a:	d105      	bne.n	6a58 <__aeabi_dsub+0x59c>
    6a4c:	4659      	mov	r1, fp
    6a4e:	08ca      	lsrs	r2, r1, #3
    6a50:	075c      	lsls	r4, r3, #29
    6a52:	4314      	orrs	r4, r2
    6a54:	1c29      	adds	r1, r5, #0
    6a56:	46e2      	mov	sl, ip
    6a58:	0f63      	lsrs	r3, r4, #29
    6a5a:	00c9      	lsls	r1, r1, #3
    6a5c:	4319      	orrs	r1, r3
    6a5e:	00e4      	lsls	r4, r4, #3
    6a60:	4d2e      	ldr	r5, [pc, #184]	; (6b1c <__aeabi_dsub+0x660>)
    6a62:	e55b      	b.n	651c <__aeabi_dsub+0x60>
    6a64:	4a2d      	ldr	r2, [pc, #180]	; (6b1c <__aeabi_dsub+0x660>)
    6a66:	4290      	cmp	r0, r2
    6a68:	d1af      	bne.n	69ca <__aeabi_dsub+0x50e>
    6a6a:	1c19      	adds	r1, r3, #0
    6a6c:	465c      	mov	r4, fp
    6a6e:	1c05      	adds	r5, r0, #0
    6a70:	e554      	b.n	651c <__aeabi_dsub+0x60>
    6a72:	2800      	cmp	r0, #0
    6a74:	d030      	beq.n	6ad8 <__aeabi_dsub+0x61c>
    6a76:	4658      	mov	r0, fp
    6a78:	4318      	orrs	r0, r3
    6a7a:	d010      	beq.n	6a9e <__aeabi_dsub+0x5e2>
    6a7c:	2580      	movs	r5, #128	; 0x80
    6a7e:	0748      	lsls	r0, r1, #29
    6a80:	08e4      	lsrs	r4, r4, #3
    6a82:	08c9      	lsrs	r1, r1, #3
    6a84:	032d      	lsls	r5, r5, #12
    6a86:	4304      	orrs	r4, r0
    6a88:	4229      	tst	r1, r5
    6a8a:	d0e5      	beq.n	6a58 <__aeabi_dsub+0x59c>
    6a8c:	08d8      	lsrs	r0, r3, #3
    6a8e:	4228      	tst	r0, r5
    6a90:	d1e2      	bne.n	6a58 <__aeabi_dsub+0x59c>
    6a92:	465d      	mov	r5, fp
    6a94:	08ea      	lsrs	r2, r5, #3
    6a96:	075c      	lsls	r4, r3, #29
    6a98:	4314      	orrs	r4, r2
    6a9a:	1c01      	adds	r1, r0, #0
    6a9c:	e7dc      	b.n	6a58 <__aeabi_dsub+0x59c>
    6a9e:	4d1f      	ldr	r5, [pc, #124]	; (6b1c <__aeabi_dsub+0x660>)
    6aa0:	e53c      	b.n	651c <__aeabi_dsub+0x60>
    6aa2:	2300      	movs	r3, #0
    6aa4:	e755      	b.n	6952 <__aeabi_dsub+0x496>
    6aa6:	1c3d      	adds	r5, r7, #0
    6aa8:	3d20      	subs	r5, #32
    6aaa:	1c0e      	adds	r6, r1, #0
    6aac:	40ee      	lsrs	r6, r5
    6aae:	1c35      	adds	r5, r6, #0
    6ab0:	2f20      	cmp	r7, #32
    6ab2:	d02e      	beq.n	6b12 <__aeabi_dsub+0x656>
    6ab4:	2640      	movs	r6, #64	; 0x40
    6ab6:	1bf7      	subs	r7, r6, r7
    6ab8:	40b9      	lsls	r1, r7
    6aba:	430c      	orrs	r4, r1
    6abc:	1e61      	subs	r1, r4, #1
    6abe:	418c      	sbcs	r4, r1
    6ac0:	432c      	orrs	r4, r5
    6ac2:	2100      	movs	r1, #0
    6ac4:	e6d8      	b.n	6878 <__aeabi_dsub+0x3bc>
    6ac6:	430c      	orrs	r4, r1
    6ac8:	1e61      	subs	r1, r4, #1
    6aca:	418c      	sbcs	r4, r1
    6acc:	b2e4      	uxtb	r4, r4
    6ace:	2100      	movs	r1, #0
    6ad0:	e790      	b.n	69f4 <__aeabi_dsub+0x538>
    6ad2:	1c19      	adds	r1, r3, #0
    6ad4:	465c      	mov	r4, fp
    6ad6:	e521      	b.n	651c <__aeabi_dsub+0x60>
    6ad8:	1c19      	adds	r1, r3, #0
    6ada:	465c      	mov	r4, fp
    6adc:	4d0f      	ldr	r5, [pc, #60]	; (6b1c <__aeabi_dsub+0x660>)
    6ade:	e51d      	b.n	651c <__aeabi_dsub+0x60>
    6ae0:	1c03      	adds	r3, r0, #0
    6ae2:	433b      	orrs	r3, r7
    6ae4:	d100      	bne.n	6ae8 <__aeabi_dsub+0x62c>
    6ae6:	e724      	b.n	6932 <__aeabi_dsub+0x476>
    6ae8:	1c01      	adds	r1, r0, #0
    6aea:	1c3c      	adds	r4, r7, #0
    6aec:	e516      	b.n	651c <__aeabi_dsub+0x60>
    6aee:	2620      	movs	r6, #32
    6af0:	4276      	negs	r6, r6
    6af2:	1976      	adds	r6, r6, r5
    6af4:	1c0a      	adds	r2, r1, #0
    6af6:	40f2      	lsrs	r2, r6
    6af8:	4690      	mov	r8, r2
    6afa:	2d20      	cmp	r5, #32
    6afc:	d00b      	beq.n	6b16 <__aeabi_dsub+0x65a>
    6afe:	2640      	movs	r6, #64	; 0x40
    6b00:	1b75      	subs	r5, r6, r5
    6b02:	40a9      	lsls	r1, r5
    6b04:	430c      	orrs	r4, r1
    6b06:	1e61      	subs	r1, r4, #1
    6b08:	418c      	sbcs	r4, r1
    6b0a:	4645      	mov	r5, r8
    6b0c:	432c      	orrs	r4, r5
    6b0e:	2100      	movs	r1, #0
    6b10:	e770      	b.n	69f4 <__aeabi_dsub+0x538>
    6b12:	2100      	movs	r1, #0
    6b14:	e7d1      	b.n	6aba <__aeabi_dsub+0x5fe>
    6b16:	2100      	movs	r1, #0
    6b18:	e7f4      	b.n	6b04 <__aeabi_dsub+0x648>
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	000007ff 	.word	0x000007ff
    6b20:	ff7fffff 	.word	0xff7fffff

00006b24 <__aeabi_d2iz>:
    6b24:	b570      	push	{r4, r5, r6, lr}
    6b26:	1c0b      	adds	r3, r1, #0
    6b28:	4c12      	ldr	r4, [pc, #72]	; (6b74 <__aeabi_d2iz+0x50>)
    6b2a:	0309      	lsls	r1, r1, #12
    6b2c:	0b0e      	lsrs	r6, r1, #12
    6b2e:	0059      	lsls	r1, r3, #1
    6b30:	1c02      	adds	r2, r0, #0
    6b32:	0d49      	lsrs	r1, r1, #21
    6b34:	0fdd      	lsrs	r5, r3, #31
    6b36:	2000      	movs	r0, #0
    6b38:	42a1      	cmp	r1, r4
    6b3a:	dd11      	ble.n	6b60 <__aeabi_d2iz+0x3c>
    6b3c:	480e      	ldr	r0, [pc, #56]	; (6b78 <__aeabi_d2iz+0x54>)
    6b3e:	4281      	cmp	r1, r0
    6b40:	dc0f      	bgt.n	6b62 <__aeabi_d2iz+0x3e>
    6b42:	2080      	movs	r0, #128	; 0x80
    6b44:	0340      	lsls	r0, r0, #13
    6b46:	4306      	orrs	r6, r0
    6b48:	480c      	ldr	r0, [pc, #48]	; (6b7c <__aeabi_d2iz+0x58>)
    6b4a:	1a40      	subs	r0, r0, r1
    6b4c:	281f      	cmp	r0, #31
    6b4e:	dd0b      	ble.n	6b68 <__aeabi_d2iz+0x44>
    6b50:	4a0b      	ldr	r2, [pc, #44]	; (6b80 <__aeabi_d2iz+0x5c>)
    6b52:	1a52      	subs	r2, r2, r1
    6b54:	40d6      	lsrs	r6, r2
    6b56:	1c32      	adds	r2, r6, #0
    6b58:	4250      	negs	r0, r2
    6b5a:	2d00      	cmp	r5, #0
    6b5c:	d100      	bne.n	6b60 <__aeabi_d2iz+0x3c>
    6b5e:	1c10      	adds	r0, r2, #0
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	4b08      	ldr	r3, [pc, #32]	; (6b84 <__aeabi_d2iz+0x60>)
    6b64:	18e8      	adds	r0, r5, r3
    6b66:	e7fb      	b.n	6b60 <__aeabi_d2iz+0x3c>
    6b68:	4b07      	ldr	r3, [pc, #28]	; (6b88 <__aeabi_d2iz+0x64>)
    6b6a:	40c2      	lsrs	r2, r0
    6b6c:	18c9      	adds	r1, r1, r3
    6b6e:	408e      	lsls	r6, r1
    6b70:	4332      	orrs	r2, r6
    6b72:	e7f1      	b.n	6b58 <__aeabi_d2iz+0x34>
    6b74:	000003fe 	.word	0x000003fe
    6b78:	0000041d 	.word	0x0000041d
    6b7c:	00000433 	.word	0x00000433
    6b80:	00000413 	.word	0x00000413
    6b84:	7fffffff 	.word	0x7fffffff
    6b88:	fffffbed 	.word	0xfffffbed

00006b8c <__aeabi_i2d>:
    6b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b8e:	1e04      	subs	r4, r0, #0
    6b90:	d031      	beq.n	6bf6 <__aeabi_i2d+0x6a>
    6b92:	0fc7      	lsrs	r7, r0, #31
    6b94:	d000      	beq.n	6b98 <__aeabi_i2d+0xc>
    6b96:	4244      	negs	r4, r0
    6b98:	1c20      	adds	r0, r4, #0
    6b9a:	f000 f8bb 	bl	6d14 <__clzsi2>
    6b9e:	4d18      	ldr	r5, [pc, #96]	; (6c00 <__aeabi_i2d+0x74>)
    6ba0:	1a2d      	subs	r5, r5, r0
    6ba2:	280a      	cmp	r0, #10
    6ba4:	dd19      	ble.n	6bda <__aeabi_i2d+0x4e>
    6ba6:	380b      	subs	r0, #11
    6ba8:	4084      	lsls	r4, r0
    6baa:	0324      	lsls	r4, r4, #12
    6bac:	056d      	lsls	r5, r5, #21
    6bae:	0b24      	lsrs	r4, r4, #12
    6bb0:	0d6d      	lsrs	r5, r5, #21
    6bb2:	1c3a      	adds	r2, r7, #0
    6bb4:	2600      	movs	r6, #0
    6bb6:	2000      	movs	r0, #0
    6bb8:	2100      	movs	r1, #0
    6bba:	0d0b      	lsrs	r3, r1, #20
    6bbc:	0324      	lsls	r4, r4, #12
    6bbe:	0b24      	lsrs	r4, r4, #12
    6bc0:	051b      	lsls	r3, r3, #20
    6bc2:	4323      	orrs	r3, r4
    6bc4:	4c0f      	ldr	r4, [pc, #60]	; (6c04 <__aeabi_i2d+0x78>)
    6bc6:	052d      	lsls	r5, r5, #20
    6bc8:	401c      	ands	r4, r3
    6bca:	432c      	orrs	r4, r5
    6bcc:	0064      	lsls	r4, r4, #1
    6bce:	0864      	lsrs	r4, r4, #1
    6bd0:	07d3      	lsls	r3, r2, #31
    6bd2:	1c21      	adds	r1, r4, #0
    6bd4:	1c30      	adds	r0, r6, #0
    6bd6:	4319      	orrs	r1, r3
    6bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bda:	1c06      	adds	r6, r0, #0
    6bdc:	3615      	adds	r6, #21
    6bde:	1c23      	adds	r3, r4, #0
    6be0:	40b3      	lsls	r3, r6
    6be2:	1c1e      	adds	r6, r3, #0
    6be4:	230b      	movs	r3, #11
    6be6:	1a18      	subs	r0, r3, r0
    6be8:	40c4      	lsrs	r4, r0
    6bea:	0324      	lsls	r4, r4, #12
    6bec:	056d      	lsls	r5, r5, #21
    6bee:	0b24      	lsrs	r4, r4, #12
    6bf0:	0d6d      	lsrs	r5, r5, #21
    6bf2:	1c3a      	adds	r2, r7, #0
    6bf4:	e7df      	b.n	6bb6 <__aeabi_i2d+0x2a>
    6bf6:	2200      	movs	r2, #0
    6bf8:	2500      	movs	r5, #0
    6bfa:	2400      	movs	r4, #0
    6bfc:	2600      	movs	r6, #0
    6bfe:	e7da      	b.n	6bb6 <__aeabi_i2d+0x2a>
    6c00:	0000041e 	.word	0x0000041e
    6c04:	800fffff 	.word	0x800fffff

00006c08 <__aeabi_ui2d>:
    6c08:	b510      	push	{r4, lr}
    6c0a:	1e04      	subs	r4, r0, #0
    6c0c:	d028      	beq.n	6c60 <__aeabi_ui2d+0x58>
    6c0e:	f000 f881 	bl	6d14 <__clzsi2>
    6c12:	4a15      	ldr	r2, [pc, #84]	; (6c68 <__aeabi_ui2d+0x60>)
    6c14:	1a12      	subs	r2, r2, r0
    6c16:	280a      	cmp	r0, #10
    6c18:	dd15      	ble.n	6c46 <__aeabi_ui2d+0x3e>
    6c1a:	380b      	subs	r0, #11
    6c1c:	4084      	lsls	r4, r0
    6c1e:	0324      	lsls	r4, r4, #12
    6c20:	0552      	lsls	r2, r2, #21
    6c22:	0b24      	lsrs	r4, r4, #12
    6c24:	0d52      	lsrs	r2, r2, #21
    6c26:	2300      	movs	r3, #0
    6c28:	2000      	movs	r0, #0
    6c2a:	2100      	movs	r1, #0
    6c2c:	0324      	lsls	r4, r4, #12
    6c2e:	1c18      	adds	r0, r3, #0
    6c30:	0d0b      	lsrs	r3, r1, #20
    6c32:	0b24      	lsrs	r4, r4, #12
    6c34:	051b      	lsls	r3, r3, #20
    6c36:	4323      	orrs	r3, r4
    6c38:	4c0c      	ldr	r4, [pc, #48]	; (6c6c <__aeabi_ui2d+0x64>)
    6c3a:	0512      	lsls	r2, r2, #20
    6c3c:	401c      	ands	r4, r3
    6c3e:	4314      	orrs	r4, r2
    6c40:	0064      	lsls	r4, r4, #1
    6c42:	0861      	lsrs	r1, r4, #1
    6c44:	bd10      	pop	{r4, pc}
    6c46:	1c03      	adds	r3, r0, #0
    6c48:	3315      	adds	r3, #21
    6c4a:	1c21      	adds	r1, r4, #0
    6c4c:	4099      	lsls	r1, r3
    6c4e:	1c0b      	adds	r3, r1, #0
    6c50:	210b      	movs	r1, #11
    6c52:	1a08      	subs	r0, r1, r0
    6c54:	40c4      	lsrs	r4, r0
    6c56:	0324      	lsls	r4, r4, #12
    6c58:	0552      	lsls	r2, r2, #21
    6c5a:	0b24      	lsrs	r4, r4, #12
    6c5c:	0d52      	lsrs	r2, r2, #21
    6c5e:	e7e3      	b.n	6c28 <__aeabi_ui2d+0x20>
    6c60:	2200      	movs	r2, #0
    6c62:	2400      	movs	r4, #0
    6c64:	2300      	movs	r3, #0
    6c66:	e7df      	b.n	6c28 <__aeabi_ui2d+0x20>
    6c68:	0000041e 	.word	0x0000041e
    6c6c:	800fffff 	.word	0x800fffff

00006c70 <__aeabi_f2d>:
    6c70:	0043      	lsls	r3, r0, #1
    6c72:	0e1b      	lsrs	r3, r3, #24
    6c74:	1c5a      	adds	r2, r3, #1
    6c76:	0241      	lsls	r1, r0, #9
    6c78:	b2d2      	uxtb	r2, r2
    6c7a:	b570      	push	{r4, r5, r6, lr}
    6c7c:	0a4c      	lsrs	r4, r1, #9
    6c7e:	0fc5      	lsrs	r5, r0, #31
    6c80:	2a01      	cmp	r2, #1
    6c82:	dd17      	ble.n	6cb4 <__aeabi_f2d+0x44>
    6c84:	22e0      	movs	r2, #224	; 0xe0
    6c86:	0092      	lsls	r2, r2, #2
    6c88:	0764      	lsls	r4, r4, #29
    6c8a:	0b09      	lsrs	r1, r1, #12
    6c8c:	1898      	adds	r0, r3, r2
    6c8e:	2200      	movs	r2, #0
    6c90:	2300      	movs	r3, #0
    6c92:	0d1e      	lsrs	r6, r3, #20
    6c94:	1c22      	adds	r2, r4, #0
    6c96:	0534      	lsls	r4, r6, #20
    6c98:	430c      	orrs	r4, r1
    6c9a:	491b      	ldr	r1, [pc, #108]	; (6d08 <__aeabi_f2d+0x98>)
    6c9c:	0540      	lsls	r0, r0, #21
    6c9e:	0840      	lsrs	r0, r0, #1
    6ca0:	4021      	ands	r1, r4
    6ca2:	4301      	orrs	r1, r0
    6ca4:	0049      	lsls	r1, r1, #1
    6ca6:	0849      	lsrs	r1, r1, #1
    6ca8:	07ed      	lsls	r5, r5, #31
    6caa:	1c0b      	adds	r3, r1, #0
    6cac:	432b      	orrs	r3, r5
    6cae:	1c10      	adds	r0, r2, #0
    6cb0:	1c19      	adds	r1, r3, #0
    6cb2:	bd70      	pop	{r4, r5, r6, pc}
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d115      	bne.n	6ce4 <__aeabi_f2d+0x74>
    6cb8:	2c00      	cmp	r4, #0
    6cba:	d01c      	beq.n	6cf6 <__aeabi_f2d+0x86>
    6cbc:	1c20      	adds	r0, r4, #0
    6cbe:	f000 f829 	bl	6d14 <__clzsi2>
    6cc2:	280a      	cmp	r0, #10
    6cc4:	dc1a      	bgt.n	6cfc <__aeabi_f2d+0x8c>
    6cc6:	210b      	movs	r1, #11
    6cc8:	1a09      	subs	r1, r1, r0
    6cca:	1c23      	adds	r3, r4, #0
    6ccc:	40cb      	lsrs	r3, r1
    6cce:	1c19      	adds	r1, r3, #0
    6cd0:	1c03      	adds	r3, r0, #0
    6cd2:	3315      	adds	r3, #21
    6cd4:	409c      	lsls	r4, r3
    6cd6:	4b0d      	ldr	r3, [pc, #52]	; (6d0c <__aeabi_f2d+0x9c>)
    6cd8:	0309      	lsls	r1, r1, #12
    6cda:	1a18      	subs	r0, r3, r0
    6cdc:	0540      	lsls	r0, r0, #21
    6cde:	0b09      	lsrs	r1, r1, #12
    6ce0:	0d40      	lsrs	r0, r0, #21
    6ce2:	e7d4      	b.n	6c8e <__aeabi_f2d+0x1e>
    6ce4:	2c00      	cmp	r4, #0
    6ce6:	d003      	beq.n	6cf0 <__aeabi_f2d+0x80>
    6ce8:	0764      	lsls	r4, r4, #29
    6cea:	0b09      	lsrs	r1, r1, #12
    6cec:	4808      	ldr	r0, [pc, #32]	; (6d10 <__aeabi_f2d+0xa0>)
    6cee:	e7ce      	b.n	6c8e <__aeabi_f2d+0x1e>
    6cf0:	4807      	ldr	r0, [pc, #28]	; (6d10 <__aeabi_f2d+0xa0>)
    6cf2:	2100      	movs	r1, #0
    6cf4:	e7cb      	b.n	6c8e <__aeabi_f2d+0x1e>
    6cf6:	2000      	movs	r0, #0
    6cf8:	2100      	movs	r1, #0
    6cfa:	e7c8      	b.n	6c8e <__aeabi_f2d+0x1e>
    6cfc:	1c01      	adds	r1, r0, #0
    6cfe:	390b      	subs	r1, #11
    6d00:	408c      	lsls	r4, r1
    6d02:	1c21      	adds	r1, r4, #0
    6d04:	2400      	movs	r4, #0
    6d06:	e7e6      	b.n	6cd6 <__aeabi_f2d+0x66>
    6d08:	800fffff 	.word	0x800fffff
    6d0c:	00000389 	.word	0x00000389
    6d10:	000007ff 	.word	0x000007ff

00006d14 <__clzsi2>:
    6d14:	211c      	movs	r1, #28
    6d16:	2301      	movs	r3, #1
    6d18:	041b      	lsls	r3, r3, #16
    6d1a:	4298      	cmp	r0, r3
    6d1c:	d301      	bcc.n	6d22 <__clzsi2+0xe>
    6d1e:	0c00      	lsrs	r0, r0, #16
    6d20:	3910      	subs	r1, #16
    6d22:	0a1b      	lsrs	r3, r3, #8
    6d24:	4298      	cmp	r0, r3
    6d26:	d301      	bcc.n	6d2c <__clzsi2+0x18>
    6d28:	0a00      	lsrs	r0, r0, #8
    6d2a:	3908      	subs	r1, #8
    6d2c:	091b      	lsrs	r3, r3, #4
    6d2e:	4298      	cmp	r0, r3
    6d30:	d301      	bcc.n	6d36 <__clzsi2+0x22>
    6d32:	0900      	lsrs	r0, r0, #4
    6d34:	3904      	subs	r1, #4
    6d36:	a202      	add	r2, pc, #8	; (adr r2, 6d40 <__clzsi2+0x2c>)
    6d38:	5c10      	ldrb	r0, [r2, r0]
    6d3a:	1840      	adds	r0, r0, r1
    6d3c:	4770      	bx	lr
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	02020304 	.word	0x02020304
    6d44:	01010101 	.word	0x01010101
	...
    6d50:	0000036a 	.word	0x0000036a
    6d54:	000005b4 	.word	0x000005b4
    6d58:	000005b4 	.word	0x000005b4
    6d5c:	000005b4 	.word	0x000005b4
    6d60:	000005b4 	.word	0x000005b4
    6d64:	000005b4 	.word	0x000005b4
    6d68:	000005b4 	.word	0x000005b4
    6d6c:	000005b4 	.word	0x000005b4
    6d70:	000005b4 	.word	0x000005b4
    6d74:	000005b4 	.word	0x000005b4
    6d78:	000005b4 	.word	0x000005b4
    6d7c:	000005b4 	.word	0x000005b4
    6d80:	000005b4 	.word	0x000005b4
    6d84:	000005b4 	.word	0x000005b4
    6d88:	000005b4 	.word	0x000005b4
    6d8c:	000005b4 	.word	0x000005b4
    6d90:	00000352 	.word	0x00000352
    6d94:	000005b4 	.word	0x000005b4
    6d98:	000005b4 	.word	0x000005b4
    6d9c:	000005b4 	.word	0x000005b4
    6da0:	000005b4 	.word	0x000005b4
    6da4:	000005b4 	.word	0x000005b4
    6da8:	000005b4 	.word	0x000005b4
    6dac:	000005b4 	.word	0x000005b4
    6db0:	000005b4 	.word	0x000005b4
    6db4:	000005b4 	.word	0x000005b4
    6db8:	000005b4 	.word	0x000005b4
    6dbc:	000005b4 	.word	0x000005b4
    6dc0:	000005b4 	.word	0x000005b4
    6dc4:	000005b4 	.word	0x000005b4
    6dc8:	000005b4 	.word	0x000005b4
    6dcc:	000005b4 	.word	0x000005b4
    6dd0:	00000362 	.word	0x00000362
    6dd4:	000005b4 	.word	0x000005b4
    6dd8:	000005b4 	.word	0x000005b4
    6ddc:	000005b4 	.word	0x000005b4
    6de0:	000005b4 	.word	0x000005b4
    6de4:	000005b4 	.word	0x000005b4
    6de8:	000005b4 	.word	0x000005b4
    6dec:	000005b4 	.word	0x000005b4
    6df0:	000005b4 	.word	0x000005b4
    6df4:	000005b4 	.word	0x000005b4
    6df8:	000005b4 	.word	0x000005b4
    6dfc:	000005b4 	.word	0x000005b4
    6e00:	000005b4 	.word	0x000005b4
    6e04:	000005b4 	.word	0x000005b4
    6e08:	000005b4 	.word	0x000005b4
    6e0c:	000005b4 	.word	0x000005b4
    6e10:	0000035a 	.word	0x0000035a
    6e14:	0000033a 	.word	0x0000033a
    6e18:	00000372 	.word	0x00000372
    6e1c:	0000034a 	.word	0x0000034a
    6e20:	00000342 	.word	0x00000342
    6e24:	00000002 	.word	0x00000002
    6e28:	00000003 	.word	0x00000003
    6e2c:	0000ffff 	.word	0x0000ffff
    6e30:	0000ffff 	.word	0x0000ffff
    6e34:	00000004 	.word	0x00000004
    6e38:	00000005 	.word	0x00000005
    6e3c:	00000006 	.word	0x00000006
    6e40:	00000007 	.word	0x00000007
    6e44:	0000ffff 	.word	0x0000ffff
    6e48:	0000ffff 	.word	0x0000ffff
    6e4c:	0000ffff 	.word	0x0000ffff
    6e50:	0000ffff 	.word	0x0000ffff
    6e54:	0000ffff 	.word	0x0000ffff
    6e58:	0000ffff 	.word	0x0000ffff
    6e5c:	0000ffff 	.word	0x0000ffff
    6e60:	0000ffff 	.word	0x0000ffff
    6e64:	00000008 	.word	0x00000008
    6e68:	00000009 	.word	0x00000009
    6e6c:	0000000a 	.word	0x0000000a
    6e70:	0000000b 	.word	0x0000000b
    6e74:	42000800 	.word	0x42000800
    6e78:	42000c00 	.word	0x42000c00
    6e7c:	42001000 	.word	0x42001000
    6e80:	42001400 	.word	0x42001400
    6e84:	0c0b0a09 	.word	0x0c0b0a09
    6e88:	00001834 	.word	0x00001834
    6e8c:	00001890 	.word	0x00001890
    6e90:	00001890 	.word	0x00001890
    6e94:	0000182e 	.word	0x0000182e
    6e98:	0000182e 	.word	0x0000182e
    6e9c:	0000184a 	.word	0x0000184a
    6ea0:	0000183a 	.word	0x0000183a
    6ea4:	00001850 	.word	0x00001850
    6ea8:	0000187e 	.word	0x0000187e
    6eac:	00001918 	.word	0x00001918
    6eb0:	00001984 	.word	0x00001984
    6eb4:	00001984 	.word	0x00001984
    6eb8:	000018f8 	.word	0x000018f8
    6ebc:	0000190a 	.word	0x0000190a
    6ec0:	00001926 	.word	0x00001926
    6ec4:	000018fc 	.word	0x000018fc
    6ec8:	00001934 	.word	0x00001934
    6ecc:	00001974 	.word	0x00001974
    6ed0:	216f6f77 	.word	0x216f6f77
    6ed4:	000d0a21 	.word	0x000d0a21
    6ed8:	64616552 	.word	0x64616552
    6edc:	63646120 	.word	0x63646120
    6ee0:	6c617620 	.word	0x6c617620
    6ee4:	69206575 	.word	0x69206575
    6ee8:	66252073 	.word	0x66252073
    6eec:	00000d0a 	.word	0x00000d0a
    6ef0:	00000043 	.word	0x00000043

00006ef4 <_global_impure_ptr>:
    6ef4:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    6f04:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
    6f14:	6e616e00 30003000 34333231 38373635     .nan.0.012345678
    6f24:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    6f34:	62613938 66656463 666e4900 74696e69     89abcdef.Infinit
    6f44:	614e0079 0000004e                       y.NaN...

00006f4c <__sf_fake_stdin>:
	...

00006f6c <__sf_fake_stdout>:
	...

00006f8c <__sf_fake_stderr>:
	...
    6fac:	49534f50 002e0058 00000000              POSIX.......

00006fb8 <__mprec_tens>:
    6fb8:	00000000 3ff00000 00000000 40240000     .......?......$@
    6fc8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    6fd8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    6fe8:	00000000 412e8480 00000000 416312d0     .......A......cA
    6ff8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    7008:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    7018:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    7028:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    7038:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    7048:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    7058:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    7068:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    7078:	79d99db4 44ea7843                       ...yCx.D

00007080 <__mprec_bigtens>:
    7080:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7090:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    70a0:	7f73bf3c 75154fdd                       <.s..O.u

000070a8 <p05.5281>:
    70a8:	00000005 00000019 0000007d 00004ee4     ........}....N..
    70b8:	00004e96 00004ec4 00004e1e 00004ec4     .N...N...N...N..
    70c8:	00004eba 00004ec4 00004e1e 00004e96     .N...N...N...N..
    70d8:	00004e96 00004eba 00004e1e 00004e16     .N...N...N...N..
    70e8:	00004e16 00004e16 00004eca 000058b0     .N...N...N...X..
    70f8:	0000584c 00005894 0000577a 00005894     LX...X..zW...X..
    7108:	00005888 00005894 0000577a 0000584c     .X...X..zW..LX..
    7118:	0000584c 00005888 0000577a 00005770     LX...X..zW..pW..
    7128:	00005770 00005770 00005ad4 00006180     pW..pW...Z...a..
    7138:	0000636e 0000636e 00006160 0000604a     nc..nc..`a..J`..
    7148:	0000604a 00006152 00006160 0000604a     J`..Ra..`a..J`..
    7158:	00006152 0000604a 00006160 00006048     Ra..J`..`a..H`..
    7168:	00006048 00006048 00006376              H`..H`..vc..

00007174 <_init>:
    7174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	bcf8      	pop	{r3, r4, r5, r6, r7}
    717a:	bc08      	pop	{r3}
    717c:	469e      	mov	lr, r3
    717e:	4770      	bx	lr

00007180 <__init_array_start>:
    7180:	000000d9 	.word	0x000000d9

00007184 <_fini>:
    7184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7186:	46c0      	nop			; (mov r8, r8)
    7188:	bcf8      	pop	{r3, r4, r5, r6, r7}
    718a:	bc08      	pop	{r3}
    718c:	469e      	mov	lr, r3
    718e:	4770      	bx	lr

00007190 <__fini_array_start>:
    7190:	000000b1 	.word	0x000000b1
